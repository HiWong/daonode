// Generated by CoffeeScript 1.6.2
(function() {
  var add, assign, begin, block, break_, callcc, catch_, continue_, core, dec, eq, eval_, funcall, if_, iff, inc, jsfun, jsobject, lamda, le, loop_, macall, macro, makeLabel, not_, print_, protect, qq, quote, solve, string, suffixinc, throw_, until_, uq, uqs, vari, variable, while_, xexports, _, _ref;

  _ = require("underscore");

  solve = (core = require('../lib/core')).solve;

  _ref = require('../lib/util'), string = _ref.string, begin = _ref.begin, quote = _ref.quote, assign = _ref.assign, print_ = _ref.print_, jsobject = _ref.jsobject, variable = _ref.variable, funcall = _ref.funcall, macall = _ref.macall, lamda = _ref.lamda, macro = _ref.macro, jsfun = _ref.jsfun, if_ = _ref.if_, add = _ref.add, eq = _ref.eq, le = _ref.le, inc = _ref.inc, suffixinc = _ref.suffixinc, print_ = _ref.print_, loop_ = _ref.loop_, until_ = _ref.until_, while_ = _ref.while_, not_ = _ref.not_, dec = _ref.dec, eval_ = _ref.eval_, qq = _ref.qq, uq = _ref.uq, uqs = _ref.uqs, iff = _ref.iff, block = _ref.block, break_ = _ref.break_, continue_ = _ref.continue_, makeLabel = _ref.makeLabel, catch_ = _ref.catch_, throw_ = _ref.throw_, protect = _ref.protect, callcc = _ref.callcc;

  vari = function(name) {
    return name;
  };

  xexports = {};

  exports.Test = {
    "test eval_ quote": function(test) {
      test.equal(solve(quote(1)), 1);
      test.equal(solve(eval_(quote(1), string('../lib/compiled2.js'))), 1);
      return test.done();
    },
    "test assign inc dec": function(test) {
      var a;

      a = vari('a');
      test.equal(solve(begin(assign(a, 1))), 1);
      test.equal(solve(begin(assign(a, 1), a)), 1);
      test.equal(solve(begin(assign(a, 1), inc(a))), 2);
      test.equal(solve(begin(assign(a, 1), inc(a), inc(a))), 3);
      test.equal(solve(begin(assign(a, 1), inc(a), inc(a), inc(a))), 4);
      return test.done();
    },
    "test begin": function(test) {
      test.equal(solve(begin(1)), 1);
      test.equal(solve(begin(1, 2)), 2);
      test.equal(solve(begin(1, 2, 3)), 3);
      return test.done();
    },
    "test if_": function(test) {
      test.equal(solve(if_(1, 2, 3)), 2);
      test.equal(solve(if_(0, 2, 3)), 3);
      return test.done();
    },
    "test iff": function(test) {
      test.equal(solve(iff([[1, 2]], 3)), 2);
      test.equal(solve(iff([[0, 2], [1, 3]], 5)), 3);
      return test.done();
    },
    "test catch throw": function(test) {
      var a;

      a = vari('a');
      test.equal(solve(catch_(1, 2)), 2);
      test.equal(solve(catch_(1, throw_(1, 2), 3)), 2);
      return test.done();
    },
    "test protect": function(test) {
      var foo;

      foo = makeLabel('foo');
      test.equal(solve(block(foo, protect(break_(foo, 1), print_(2)))), 1);
      test.equal(solve(block(foo, protect(break_(foo, 1), print_(2), print_(3)))), 1);
      return test.done();
    },
    "test callcc": function(test) {
      test.equal(solve(begin(callcc(jsfun(function(k) {
        return k(null);
      })), add(1, 2))), 3);
      return test.done();
    },
    "test block lamda": function(test) {
      var a, b, f, x;

      a = makeLabel('a');
      b = makeLabel('b');
      x = vari('x');
      f = vari('f');
      test.equal(solve(block(a, funcall(lamda([x], break_(a, 2)), 1), 3)), 2);
      test.equal(solve(block(a, block(b, funcall(lamda([x], break_(b, 2)), 1), 1), 3)), 3);
      test.equal(solve(block(a, block(b, funcall(lamda([x], break_(a, 2)), 1), 1), 3)), 2);
      return test.done();
    },
    "test block lamda 2": function(test) {
      var a, b, f, x;

      a = makeLabel('a');
      b = makeLabel('b');
      x = vari('x');
      f = vari('f');
      test.equal(solve(block(a, block(b, assign(f, lamda([x], break_(b, 2))), funcall(f, 1), 1), 3)), 3);
      test.equal(solve(block(a, block(b, assign(f, lamda([x], break_(a, 2))), funcall(f, 1), 1), 3)), 2);
      test.equal(solve(block(a, assign(f, lamda([x], block(b, break_(a, 2), 1))), funcall(f, 1), 3)), 2);
      return test.done();
    },
    "test loop while until": function(test) {
      var a, x;

      x = vari('x');
      a = makeLabel('x');
      test.equal(solve(begin(variable(x), assign(x, 1), block(a, if_(eq(x, 5), break_(a, x)), print_(x), inc(x), continue_(a)))), 5);
      test.equal(solve(begin(variable(x), assign(x, 1), block(a, if_(eq(x, 5), break_(x)), print_(x), inc(x), continue_()))), 5);
      test.equal(solve(begin(variable(x), assign(x, 1), loop_(a, if_(eq(x, 5), break_(a, x)), print_(x), inc(x)))), 5);
      test.equal(solve(begin(variable(x), assign(x, 1), loop_(a, print_(x), if_(eq(x, 5), break_(x)), inc(x)))), 5);
      test.equal(solve(begin(variable(x), assign(x, 1), while_(a, le(x, 5), print_(x), inc(x)))), null);
      test.equal(solve(begin(variable(x), assign(x, 1), until_(a, print_(x), inc(x), eq(x, 5)))), null);
      return test.done();
    },
    "test block break continue": function(test) {
      var a, b, x;

      a = makeLabel('a');
      b = makeLabel('b');
      x = vari('x');
      test.equal(solve(begin(assign(x, 1), block(a, print_(x), 1))), 1);
      test.equal(solve(block(a, break_(a, 2), 1)), 2);
      test.equal(solve(block(a, block(b, break_(b, 2), 1), 3)), 3);
      test.equal(solve(begin(variable(x), assign(x, 1), block(a, if_(eq(x, 10000), break_(a, x)), inc(x), continue_(a)))), 10000);
      return test.done();
    },
    "test assign inc dec": function(test) {
      var a, blk;

      a = vari('a');
      blk = makeLabel('x');
      test.equal(solve(begin(variable(a), assign(a, 1), block(blk, if_(eq(a, 10), break_(blk, a)), inc(a), continue_(blk)))), 10);
      return test.done();
    },
    "test block lamda 3": function(test) {
      var a, b, f, n, x;

      a = makeLabel('a');
      b = makeLabel('b');
      x = vari('x');
      f = vari('f');
      n = vari('n');
      test.equal(solve(begin(funcall(lamda([x], variable(x, n), assign(n, 0), block(a, if_(eq(x, 0), break_(a, n)), assign(n, add(n, dec(x))), continue_(a))), 3), 12)), 12);
      return test.done();
    }
  };

}).call(this);

/*
//@ sourceMappingURL=test_lisp.map
*/
