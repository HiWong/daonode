// Generated by CoffeeScript 1.6.2
(function() {
  var Apply, Array, Atom, Begin, Clamda, Number, Return, Var, il, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  il = exports;

  Atom = (function() {
    function Atom(value) {
      this.value = value;
    }

    return Atom;

  })();

  Number = (function(_super) {
    __extends(Number, _super);

    function Number() {
      _ref = Number.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    return Number;

  })(Atom);

  Var = (function() {
    function Var(name) {
      this.name = name;
    }

    return Var;

  })();

  Apply = (function() {
    function Apply(caller, args) {
      this.caller = caller;
      this.args = args;
    }

    return Apply;

  })();

  Return = (function() {
    function Return(value) {
      this.value = value;
    }

    return Return;

  })();

  Begin = (function() {
    function Begin(exps) {
      this.exps = exps;
    }

    return Begin;

  })();

  Array = (function(_super) {
    __extends(Array, _super);

    function Array() {
      _ref1 = Array.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    return Array;

  })(Begin);

  Clamda = (function() {
    function Clamda(v, body) {
      this.v = v;
      this.body = body;
    }

    Clamda.prototype.call = function(value) {
      return il.apply(this, value);
    };

    return Clamda;

  })();

  Var.prototype.optimize = function(env, compiler) {
    return env.lookup(this);
  };

  Return.prototype.optimize = function(env, compiler) {
    var body, value, value0;

    value = this.value;
    if (value instanceof Array) {
      value = value.exps;
      if (value.length === 2) {
        value0 = value[0];
        if (value0 instanceof Clamda) {
          body = compiler.optimize(value0.body, env.extend(value0.v, value[1]));
          if (body instanceof Return) {
            body = body.value;
          }
          return new Return(body);
        }
      }
    }
    return new Return(compiler.optimize(this.value, env));
  };

  Clamda.prototype.optimize = function(env, compiler) {
    return new Clamda(this.v, compiler.optimize(this.body, env));
  };

  Apply.prototype.optimize = function(env, compiler) {
    var caller;

    caller = this.caller;
    if (caller instanceof Clamda) {
      return compiler.optimize(caller.body, env.extend(caller.v, this.args[0]));
    } else {
      return this;
    }
  };

  Begin.prototype.optimize = function(env, compiler) {
    var exp;

    return new this.constructor((function() {
      var _i, _len, _ref2, _results;

      _ref2 = this.exps;
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        exp = _ref2[_i];
        _results.push(compiler.optimize(exp, env));
      }
      return _results;
    }).call(this));
  };

  Clamda.prototype.toCode = function(compiler) {
    var body, exp;

    body = ((function() {
      var _i, _len, _ref2, _results;

      _ref2 = this.body;
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        exp = _ref2[_i];
        _results.push(compiler.toCode(exp));
      }
      return _results;
    }).call(this)).join(';');
    return "function(" + (compiler.toCode(this.v)) + "){" + (compiler.toCode(this.body)) + "}";
  };

  Return.prototype.toCode = function(compiler) {
    return "return " + (compiler.toCode(this.value)) + ";";
  };

  Var.prototype.toCode = function(compiler) {
    return this.name;
  };

  Apply.prototype.toCode = function(compiler) {
    var arg;

    return "(" + (compiler.toCode(this.caller)) + ")(" + (((function() {
      var _i, _len, _ref2, _results;

      _ref2 = this.args;
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        arg = _ref2[_i];
        _results.push(compiler.toCode(arg));
      }
      return _results;
    }).call(this)).join(', ')) + ")";
  };

  Begin.prototype.toCode = function(compiler) {
    var exp;

    return ((function() {
      var _i, _len, _ref2, _results;

      _ref2 = this.exps;
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        exp = _ref2[_i];
        _results.push(compiler.toCode(exp));
      }
      return _results;
    }).call(this)).join("; ");
  };

  Array.prototype.toCode = function(compiler) {
    var exp;

    return "[" + (((function() {
      var _i, _len, _ref2, _results;

      _ref2 = this.exps;
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        exp = _ref2[_i];
        _results.push(compiler.toCode(exp));
      }
      return _results;
    }).call(this)).join(', ')) + "]";
  };

  il.vari = function(name) {
    return new Var(name);
  };

  il.apply = function(caller, args) {
    return new Apply(caller, args);
  };

  il.begin = function() {
    var exps, length;

    exps = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    length = exps.length;
    if (length === 0) {
      return il.undefined;
    } else if (length === 1) {
      return exps[0];
    } else {
      return new Begin(exps);
    }
  };

  il.array = function() {
    var exps;

    exps = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return new Array(exps);
  };

  il["return"] = function(value) {
    return new Return(value);
  };

  il.clamda = function() {
    var body, v;

    v = arguments[0], body = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return new Clamda(v, il.begin.apply(il, body));
  };

}).call(this);

/*
//@ sourceMappingURL=interlang.map
*/
