// Generated by CoffeeScript 1.6.2
(function() {
  var a, b, cursor, e, leftRecursive, memo, memoResult, memoState, solver, str;

  cursor = 0;

  memoResult = {};

  memoState = {};

  solver = {};

  memo = function(name, alpha, beta, expr) {
    return function() {
      var fc, hash, start, state, x;

      start = cursor;
      hash = name + state;
      fc = solver.failcont;
      state = memoState[hash];
      if (state === void 0) {
        x = alpha();
        memoState[hash] = false;
        memoResult[hash] = x;
        solver.failcont = function(v) {
          solver.failcont = fc;
          return memoState[hash] = true;
        };
        return beta();
      } else if (state === false) {
        return beta();
      }
    };
  };

  b = function() {
    if (str[cursor] === 'b') {
      cursor++;
      return true;
    } else {
      return failcont();
    }
  };

  a = function() {
    if (str[cursor] === 'a') {
      return true;
    } else {
      return failcont;
    }
  };

  e = memo('a', a, e);

  str = 'abbb';

  leftRecursive = function(alpha, left) {
    alpha();
    return left();
  };

}).call(this);

/*
//@ sourceMappingURL=leftRecursive.map
*/
