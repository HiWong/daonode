// Generated by CoffeeScript 1.6.2
(function() {
  var Cons, DummyVar, Error, Trail, TypeError, UArray, UObject, UnquoteSliceValue, Var, dummy, nameToIndexMap, reElements, uarray, _, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  _ = require('underscore');

  exports.Solver = (function() {
    function Solver() {
      var solver;

      this.state;
      this.trail = new Trail;
      this.catches = {};
      this.purememo = {};
      this.memo = {};
      this.finished = false;
      solver = this;
      this.faildone = function(value) {
        return false;
      };
      this.failcont = this.faildone;
      this.cutCont = this.failcont;
    }

    Solver.prototype.fake = function() {
      var result, state;

      result = {};
      state = this.state;
      if (state != null) {
        state = (typeof state.slice === "function" ? state.slice(0) : void 0) || (typeof state.copy === "function" ? state.copy() : void 0) || (typeof state.clone === "function" ? state.clone() : void 0) || state;
      }
      result.state = state;
      result.trail = this.trail.copy();
      result.catches = _.extend({}, this.catches);
      result.exits = _.extend({}, this.exits);
      result.continues = _.extend({}, this.continues);
      result.purememo = _.extend({}, this.purememo);
      result.memo = _.extend({}, this.memo);
      result.done = this.done;
      result.faildone = this.faildone;
      result.failcont = this.failcont;
      result.cutCont = this.cutCont;
      return result;
    };

    Solver.prototype.restore = function(faked) {
      this.state = faked.state;
      this.trail = faked.trail;
      this.catches = faked.catches;
      this.exits = faked.exits;
      this.continues = faked.continues;
      this.purememo = faked.purememo;
      this.memo = faked.memo;
      this.done = faked.done;
      this.faildone = faked.faildone;
      this.failcont = faked.failcont;
      this.cutCont = faked.cutCont;
      return this.finished = false;
    };

    Solver.prototype.solveCompiled = function(module) {
      var value;

      module.solver = this;
      value = this.run(module.main)[1];
      return this.trail.getvalue(value);
    };

    Solver.prototype.run = function(cont, value) {
      var _ref;

      while (!this.finished) {
        _ref = cont(value), cont = _ref[0], value = _ref[1];
      }
      return [cont, value];
    };

    Solver.prototype.quasiquote = function(exp, cont) {
      return (exp != null ? typeof exp.quasiquote === "function" ? exp.quasiquote(this, cont) : void 0 : void 0) || (function(v) {
        return cont(exp);
      });
    };

    Solver.prototype.appendFailcont = function(fun) {
      var fc, state, trail;

      trail = this.trail;
      this.trail = new Trail;
      state = this.state;
      fc = this.failcont;
      return this.failcont = function(v) {
        this.trail.undo();
        this.trail = trail;
        this.state = state;
        this.failcont = fc;
        return fun(v);
      };
    };

    Solver.prototype.pushCatch = function(value, cont) {
      var catches, _base, _ref;

      catches = (_ref = (_base = this.catches)[value]) != null ? _ref : _base[value] = [];
      return catches.push(cont);
    };

    Solver.prototype.popCatch = function(value) {
      var catches;

      catches = this.catches[value];
      catches.pop();
      if (catches.length === 0) {
        return delete this.catches[value];
      }
    };

    Solver.prototype.findCatch = function(value) {
      var catches;

      catches = this.catches[value];
      if ((catches == null) || catches.length === 0) {
        throw new NotCatched;
      }
      return catches[catches.length - 1];
    };

    return Solver;

  })();

  exports.Trail = Trail = (function() {
    function Trail(data) {
      this.data = data != null ? data : {};
    }

    Trail.prototype.copy = function() {
      return new Trail(_.extend({}, this.data));
    };

    Trail.prototype.set = function(vari, value) {
      var data;

      data = this.data;
      if (!data.hasOwnProperty(vari.name)) {
        return data[vari.name] = [vari, value];
      }
    };

    Trail.prototype.undo = function() {
      var nam, pair, value, vari, _ref, _results;

      _ref = this.data;
      _results = [];
      for (nam in _ref) {
        pair = _ref[nam];
        vari = pair[0];
        value = pair[1];
        _results.push(vari.binding = value);
      }
      return _results;
    };

    Trail.prototype.deref = function(x) {
      return (x != null ? typeof x.deref === "function" ? x.deref(this) : void 0 : void 0) || x;
    };

    Trail.prototype.getvalue = function(x, memo) {
      var getvalue;

      if (memo == null) {
        memo = {};
      }
      getvalue = x != null ? x.getvalue : void 0;
      if (getvalue) {
        return getvalue.call(x, this, memo);
      } else {
        return x;
      }
    };

    Trail.prototype.unify = function(x, y) {
      x = this.deref(x);
      y = this.deref(y);
      if (x instanceof Var) {
        this.set(x, x.binding);
        x.binding = y;
        return true;
      } else if (y instanceof Var) {
        this.set(y, y.binding);
        y.binding = x;
        return true;
      } else {
        return (x != null ? typeof x.unify === "function" ? x.unify(y, this) : void 0 : void 0) || (y != null ? typeof y.unify === "function" ? y.unify(x, this) : void 0 : void 0) || (x === y);
      }
    };

    return Trail;

  })();

  exports.Var = Var = (function() {
    function Var(name, binding) {
      this.name = name;
      this.binding = binding != null ? binding : this;
    }

    Var.prototype.deref = function(trail) {
      var chains, i, length, next, v, x, _i, _j, _ref, _ref1;

      v = this;
      next = this.binding;
      if (next === this || !(next instanceof Var)) {
        return next;
      } else {
        chains = [v];
        length = 1;
        while (1) {
          chains.push(next);
          v = next;
          next = v.binding;
          length++;
          if (next === v) {
            for (i = _i = 0, _ref = chains.length - 2; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
              x = chains[i];
              x.binding = next;
              trail.set(x, chains[i + 1]);
            }
            return next;
          } else if (!(next instanceof Var)) {
            for (i = _j = 0, _ref1 = chains.length - 1; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
              x = chains[i];
              x.binding = next;
              trail.set(x, chains[i + 1]);
            }
            return next;
          }
        }
      }
    };

    Var.prototype.bind = function(value, trail) {
      trail.set(this, this.binding);
      return this.binding = trail.deref(value);
    };

    Var.prototype.getvalue = function(trail, memo) {
      var name, result;

      if (memo == null) {
        memo = {};
      }
      name = this.name;
      if (memo.hasOwnProperty(name)) {
        return memo[name];
      }
      result = this.deref(trail);
      if (result instanceof Var) {
        memo[name] = result;
        return result;
      } else {
        result = trail.getvalue(result, memo);
        memo[name] = result;
        return result;
      }
    };

    Var.prototype.cont = function(solver, cont) {
      var _this = this;

      return function(v) {
        return cont(_this.deref(solver.trail));
      };
    };

    Var.prototype.toString = function() {
      return "vari(" + this.name + ")";
    };

    return Var;

  })();

  reElements = /\s*,\s*|\s+/;

  nameToIndexMap = {};

  exports.vari = function(name) {
    var index;

    index = nameToIndexMap[name] || 1;
    nameToIndexMap[name] = index + 1;
    return new Var(name + index);
  };

  exports.vars = function(names) {
    var name, _i, _len, _ref, _results;

    _ref = split(names, reElements);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      _results.push(vari(name));
    }
    return _results;
  };

  exports.DummyVar = DummyVar = (function(_super) {
    __extends(DummyVar, _super);

    function DummyVar(name) {
      this.name = '_$' + name;
    }

    DummyVar.prototype.cont = function(solver, cont) {
      var _this = this;

      return function(v) {
        return cont(_this.binding);
      };
    };

    DummyVar.prototype.deref = function(trail) {
      return this;
    };

    DummyVar.prototype.getvalue = function(trail, memo) {
      var name, result;

      if (memo == null) {
        memo = {};
      }
      name = this.name;
      if (memo.hasOwnProperty(name)) {
        return memo[name];
      }
      result = this.binding;
      if (result === this) {
        memo[name] = result;
        return result;
      } else {
        result = trail.getvalue(result, memo);
        memo[name] = result;
        return result;
      }
    };

    return DummyVar;

  })(Var);

  exports.dummy = dummy = function(name) {
    var index;

    index = nameToIndexMap[name] || 1;
    nameToIndexMap[name] = index + 1;
    return new exports.DummyVar(name + index);
  };

  exports.dummies = function(names) {
    var name, _i, _len, _ref, _results;

    _ref = split(names, reElements);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      _results.push(new dummy(name));
    }
    return _results;
  };

  UnquoteSliceValue = exports.UnquoteSliceValue = (function() {
    function UnquoteSliceValue(value) {
      this.value = value;
    }

    return UnquoteSliceValue;

  })();

  exports.UObject = UObject = (function() {
    function UObject(data) {
      this.data = data;
    }

    UObject.prototype.getvalue = function(trail, memo) {
      var changed, key, result, v, value, _ref;

      result = {};
      changed = false;
      _ref = this.data;
      for (key in _ref) {
        value = _ref[key];
        v = trail.getvalue(value, memo);
        if (v !== value) {
          changed = true;
        }
        result[key] = v;
      }
      if (changed) {
        return new UObject(result);
      } else {
        return this;
      }
    };

    UObject.prototype.unify = function(y, trail) {
      var index, key, xdata, ydata, ykeys;

      xdata = this.data;
      ydata = y.data;
      ykeys = Object.keys(y);
      for (key in xdata) {
        index = ykeys.indexOf(key);
        if (index === -1) {
          return false;
        }
        if (!trail.unify(xdata[key], ydata[key])) {
          return false;
        }
        ykeys.splice(index, 1);
      }
      if (ykeys.length !== 0) {
        return false;
      }
      return true;
    };

    return UObject;

  })();

  exports.uobject = function(x) {
    return new UObject(x);
  };

  exports.UArray = UArray = (function() {
    function UArray(data) {
      this.data = data;
    }

    UArray.prototype.getvalue = function(trail, memo) {
      var changed, result, v, x, _i, _len, _ref;

      if (memo == null) {
        memo = {};
      }
      result = [];
      changed = false;
      _ref = this.data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        x = _ref[_i];
        v = trail.getvalue(x, memo);
        if (v !== x) {
          changed = true;
        }
        result.push(v);
      }
      if (changed) {
        return new UArray(result);
      } else {
        return this;
      }
    };

    UArray.prototype.unify = function(y, trail) {
      var i, length, xdata, ydata, _i;

      xdata = this.data;
      ydata = y.data;
      length = this.length;
      if (length !== y.length) {
        return false;
      }
      for (i = _i = 0; 0 <= length ? _i < length : _i > length; i = 0 <= length ? ++_i : --_i) {
        if (!trail.unify(xdata[i], ydata[i])) {
          return false;
        }
      }
      return true;
    };

    UArray.prototype.toString = function() {
      return this.data.toString();
    };

    return UArray;

  })();

  exports.uarray = uarray = function(x) {
    return new UArray(x);
  };

  exports.Cons = Cons = (function() {
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }

    Cons.prototype.getvalue = function(trail, memo) {
      var head, head1, tail, tail1;

      if (memo == null) {
        memo = {};
      }
      head = this.head;
      tail = this.tail;
      head1 = trail.getvalue(head, memo);
      tail1 = trail.getvalue(tail, memo);
      if (head1 === head && tail1 === tail) {
        return this;
      } else {
        return new Cons(head1, tail1);
      }
    };

    Cons.prototype.unify = function(y, trail) {
      if (!(y instanceof Cons)) {
        return false;
      } else if (!trail.unify(this.head, y.head)) {
        return false;
      } else {
        return trail.unify(this.tail, y.tail);
      }
    };

    Cons.prototype.flatString = function() {
      var result, tail;

      result = "" + this.head;
      tail = this.tail;
      if (tail === null) {
        null;
      } else if (tail instanceof Cons) {
        result += ',';
        result += tail.flatString();
      } else {
        result += tail.toString();
      }
      return result;
    };

    Cons.prototype.toString = function() {
      return "cons(" + this.head + ", " + this.tail + ")";
    };

    return Cons;

  })();

  exports.cons = function(x, y) {
    return new Cons(x, y);
  };

  exports.conslist = function() {
    var args, i, result, _i, _ref;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    result = null;
    for (i = _i = _ref = args.length - 1; _i >= 0; i = _i += -1) {
      result = new Cons([args[i], result]);
    }
    return result;
  };

  exports.unifiable = function(x) {
    if (_.isArray(x)) {
      return new UArray(x);
    } else if (_.isObject(x)) {
      return new UObject(x);
    } else {
      return x;
    }
  };

  exports.BindingError = Error = (function() {
    function Error(exp, message, stack) {
      this.exp = exp;
      this.message = message != null ? message : '';
      this.stack = stack != null ? stack : this;
    }

    Error.prototype.toString = function() {
      return "" + this.constructor.name + ": " + this.exp + " >>> " + this.message;
    };

    return Error;

  })();

  exports.TypeError = TypeError = (function(_super) {
    __extends(TypeError, _super);

    function TypeError() {
      _ref = TypeError.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    return TypeError;

  })(Error);

  exports.SUCCESS = 1;

  exports.UNKNOWN = 0;

  exports.FAIL = -1;

  exports.status = exports.UNKNOWN;

}).call(this);

/*
//@ sourceMappingURL=solve.map
*/
