// Generated by CoffeeScript 1.6.2
(function() {
  var Compiler, OptimizationEnv, beautify, compile, compileToCode, fs, il, solve, vari, xexports, _, _ref;

  _ = require("underscore");

  fs = require("fs");

  beautify = require('js-beautify').js_beautify;

  il = require("../interlang");

  _ref = require('../core'), Compiler = _ref.Compiler, OptimizationEnv = _ref.OptimizationEnv;

  solve = function(exp, path) {
    var compiled;

    path = compile(exp, path);
    delete require.cache[require.resolve(path)];
    compiled = require(path);
    return compiled.main();
  };

  compile = function(exp, path) {
    var code, fd;

    code = "_ = require('underscore');\n" + '__slice = [].slice\n' + "solve = require('f:/daonode/lib/compiler/core.js').solve;\n" + "parser = require('f:/daonode/lib/compiler/parser.js');\n" + "solvecore = require('f:/daonode/lib/compiler/solve.js');\n" + "SolverFinish = solvecore.SolverFinish;\n" + "Solver = solvecore.Solver;\n" + "Trail = solvecore.Trail;\n" + "Var = solvecore.Var;\n" + "DummyVar = solvecore.DummyVar;\n\n" + compileToCode(exp) + "\n//exports.main();";
    code = beautify(code, {
      indent_size: 2
    });
    path = path || "f:/daonode/lib/compiler/test/compiled.js";
    fd = fs.openSync(path, 'w');
    fs.writeSync(fd, code);
    fs.closeSync(fd);
    return path;
  };

  compileToCode = function(exp) {
    var compiler, f, lamdaVars, locals, nonlocals, v;

    compiler = new Compiler();
    v = il.internallocal('v');
    f = il.assign(il.usernonlocalattr('exports.main'), il.clamda(v, exp));
    f.refMap = {};
    f.analyze(compiler, f.refMap);
    locals = {};
    nonlocals = {};
    lamdaVars = {
      _userlocals: locals,
      _usernonlocals: nonlocals,
      _locals: locals,
      _nonlocals: nonlocals
    };
    f = f.optimize(new OptimizationEnv(null, {}, lamdaVars), compiler);
    return f.toCode(compiler);
  };

  vari = function(name) {
    return il.internallocal(name);
  };

  xexports = {};

  exports.Test = {
    "test vari assign": function(test) {
      var x, x2;

      x = il.internallocal('x');
      x2 = il.internallocal('x2');
      test.equal(solve(il.let_([x, 1], il.let_([x2, 2], x2), x)), 1);
      return test.done();
    }
  };

}).call(this);

/*
//@ sourceMappingURL=test_optimize.map
*/
