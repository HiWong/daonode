// Generated by CoffeeScript 1.6.2
(function() {
  var Error, add, andp, any, assign, begin, boi, bol, char, core, dummy, eoi, eol, eq, findall, follow, funcall, getpos, getstate, gettext, getvalue, greedyany, greedymay, greedysome, if_, inc, jsfun, lamda, lazyany, lazymay, lazysome, lefttext, literal, logicvar, macall, macro, may, nextchar, notfollow, number, orp, parallel, parsetext, print_, quote, seplist, settext, solve, some, step, string, subtext, suffixinc, times, vari, xexports, _ref, _ref1;

  _ref = core = require('../core'), solve = _ref.solve, Error = _ref.Error;

  _ref1 = require('../util'), string = _ref1.string, begin = _ref1.begin, quote = _ref1.quote, assign = _ref1.assign, print_ = _ref1.print_, funcall = _ref1.funcall, macall = _ref1.macall, lamda = _ref1.lamda, macro = _ref1.macro, jsfun = _ref1.jsfun, if_ = _ref1.if_, add = _ref1.add, eq = _ref1.eq, inc = _ref1.inc, suffixinc = _ref1.suffixinc, logicvar = _ref1.logicvar, dummy = _ref1.dummy, andp = _ref1.andp, orp = _ref1.orp, findall = _ref1.findall, getvalue = _ref1.getvalue, getstate = _ref1.getstate, gettext = _ref1.gettext, getpos = _ref1.getpos, eoi = _ref1.eoi, boi = _ref1.boi, eol = _ref1.eol, bol = _ref1.bol, step = _ref1.step, lefttext = _ref1.lefttext, subtext = _ref1.subtext, nextchar = _ref1.nextchar, parsetext = _ref1.parsetext, char = _ref1.char, settext = _ref1.settext, number = _ref1.number, literal = _ref1.literal, may = _ref1.may, greedymay = _ref1.greedymay, lazymay = _ref1.lazymay, any = _ref1.any, lazyany = _ref1.lazyany, greedyany = _ref1.greedyany, some = _ref1.some, lazysome = _ref1.lazysome, greedysome = _ref1.greedysome, times = _ref1.times, seplist = _ref1.seplist, parallel = _ref1.parallel, follow = _ref1.follow, notfollow = _ref1.notfollow;

  vari = function(name) {
    return name;
  };

  xexports = {};

  exports.Test = {
    "test low level primitives": function(test) {
      var x;

      x = logicvar('x');
      test.deepEqual(solve(parsetext(getstate, string(''))), ['', 0]);
      test.equal(solve(parsetext(gettext, string(''))), '');
      test.equal(solve(parsetext(getpos, string(''))), 0);
      test.equal(solve(parsetext(eoi, string(''))), true);
      test.equal(solve(parsetext(andp(step(2), eoi), string('we'))), true);
      test.equal(solve(parsetext(andp(step(2), boi), string(''))), false);
      test.equal(solve(parsetext(boi, string(''))), true);
      test.equal(solve(parsetext(eol, string(''))), true);
      test.equal(solve(parsetext(bol, string(''))), true);
      test.equal(solve(parsetext(bol, string('\r'))), true);
      test.equal(solve(parsetext(andp(step(1), bol), string('\r'))), true);
      test.equal(solve(parsetext(andp(step(1), eol), string('\rasdf'))), false);
      test.equal(solve(parsetext(andp(step(3), eol), string('\ras\ndf'))), true);
      test.deepEqual(solve(parsetext(lefttext, string('\ras\ndf'))), '\ras\ndf');
      test.deepEqual(solve(parsetext(subtext(1, 3), string('\ras\ndf'))), '\n');
      return test.done();
    },
    "test char": function(test) {
      var x;

      x = logicvar('x');
      test.equal(solve(parsetext(1, string('a'))), 1);
      test.equal(solve(parsetext(char(string('a')), string('a'))), 1);
      test.equal(solve(parsetext(andp(char(string('a')), char(string('b'))), string('ab'))), 2);
      test.equal(solve(parsetext(char(string('a')), string('b'))), 0);
      test.equal(solve(begin(settext(string('a')), char(string('a')))), 1);
      test.equal(solve(begin(settext(string('ab')), char(string('a')), char(string('b')))), 2);
      return test.done();
    },
    "test number": function(test) {
      var x;

      x = logicvar('x');
      test.equal(solve(parsetext(number(x), string('123'))), 3);
      test.equal(solve(parsetext(number(x), string('123.4'))), 5);
      test.equal(solve(parsetext(number(x), string('-123.4'))), 6);
      test.equal(solve(parsetext(number(x), string('.123'))), 4);
      test.equal(solve(parsetext(number(x), string('123.e-2'))), 7);
      test.equal(solve(parsetext(number(x), string('123.e'))), 4);
      test.equal(solve(parsetext(number(x), string('123.e+'))), 4);
      return test.done();
    },
    "test literal": function(test) {
      test.equal(solve(parsetext(literal(string('daf')), string('daf'))), 3);
      return test.done();
    },
    "test may char": function(test) {
      test.equal(solve(parsetext(may(char(string('a'))), string('a'))), 1);
      test.equal(solve(parsetext(begin(may(char(string('a'))), eoi), string('a'))), true);
      test.equal(solve(parsetext(begin(may(char(string('a'))), char(string('a')), eoi), string('a'))), true);
      test.equal(solve(parsetext(begin(greedymay(char(string('a'))), char(string('a')), eoi), string('a'))), 1);
      test.equal(solve(parsetext(begin(lazymay(char(string('a'))), char(string('a')), eoi), string('a'))), 1);
      test.equal(solve(parsetext(may(char(string('a'))), string('b'))), 0);
      return test.done();
    },
    "test parallel": function(test) {
      test.equal(solve(begin(settext(string('1')), parallel(char(string('1')), number(1)))), 1);
      test.equal(solve(begin(settext(string('12')), parallel(char(string('1')), number(12)))), 2);
      test.equal(solve(begin(settext(string('1')), parallel(char(string('1')), char(string('a'))))), false);
      return test.done();
    },
    "test follow": function(test) {
      test.equal(solve(begin(settext(string('1')), follow(char(string('1'))))), 1);
      test.equal(solve(begin(settext(string('1')), notfollow(char(string('1'))))), 1);
      return test.done();
    },
    "test greedyany": function(test) {
      var result, _;

      _ = vari('__');
      result = vari('result');
      test.equal(solve(begin(assign(_, dummy('__')), parsetext(greedyany(char(_)), string('abc')))), 3);
      test.equal(solve(parsetext(begin(assign(_, dummy('__')), greedyany(char(_)), eoi), string('a'))), true);
      test.equal(solve(parsetext(begin(assign(_, dummy('__')), greedyany(char(_)), char(string('c')), eoi), string('ac'))), 2);
      test.equal(solve(parsetext(findall(begin(assign(_, dummy('__')), greedyany(char(_)), char(string('c')), eoi)), string('abc'))), 3);
      test.deepEqual(solve(begin(assign(_, dummy('__')), assign(result, logicvar('result')), parsetext(greedyany(char(_), result, _), string('a')), getvalue(result))), ['a']);
      test.deepEqual(solve(begin(assign(_, dummy('__')), assign(result, logicvar('result')), settext(string('ab')), greedyany(char(_), result, _), eoi, getvalue(result))), ['a', 'b']);
      return test.done();
    },
    "test lazysome": function(test) {
      var result, _;

      _ = vari('__');
      result = vari('result');
      test.equal(solve(begin(assign(_, dummy('__')), parsetext(lazysome(char(_)), string('a')))), null);
      test.deepEqual(solve(begin(assign(_, dummy('__')), assign(result, logicvar('result')), parsetext(lazysome(char(_), result, _), string('a')), getvalue(result))), ['a']);
      test.deepEqual(solve(begin(assign(_, dummy('__')), assign(result, logicvar('result')), settext(string('ab')), lazysome(char(_), result, _), eoi, getvalue(result))), ['a', 'b']);
      test.equal(solve(parsetext(begin(assign(_, dummy('__')), lazysome(char(_)), char(string('c')), eoi), string('abc'))), true);
      test.equal(solve(parsetext(begin(lazysome(char(string('a'))), nextchar), string('b'))), false);
      test.equal(solve(parsetext(begin(lazysome(char(string('a'))), eoi), string('b'))), false);
      test.equal(solve(begin(assign(_, dummy('__')), parsetext(lazysome(begin(char(_), print_(getvalue(_)))), string('abc')))), null);
      test.equal(solve(begin(assign(_, dummy('__')), parsetext(findall(lazysome(begin(char(_), print_(getvalue(_))))), string('abc')))), 3);
      return test.done();
    },
    "test any": function(test) {
      var result, _;

      _ = vari('__');
      result = vari('result');
      test.equal(solve(begin(assign(_, dummy('__')), parsetext(any(char(_)), string('a')))), 1);
      test.equal(solve(begin(assign(_, dummy('__')), parsetext(any(char(_)), string('ab')))), 2);
      test.equal(solve(parsetext(begin(assign(_, dummy('__')), any(char(_)), eoi), string('abc'))), true);
      test.deepEqual(solve(begin(assign(_, dummy('__')), assign(result, logicvar('result')), parsetext(any(char(_), result, _), string('a')), getvalue(result))), ['a']);
      test.deepEqual(solve(begin(assign(_, dummy('__')), assign(result, logicvar('result')), settext(string('ab')), any(char(_), result, _), eoi, getvalue(result))), ['a', 'b']);
      test.equal(solve(parsetext(begin(assign(_, dummy('__')), any(char(_)), char(string('c')), eoi), string('abc'))), true);
      test.equal(solve(parsetext(begin(assign(_, dummy('__')), any(char(string('a')))), string('b'))), 0);
      test.equal(solve(parsetext(begin(assign(_, dummy('__')), any(char(string('a'))), eoi), string('b'))), false);
      return test.done();
    },
    "test greedysome": function(test) {
      var result, _;

      _ = vari('__');
      result = vari('result');
      test.equal(solve(begin(assign(_, dummy('__')), parsetext(greedysome(char(_)), string('abc')))), 3);
      test.equal(solve(parsetext(begin(assign(_, dummy('__')), greedysome(char(_)), eoi), string('a'))), true);
      test.equal(solve(parsetext(begin(assign(_, dummy('__')), greedysome(char(_)), char(string('c')), eoi), string('ac'))), 2);
      test.equal(solve(parsetext(findall(begin(assign(_, dummy('__')), greedysome(char(_)), char(string('c')), eoi)), string('abc'))), 3);
      test.deepEqual(solve(begin(assign(_, dummy('__')), assign(result, logicvar('result')), parsetext(greedysome(char(_), result, _), string('a')), getvalue(result))), ['a']);
      test.deepEqual(solve(begin(assign(_, dummy('__')), assign(result, logicvar('result')), settext(string('ab')), greedysome(char(_), result, _), eoi, getvalue(result))), ['a', 'b']);
      test.equal(solve(parsetext(orp(begin(assign(_, dummy('__')), greedysome(char(_)), char(string('c')), eoi), 1), string('abc'))), 1);
      return test.done();
    },
    "test some": function(test) {
      var result, _;

      _ = vari('__');
      result = vari('result');
      test.equal(solve(begin(assign(_, dummy('__')), parsetext(some(char(_)), string('a')))), 1);
      test.equal(solve(begin(assign(_, dummy('__')), parsetext(some(char(_)), string('ab')))), 2);
      test.equal(solve(parsetext(begin(assign(_, dummy('__')), some(char(_)), eoi), string('abc'))), true);
      test.equal(core.status, core.SUCCESS);
      test.deepEqual(solve(begin(assign(_, dummy('__')), assign(result, logicvar('result')), parsetext(some(char(_), result, _), string('a')), getvalue(result))), ['a']);
      test.equal(core.status, core.SUCCESS);
      test.deepEqual(solve(begin(assign(_, dummy('__')), assign(result, logicvar('result')), settext(string('ab')), some(char(_), result, _), eoi, getvalue(result))), ['a', 'b']);
      test.equal(core.status, core.SUCCESS);
      test.equal(solve(parsetext(begin(assign(_, dummy('__')), some(char(_)), char(string('c')), eoi), string('abc'))), true);
      test.equal(solve(parsetext(begin(assign(_, dummy('__')), some(char(string('a')))), string('b'))), 0);
      test.equal(solve(parsetext(begin(assign(_, dummy('__')), some(char(string('a'))), eoi), string('b'))), false);
      return test.done();
    },
    "test times": function(test) {
      var n, result, _;

      _ = vari('__');
      result = vari('result');
      n = vari('n');
      test.equal(solve(begin(assign(_, dummy('__')), parsetext(times(char(_), 1), string('a')))), true);
      test.equal(solve(begin(assign(_, dummy('__')), parsetext(times(char(_), 2), string('ab')))), true);
      test.equal(solve(begin(assign(_, dummy('__')), parsetext(times(char(_), 3), string('abc')))), true);
      test.deepEqual(solve(begin(assign(_, dummy('__')), assign(n, logicvar('n')), settext(string('ab')), times(char(_), n), eoi)), true);
      test.deepEqual(solve(begin(assign(_, dummy('__')), assign(result, logicvar('result')), parsetext(times(char(_), 2, result, _), string('ab')), getvalue(result))), ['a', 'b']);
      test.deepEqual(solve(begin(assign(_, dummy('__')), assign(result, logicvar('result')), parsetext(times(char(_), 3, result, _), string('abc')), getvalue(result))), ['a', 'b', 'c']);
      test.deepEqual(solve(begin(assign(_, dummy('__')), assign(n, logicvar('n')), assign(result, logicvar('result')), settext(string('ab')), times(char(_), n, result, _), eoi, getvalue(result))), ['a', 'b']);
      test.deepEqual(solve(begin(assign(_, dummy('__')), assign(n, logicvar('n')), settext(string('aabb')), times(char(string('a')), n), times(char(string('b')), n), eoi, getvalue(n))), 2);
      test.deepEqual(solve(begin(assign(_, dummy('__')), assign(n, logicvar('n')), assign(result, logicvar('result')), settext(string('ab')), times(char(_), n, result, _), eoi, getvalue(n))), 2);
      test.deepEqual(solve(begin(settext(string('aaabbb')), assign(n, logicvar('n')), assign(result, logicvar('result')), times(char(string('a')), n, result, string('a')), times(char(string('b')), n), eoi, getvalue(n))), 3);
      test.deepEqual(solve(begin(assign(_, dummy('__')), assign(n, logicvar('n')), assign(result, logicvar('result')), settext(string('abc')), times(char(_), n, result, _), char(string('c')), eoi, getvalue(result))), ['a', 'b']);
      test.deepEqual(solve(begin(assign(_, dummy('__')), assign(n, logicvar('n')), assign(result, logicvar('result')), settext(string('abc')), times(char(_), n, result, _), char(string('b')), char(string('c')), eoi, getvalue(result))), ['a']);
      test.deepEqual(solve(begin(assign(_, dummy('__')), assign(n, logicvar('n')), settext(string('aaabbb')), times(char(string('a')), n), times(char(string('b')), n), eoi, getvalue(n))), 3);
      test.deepEqual(solve(begin(assign(_, dummy('__')), assign(n, logicvar('n')), assign(result, logicvar('result')), settext(string('a')), times(char(_), n, result, _), char(string('a')), eoi, getvalue(result))), []);
      test.deepEqual(solve(begin(settext(string('aaabbb')), assign(n, logicvar('n')), assign(result, logicvar('result')), times(char(string('a')), n, result, string('a')), times(char(string('b')), n, result, string('b')), eoi, getvalue(result))), false);
      test.deepEqual(solve(begin(settext(string('aaabbb')), assign(n, logicvar('n')), assign(result, dummy('result')), times(char(string('a')), n, result, string('a')), times(char(string('b')), n, result, string('b')), eoi, getvalue(result))), ['b', 'b', 'b']);
      return test.done();
    },
    "test seplist": function(test) {
      var n, result, _;

      _ = vari('__');
      result = vari('result');
      n = vari('n');
      test.equal(solve(begin(assign(_, dummy('__')), parsetext(seplist(char(_)), string('a')))), 1);
      test.equal(solve(begin(assign(_, dummy('__')), parsetext(seplist(char(_)), string('a a')))), 3);
      test.equal(solve(begin(assign(_, dummy('__')), parsetext(seplist(char(_), {
        sep: char(string(','))
      }), string('a,a')))), 3);
      test.equal(solve(begin(assign(_, dummy('__')), parsetext(seplist(char(_), {
        sep: char(string(',')),
        times: 3
      }), string('a,a, a')))), true);
      test.equal(solve(begin(assign(_, dummy('__')), parsetext(seplist(char(_), {
        sep: char(string(',')),
        times: 3
      }), string('a,a,b')))), true);
      test.equal(solve(begin(assign(_, dummy('__')), parsetext(seplist(char(_), {
        sep: char(string(',')),
        times: 3
      }), string('a,a,')))), false);
      return test.done();
    },
    "test seplist2": function(test) {
      var n, result, _;

      _ = vari('__');
      result = vari('result');
      n = vari('n');
      test.deepEqual(solve(begin(assign(_, dummy('__')), assign(result, logicvar('result')), parsetext(seplist(char(_), {
        sep: char(string(',')),
        times: 3,
        result: result,
        template: string('a')
      }), string('a,a,a')), getvalue(result))), ['a', 'a', 'a']);
      test.deepEqual(solve(begin(assign(_, dummy('__')), assign(n, logicvar('n')), assign(result, logicvar('result')), parsetext(seplist(char(_), {
        sep: char(string(',')),
        times: 3,
        result: result,
        template: _
      }), string('a,b,c')), getvalue(result))), ['a', 'b', 'c']);
      test.deepEqual(solve(begin(assign(_, dummy('__')), assign(n, logicvar('n')), assign(result, logicvar('result')), parsetext(seplist(char(_), {
        sep: char(string(',')),
        times: n,
        result: result,
        template: _
      }), string('a,b,c')), getvalue(result))), ['a', 'b', 'c']);
      test.deepEqual(solve(begin(assign(_, dummy('__')), assign(n, logicvar('n')), assign(result, logicvar('result')), parsetext(andp(seplist(char(_), {
        sep: char(string(',')),
        times: n,
        result: result,
        template: _
      }), char(string(',')), char(string('c'))), string('a,b,c')), getvalue(result))), ['a', 'b']);
      test.deepEqual(solve(begin(assign(_, dummy('__')), assign(n, logicvar('n')), assign(result, logicvar('result')), parsetext(andp(seplist(char(_), {
        sep: char(string(',')),
        times: n,
        result: result,
        template: _
      }), char(string(',')), char(string('b')), char(string(',')), char(string('c'))), string('a,b,c')), getvalue(result))), ['a']);
      return test.done();
    },
    "test lazyany": function(test) {
      var result, _;

      _ = vari('__');
      result = vari('result');
      test.equal(solve(begin(assign(_, dummy('__')), parsetext(lazyany(char(_)), string('a')))), null);
      test.deepEqual(solve(begin(assign(_, dummy('__')), assign(result, logicvar('result')), parsetext(lazyany(char(_), result, _), string('a')), getvalue(result))), []);
      test.deepEqual(solve(begin(assign(_, dummy('__')), assign(result, logicvar('result')), settext(string('ab')), lazyany(char(_), result, _), eoi, getvalue(result))), ['a', 'b']);
      test.equal(solve(parsetext(begin(assign(_, dummy('__')), lazyany(char(_)), char(string('c')), eoi), string('abc'))), true);
      test.equal(solve(parsetext(begin(lazyany(char(string('a'))), nextchar), string('b'))), 'b');
      test.equal(solve(parsetext(begin(lazyany(char(string('a'))), eoi), string('b'))), 0);
      test.equal(solve(begin(assign(_, dummy('__')), parsetext(lazyany(begin(char(_), print_(getvalue(_)))), string('abc')))), null);
      test.equal(solve(begin(assign(_, dummy('__')), parsetext(findall(lazyany(begin(char(_), print_(getvalue(_))))), string('abc')))), 3);
      return test.done();
    }
  };

  xexports.Test = {
    "test purememo": function(test) {
      var f, fac, factorial, n, result, _;

      _ = dummy('__');
      result = vari('result');
      n = vari('n');
      f = function(x) {
        if (x === 1) {
          console.log(1);
          return 1;
        } else {
          return x * f(x - 1);
        }
      };
      factorial = fun(f);
      fac = purememo(factorial);
      test.equal(solve(begin(fac(5), fac(5))), 120);
      return test.done();
    },
    "test fun2 purememo": function(test) {
      var fac, factorial;

      factorial = fun2(function(x) {
        if (x === 1) {
          return begin(print_(1), 1);
        } else {
          return mul(x, factorial(sub(x, 1)));
        }
      });
      fac = purememo(factorial);
      test.equal(solve(begin(fac(5), fac(5))), 120);
      return test.done();
    }
  };

}).call(this);

/*
//@ sourceMappingURL=test_parser.map
*/
