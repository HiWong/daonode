// Generated by CoffeeScript 1.6.2
(function() {
  var ArgumentError, ArityError, Command, Compiler, Env, Error, Macro, Recursive, TypeError, UnquoteSliceValue, Var, beautify, commandMaker, compile, fs, il, reElements, solve, special, _, _ref, _ref1, _ref2, _ref3, _ref4, _ref5,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require('underscore');

  fs = require("fs");

  il = require("./interlang");

  solve = require('./solve');

  beautify = require('js-beautify').js_beautify;

  exports.solve = function(exp) {
    var module, path, solver;

    path = compile(exp);
    solve.status = solve.UNKNOWN;
    solver = new solve.Solver();
    delete require.cache[require.resolve(path)];
    module = require(path);
    return solver.solveCompiled(module);
  };

  compile = function(exp) {
    var code, compiler, fd, path;

    compiler = new Compiler();
    code = compiler.compile(exp);
    code = beautify(code, {
      indent_size: 2
    });
    path = path || "f:/daonode/lib/compiler/test/compiled.js";
    fd = fs.openSync(path, 'w');
    fs.writeSync(fd, code);
    fs.closeSync(fd);
    return path;
  };

  exports.Compiler = Compiler = (function() {
    function Compiler() {
      this.exits = {};
      this.continues = {};
      this.nameToVarIndex = {};
      this.protect = function(cont) {
        return cont;
      };
    }

    Compiler.prototype.compile = function(exp) {
      var done, f, fromCont, result, v;

      v = this.vari('v');
      done = il.clamda(v, il.code('solver.finished = true; solve.status = solve.SUCCESS'), il["return"](il.array(il["null"], v)));
      fromCont = this.cont(exp, done);
      f = il.clamda(this.vari('v'), il.code('solver = exports.solver'), fromCont);
      result = "solve = require('../solve'); exports.solver = new solve.Solver(); exports.main = " + (f.toCode(this));
      result += "\n// x = exports.solver.run(exports.main)[0];\n    //console.log(x)";
      return result;
    };

    Compiler.prototype.cont = function(exp, cont) {
      var expCont;

      expCont = exp != null ? exp.cont : void 0;
      if (expCont) {
        return expCont.call(exp, this, cont);
      } else {
        return il["return"](cont.call(exp));
      }
    };

    Compiler.prototype.optimize = function(exp, env) {
      var expOptimize;

      expOptimize = exp != null ? exp.optimize : void 0;
      if (expOptimize) {
        return expOptimize.call(exp, env, this);
      } else {
        return exp;
      }
    };

    Compiler.prototype.toCode = function(exp) {
      var exptoCode;

      exptoCode = exp != null ? exp.toCode : void 0;
      if (exptoCode) {
        return exptoCode.call(exp, this);
      } else {
        if (exp === void 0) {
          return 'undefined';
        } else if (exp === null) {
          return 'null';
        } else if (_.isNumber(exp)) {
          return exp.toString();
        } else if (_.isString(exp)) {
          return JSON.stringify(exp);
        } else if (exp === true) {
          return "true";
        } else if (exp === false) {
          return "false";
        } else {
          throw new TypeError(exp);
        }
      }
    };

    Compiler.prototype.expsCont = function(exps, cont) {
      var length, v;

      length = exps.length;
      if (length === 0) {
        throw exports.TypeError(exps);
      } else if (length === 1) {
        return this.cont(exps[0], cont);
      } else {
        v = this.vari('v');
        return this.cont(exps[0], il.clamda(v, this.expsCont(exps.slice(1), cont)));
      }
    };

    Compiler.prototype.argsCont = function(args, cont) {
      var compiler, i, length, params, x, _i, _j, _len, _ref;

      length = args.length;
      for (_i = 0, _len = args.length; _i < _len; _i++) {
        x = args[_i];
        params = this.vari('a');
      }
      cont = il["return"](cont.call(params));
      compiler = this;
      for (i = _j = _ref = length - 1; _j >= 0; i = _j += -1) {
        cont = (function(i, cont) {
          return compiler.cont(args[i], il.clamda(params[i], cont));
        })(i, cont);
      }
      return cont;
    };

    Compiler.prototype.quasiquote = function(exp, cont) {
      return (exp != null ? typeof exp.quasiquote === "function" ? exp.quasiquote(this, cont) : void 0 : void 0) || (function(v) {
        return cont(exp);
      });
    };

    Compiler.prototype.vari = function(name) {
      var index;

      index = this.nameToVarIndex[name] || 0;
      this.nameToVarIndex[name] = index + 1;
      return new il.vari(name + (index ? index : ''));
    };

    return Compiler;

  })();

  Env = (function() {
    function Env(outer, data) {
      this.outer = outer;
      this.data = data != null ? data : {};
    }

    Env.prototype.extend = function(vari, value) {
      var data;

      data = {};
      data[vari.name] = value;
      return new Env(this, data);
    };

    Env.prototype.lookup = function(vari) {
      var data, name, outer;

      data = this.data;
      name = vari.name;
      if (data.hasOwnProperty(name)) {
        return data[name];
      } else {
        outer = this.outer;
        if (outer) {
          return outer.lookup(vari);
        } else {
          return vari;
        }
      }
    };

    return Env;

  })();

  exports.Var = Var = (function() {
    function Var(name) {
      this.name = name;
    }

    Var.prototype.cont = function(compiler, cont) {
      return il["return"](cont.call(il.deref(this.interlang())));
    };

    Var.prototype.interlang = function() {
      return il.vari(this.name);
    };

    Var.prototype.toString = function() {
      return "vari(" + this.name + ")";
    };

    return Var;

  })();

  reElements = /\s*,\s*|\s+/;

  exports.vari = function(name) {
    return new Var(name);
  };

  exports.vars = function(names) {
    var name, _i, _len, _ref, _results;

    _ref = split(names, reElements);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      _results.push(vari(name));
    }
    return _results;
  };

  exports.Apply = (function() {
    function Apply(caller, args) {
      var arity, length, ok, x, _i, _len, _ref, _ref1;

      this.caller = caller;
      this.args = args;
      length = args.length;
      arity = this.caller.arity;
      ok = false;
      if (arity === null) {
        ok = true;
      }
      if (_.isArray(arity)) {
        if (__indexOf.call(arity, length) >= 0) {
          ok = true;
        }
      } else if (_.isNumber(arity)) {
        if ((arity >= 0 && length === arity) || (arity < 0 && length >= -arity)) {
          ok = true;
        }
      }
      if (!ok) {
        _ref = this.args;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          x = _ref[_i];
          if ((x != null ? (_ref1 = x.caller) != null ? _ref1.name : void 0 : void 0) === "unquoteSlice") {
            return;
          }
        }
        throw new ArityError(this);
      }
    }

    Apply.prototype.toString = function() {
      return "" + this.caller + "(" + (this.args.join(', ')) + ")";
    };

    Apply.prototype.cont = function(compiler, cont) {
      return this.caller.applyCont(compiler, cont, this.args);
    };

    Apply.prototype.quasiquote = function(compiler, cont) {
      var args, i, params, _i, _ref,
        _this = this;

      if (this.caller.name === "unquote") {
        return compiler.cont(this.args[0], function(v) {
          return cont(v);
        });
      } else if (this.caller.name === "unquoteSlice") {
        return compiler.cont(this.args[0], function(v) {
          return cont(new UnquoteSliceValue(v));
        });
      }
      params = [];
      cont = (function(cont) {
        return function(v) {
          return [cont, new _this.constructor(_this.caller, params)];
        };
      })(cont);
      args = this.args;
      for (i = _i = _ref = args.length - 1; _i >= 0; i = _i += -1) {
        cont = (function(i, cont) {
          return compiler.quasiquote(args[i], function(v) {
            var x, _j, _len, _ref1;

            if (v instanceof UnquoteSliceValue) {
              _ref1 = v.value;
              for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
                x = _ref1[_j];
                params.push(x);
              }
            } else {
              params.push(v);
            }
            return cont(null);
          });
        })(i, cont);
      }
      return cont;
    };

    return Apply;

  })();

  UnquoteSliceValue = exports.UnquoteSliceValue = (function() {
    function UnquoteSliceValue(value) {
      this.value = value;
    }

    return UnquoteSliceValue;

  })();

  Command = exports.Command = (function() {
    Command.directRun = false;

    function Command(fun, name, arity) {
      var _this = this;

      this.fun = fun;
      this.name = name;
      this.arity = arity;
      this.callable = function() {
        var applied, args, result, solver;

        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        applied = new exports.Apply(_this, args);
        if (Command.directRun) {
          solver = Command.globalSolver;
          result = solver.solve(applied);
          solver.finished = false;
          return result;
        } else {
          return applied;
        }
      };
      this.callable.arity = this.arity;
    }

    Command.prototype.register = function(exports) {
      return exports[this.name] = this.callable;
    };

    Command.prototype.toString = function() {
      return this.name;
    };

    return Command;

  })();

  commandMaker = function(klass) {
    return function(arity, name, fun) {
      if ((name == null) && (fun == null)) {
        fun = arity;
        name = "noname";
        if (klass === exports.Special) {
          arity = fun.length - 2;
        } else {
          arity = fun.length;
        }
      } else if (fun == null) {
        fun = name;
        if (_.isString(arity)) {
          name = arity;
          if (klass === exports.Special) {
            arity = fun.length - 2;
          } else {
            arity = fun.length;
          }
        } else {
          if (!_.isNumber(arity) && arity !== null && !_.isArray(arity)) {
            throw new ArgumentError(arity);
          }
          name = "noname";
        }
      } else {
        if (!_.isNumber(arity) && arity !== null && !_.isArray(arity)) {
          throw new ArgumentError(arity);
        }
        if (!_.isString(name)) {
          throw new TypeError(name);
        }
      }
      return new klass(fun, name, arity).callable;
    };
  };

  exports.Special = (function(_super) {
    __extends(Special, _super);

    function Special() {
      _ref = Special.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Special.prototype.applyCont = function(compiler, cont, args) {
      return this.fun.apply(this, [compiler, cont].concat(__slice.call(args)));
    };

    return Special;

  })(exports.Command);

  exports.special = special = commandMaker(exports.Special);

  Recursive = (function() {
    function Recursive(name, func) {
      this.name = name;
      this.func = func;
    }

    return Recursive;

  })();

  exports.recursive = function(name, func) {
    return new Recursive(name, func);
  };

  exports.Fun = (function(_super) {
    __extends(Fun, _super);

    function Fun() {
      _ref1 = Fun.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Fun.prototype.applyCont = function(compiler, cont, args) {
      var f, fun, i, length, params, x, _i, _ref2;

      length = args.length;
      params = (function() {
        var _i, _len, _results;

        _results = [];
        for (_i = 0, _len = args.length; _i < _len; _i++) {
          x = args[_i];
          _results.push(compiler.vari('a'));
        }
        return _results;
      })();
      fun = this.fun;
      if (fun.toCode == null) {
        if (fun instanceof Recursive) {
          f = il.vari(fun.name);
          cont = il.begin(il.assign(f, il.fun(fun.func)), il["return"](cont.call(f.apply(params))));
        } else {
          fun = il.fun(fun);
          cont = il["return"](cont.call(fun.apply(params)));
        }
      } else {
        cont = il["return"](cont.call(fun.apply(params)));
      }
      for (i = _i = _ref2 = length - 1; _i >= 0; i = _i += -1) {
        cont = (function(i, cont) {
          return compiler.cont(args[i], il.clamda(params[i], cont));
        })(i, cont);
      }
      return cont;
    };

    return Fun;

  })(exports.Command);

  exports.fun = commandMaker(exports.Fun);

  exports.Fun2 = (function(_super) {
    __extends(Fun2, _super);

    function Fun2() {
      _ref2 = Fun2.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    Fun2.prototype.applyCont = function(compiler, cont, args) {
      var exp, f, fun, i, length, params, x, _i, _ref3;

      length = args.length;
      params = (function() {
        var _i, _len, _results;

        _results = [];
        for (_i = 0, _len = args.length; _i < _len; _i++) {
          x = args[_i];
          _results.push(compiler.vari('a'));
        }
        return _results;
      })();
      fun = this.fun;
      if (fun.toCode == null) {
        if (fun instanceof Recursive) {
          f = il.vari(fun.name);
          exp = f.apply.apply(f, params);
          cont = il.begin(il.assign(f, il.fun(fun.func)), compiler.cont(exp, cont));
        } else {
          fun = il.fun(fun);
          exp = fun.apply.apply(fun, params);
          cont = compiler.cont(exp, cont);
        }
      } else {
        exp = fun.apply.apply(fun, params);
        cont = compiler.cont(exp, cont);
      }
      for (i = _i = _ref3 = length - 1; _i >= 0; i = _i += -1) {
        cont = (function(i, cont) {
          return compiler.cont(args[i], il.clamda(params[i], cont));
        })(i, cont);
      }
      return cont;
    };

    return Fun2;

  })(exports.Command);

  exports.fun2 = commandMaker(exports.Fun2);

  exports.Macro = Macro = (function(_super) {
    __extends(Macro, _super);

    function Macro(fun, name, arity) {
      this.fun = fun;
      this.name = name;
      this.arity = arity;
      Macro.__super__.constructor.apply(this, arguments);
    }

    Macro.prototype.applyCont = function(compiler, cont, args) {
      var exp;

      exp = this.fun.apply(this, args);
      return compiler.cont(exp, cont);
    };

    return Macro;

  })(exports.Command);

  exports.macro = commandMaker(exports.Macro);

  exports.Error = Error = (function() {
    function Error(exp, message, stack) {
      this.exp = exp;
      this.message = message != null ? message : '';
      this.stack = stack != null ? stack : this;
    }

    Error.prototype.toString = function() {
      return "" + this.constructor.name + ": " + this.exp + " >>> " + this.message;
    };

    return Error;

  })();

  exports.TypeError = TypeError = (function(_super) {
    __extends(TypeError, _super);

    function TypeError() {
      _ref3 = TypeError.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    return TypeError;

  })(Error);

  exports.ArgumentError = ArgumentError = (function(_super) {
    __extends(ArgumentError, _super);

    function ArgumentError() {
      _ref4 = ArgumentError.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    return ArgumentError;

  })(Error);

  exports.ArityError = ArityError = (function(_super) {
    __extends(ArityError, _super);

    function ArityError() {
      _ref5 = ArityError.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    return ArityError;

  })(Error);

}).call(this);

/*
//@ sourceMappingURL=core.map
*/
