// Generated by CoffeeScript 1.6.2
(function() {
  var Trail, begin, core, dummy, eval_, fun, fun2, if_, macro, proc, quote, rule, solve, tofun, vari, xexports, _ref, _ref1;

  _ref = core = require('../core'), solve = _ref.solve, vari = _ref.vari, Trail = _ref.Trail, fun = _ref.fun, fun2 = _ref.fun2, macro = _ref.macro, proc = _ref.proc, rule = _ref.rule, tofun = _ref.tofun, dummy = _ref.dummy;

  _ref1 = require("../builtins/lisp"), quote = _ref1.quote, eval_ = _ref1.eval_, if_ = _ref1.if_, begin = _ref1.begin;

  xexports = {};

  exports.Test = {
    "test 1": function(test) {
      test.equal(solve(1), 1);
      test.equal(solve(begin(1, 2)), 2);
      return test.done();
    },
    "test vari": function(test) {
      var a;

      a = vari('a');
      test.equal(solve(a), a);
      return test.done();
    }
  };

  xexports.Test = {
    "test print_": function(test) {
      test.equal(solve(print_('a')), null);
      return test.done();
    }
  };

  exports.Test = {
    "test builtin function": function(test) {
      var same;

      same = fun(1, function(x) {
        return x;
      });
      test.equal(solve(same(1)), 1);
      return test.done();
    },
    "test builtin function 2": function(test) {
      var add, list, list2;

      add = fun(2, function(x, y) {
        return x + y;
      });
      test.equal(solve(add(1, 2)), 3);
      list = fun(7, function(x1, x2, x3, x4, x5, x6, x7) {
        return [x1, x2, x3, x4, x5, x6, x7];
      });
      test.deepEqual(solve(list(1, 2, 3, 4, 5, 6, 7)), [1, 2, 3, 4, 5, 6, 7]);
      list2 = fun(8, function(x1, x2, x3, x4, x5, x6, x7, x8) {
        return [x1, x2, x3, x4, x5, x6, x7, x8];
      });
      test.deepEqual(solve(list2(1, 2, 3, 4, 5, 6, 7, 8)), [1, 2, 3, 4, 5, 6, 7, 8]);
      return test.done();
    }
  };

  xexports.Test = {
    "test var bind unify trail": function(test) {
      var trail, x;

      trail = new Trail;
      x = vari('x');
      test.equal(x.binding, x);
      x.bind(1, trail);
      test.ok(trail.unify(1, x));
      test.ok(!trail.unify(2, x));
      trail.undo();
      test.ok(trail.unify(x, 2));
      return test.done();
    },
    "test macro": function(test) {
      var orpm, same;

      same = macro(function(x) {
        return x;
      });
      orpm = macro(function(x, y) {
        return orp(x, y);
      });
      test.equal(solve(same(1)), 1);
      test.equal(solve(same(print_(1))), null);
      test.equal(solve(orpm(fail, print_(2))), null);
      return test.done();
    },
    "test macro": function(test) {
      var m;

      m = macro(0, 'a', function() {});
      m();
      return test.done();
    },
    "test proc,aka online function in dao": function(test) {
      var a;

      a = proc(0, 'a', function() {
        var i;

        i = 0;
        return add(1, 2);
      });
      test.equal(solve(begin(a(), a())), 3);
      test.equal(solve(begin(a(), add(1, 1))), 2);
      return test.done();
    },
    "test macro tofun": function(test) {
      var orpm;

      orpm = macro(2, function(x, y) {
        return orp(x, y);
      });
      test.equal(solve(orpm(print_(1), print_(2))), null);
      test.equal(solve(tofun(orpm)(print_(1), print_(2))), null);
      test.equal(solve(tofun(orpm)(quote(print_(1)), quote(print_(2)))), null);
      return test.done();
    },
    "test macro 1": function(test) {
      var m;

      m = macro(1, function(x) {
        if (x === 0) {
          return print_(x);
        } else {
          return m(x - 1);
        }
      });
      test.equal(solve(m(5)), null);
      return test.done();
    },
    "test fun2": function(test) {
      var m;

      m = fun2(1, function(x) {
        return if_(eq(x, 0), print_(x), m(sub(x, 1)));
      });
      test.equal(solve(m(5)), null);
      return test.done();
    },
    "test macro 2": function(test) {
      var m, x, _;

      _ = dummy('_');
      m = macro(0, function() {
        return print_(1);
      });
      x = m();
      test.equal(solve(andp(x, x)), null);
      test.equal(core.status, core.SUCCESS);
      return test.done();
    },
    "test recursive macro2": function(test) {
      var m, _;

      _ = dummy('_');
      m = macro(0, function() {
        return orp(andp(char(_), print_(_), m()), succeed);
      });
      test.equal(solve(andp(settext('abc'), m())), null);
      test.equal(core.status, core.SUCCESS);
      return test.done();
    },
    "test recursive macro1": function(test) {
      var m;

      m = macro(1, function(x) {
        if (x === 0) {
          return print_(x);
        } else {
          return begin(print_(x), m(x - 1));
        }
      });
      test.equal(solve(m(5)), null);
      test.equal(core.status, core.SUCCESS);
      return test.done();
    }
  };

}).call(this);

/*
//@ sourceMappingURL=test_solve.map
*/
