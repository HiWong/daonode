// Generated by CoffeeScript 1.6.2
(function() {
  var compile, compile_print, done, xexports;

  xexports = {};

  exports.Test = {
    "test 1": function(test) {
      var cont, f, x, xcont, ycont;

      x = null;
      cont = function(v) {
        return v;
      };
      ycont = function(v) {
        return (function(v) {
          return cont(x + v);
        })(2);
      };
      xcont = function(v) {
        x = v;
        return ycont(null);
      };
      f = function(v) {
        return xcont(1);
      };
      test.equal(f(null), 3);
      return test.done();
    }
  };

  done = function(exp) {
    return function(v) {
      return exp;
    };
  };

  compile = function(exp, cont) {
    return cont(exp);
  };

  compile_print = function(exp, cont) {
    var f;

    f = compile(null, cont);
    return function(exp0) {
      console.log(exp);
      return f(null);
    };
  };

  exports.Test = {
    "test 1": function(test) {
      var f, f2, x;

      x = 0;
      f = function(x) {
        var f1;

        return f1 = function() {
          return x;
        };
      };
      console.log(f(x).toString());
      f = compile(2, done);
      console.log(f.toString());
      test.equal(f(null), 2);
      f2 = compile_print(1, done);
      console.log(f2.toString());
      test.equal(f2(0), null);
      return test.done();
    }
  };

  xexports.Test = {
    "test vari": function(test) {
      var a;

      a = vari('a');
      test.equal(solve(a), a);
      return test.done();
    },
    "test print_": function(test) {
      test.equal(solve(print_('a')), null);
      return test.done();
    },
    "test builtin function": function(test) {
      var add, same;

      same = fun(1, function(x) {
        return x;
      });
      test.equal(solve(same(1)), 1);
      add = fun(2, function(x, y) {
        return x + y;
      });
      test.equal(solve(add(1, 2)), 3);
      return test.done();
    },
    "test var bind unify trail": function(test) {
      var trail, x;

      trail = new Trail;
      x = vari('x');
      test.equal(x.binding, x);
      x.bind(1, trail);
      test.ok(trail.unify(1, x));
      test.ok(!trail.unify(2, x));
      trail.undo();
      test.ok(trail.unify(x, 2));
      return test.done();
    },
    "test macro": function(test) {
      var orpm, same;

      same = macro(function(x) {
        return x;
      });
      orpm = macro(function(x, y) {
        return orp(x, y);
      });
      test.equal(solve(same(1)), 1);
      test.equal(solve(same(print_(1))), null);
      test.equal(solve(orpm(fail, print_(2))), null);
      return test.done();
    },
    "test macro": function(test) {
      var m;

      m = macro(0, 'a', function() {});
      m();
      return test.done();
    },
    "test proc,aka online function in dao": function(test) {
      var a;

      a = proc(0, 'a', function() {
        var i;

        i = 0;
        return add(1, 2);
      });
      test.equal(solve(begin(a(), a())), 3);
      test.equal(solve(begin(a(), add(1, 1))), 2);
      return test.done();
    },
    "test macro tofun": function(test) {
      var orpm;

      orpm = macro(2, function(x, y) {
        return orp(x, y);
      });
      test.equal(solve(orpm(print_(1), print_(2))), null);
      test.equal(solve(tofun(orpm)(print_(1), print_(2))), null);
      test.equal(solve(tofun(orpm)(quote(print_(1)), quote(print_(2)))), null);
      return test.done();
    },
    "test macro 1": function(test) {
      var m;

      m = macro(1, function(x) {
        if (x === 0) {
          return print_(x);
        } else {
          return m(x - 1);
        }
      });
      test.equal(solve(m(5)), null);
      return test.done();
    },
    "test fun2": function(test) {
      var m;

      m = fun2(1, function(x) {
        return if_(eq(x, 0), print_(x), m(sub(x, 1)));
      });
      test.equal(solve(m(5)), null);
      return test.done();
    },
    "test macro 2": function(test) {
      var m, x, _;

      _ = dummy('_');
      m = macro(0, function() {
        return print_(1);
      });
      x = m();
      test.equal(solve(andp(x, x)), null);
      test.equal(core.status, core.SUCCESS);
      return test.done();
    },
    "test recursive macro2": function(test) {
      var m, _;

      _ = dummy('_');
      m = macro(0, function() {
        return orp(andp(char(_), print_(_), m()), succeed);
      });
      test.equal(solve(andp(settext('abc'), m())), null);
      test.equal(core.status, core.SUCCESS);
      return test.done();
    },
    "test recursive macro1": function(test) {
      var m;

      m = macro(1, function(x) {
        if (x === 0) {
          return print_(x);
        } else {
          return begin(print_(x), m(x - 1));
        }
      });
      test.equal(solve(m(5)), null);
      test.equal(core.status, core.SUCCESS);
      return test.done();
    }
  };

}).call(this);

/*
//@ sourceMappingURL=testCore.map
*/
