// Generated by CoffeeScript 1.6.2
(function() {
  var fun, solve, special,
    __slice = [].slice;

  solve = require("../../src/solve");

  fun = solve.fun;

  special = solve.special;

  exports.print_ = fun(-1, 'print_', function() {
    var args;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return console.log.apply(console, args);
  });

  exports.add = fun(2, 'add', function(x, y) {
    return x + y;
  });

  exports.sub = fun(2, 'sub', function(x, y) {
    return x - y;
  });

  exports.mul = fun(2, 'mul', function(x, y) {
    return x * y;
  });

  exports.div = fun(2, 'div', function(x, y) {
    return x / y;
  });

  exports.mod = fun(2, 'mod', function(x, y) {
    return x % y;
  });

  exports.and_ = fun(2, 'and_', function(x, y) {
    return x && y;
  });

  exports.or_ = fun(2, 'or_', function(x, y) {
    return x || y;
  });

  exports.not_ = fun(1, 'not_', function(x) {
    return !x;
  });

  exports.lshift = fun(2, 'lshift', function(x, y) {
    return x << y;
  });

  exports.rshift = fun(2, 'rshift', function(x, y) {
    return x >> y;
  });

  exports.bitand = fun(2, 'bitand', function(x, y) {
    return x & y;
  });

  exports.bitor = fun(2, 'bitor', function(x, y) {
    return x | y;
  });

  exports.bitnot = fun(2, 'bitnot', function(x) {
    return ~x;
  });

  exports.eq = special(2, 'eq', function(solver, cont, x, y) {
    var xcont, ycont;

    ycont = solver.cont(y, function(v, solver) {
      return cont(x === v, solver);
    });
    xcont = function(v, solver) {
      x = v;
      return ycont(null, solver);
    };
    return solver.cont(x, xcont);
  });

  exports.ne = special(2, 'ne', function(solver, cont, x, y) {
    var xcont, ycont;

    ycont = solver.cont(y, function(v, solver) {
      return cont(x !== v, solver);
    });
    xcont = function(v, solver) {
      x = v;
      return ycont(null, solver);
    };
    return solver.cont(x, xcont);
  });

  exports.lt = special(2, 'lt', function(solver, cont, x, y) {
    var xcont, ycont;

    ycont = solver.cont(y, function(v, solver) {
      return cont(x <= v, solver);
    });
    xcont = function(v, solver) {
      x = v;
      return ycont(null, solver);
    };
    return solver.cont(x, xcont);
  });

  exports.le = special(2, 'le', function(solver, cont, x, y) {
    var xcont, ycont;

    ycont = solver.cont(y, function(v, solver) {
      return cont(x <= v, solver);
    });
    xcont = function(v, solver) {
      x = v;
      return ycont(null, solver);
    };
    return solver.cont(x, xcont);
  });

  exports.gt = special(2, 'gt', function(solver, cont, x, y) {
    var xcont, ycont;

    ycont = solver.cont(y, function(v, solver) {
      return cont(x > v, solver);
    });
    xcont = function(v, solver) {
      x = v;
      return ycont(null, solver);
    };
    return solver.cont(x, xcont);
  });

  exports.ge = special(2, 'ge', function(solver, cont, x, y) {
    var xcont, ycont;

    ycont = solver.cont(y, function(v, solver) {
      return cont(x >= v, solver);
    });
    xcont = function(v, solver) {
      x = v;
      return ycont(null, solver);
    };
    return solver.cont(x, xcont);
  });

  exports.inc = special(1, 'inc', function(solver, cont, vari) {
    return function(v, solver) {
      return cont(++vari.binding, solver);
    };
  });

  exports.inc2 = special(1, 'inc2', function(solver, cont, vari) {
    return function(v, solver) {
      vari.binding++;
      return cont(++vari.binding, solver);
    };
  });

  exports.dec = special(1, 'dec', function(solver, cont, vari) {
    return function(v, solver) {
      return cont(--vari.binding, solver);
    };
  });

  exports.dec2 = special(1, 'dec2', function(solver, cont, vari) {
    return function(v, solver) {
      vari.binding--;
      return cont(--vari.binding, solver);
    };
  });

  exports.getvalue = special(1, 'getvalue', function(solver, cont, x) {
    return solver.cont(x, function(v, solver) {
      return cont(solver.trail.getvalue(v), solver);
    });
  });

  exports.length = special(1, 'length', function(solver, cont, x) {
    return solver.cont(x, function(v, solver) {
      return cont(v.length, solver);
    });
  });

  exports.neg = special(1, 'neg', function(solver, cont, x) {
    return solver.cont(x, function(v, solver) {
      return cont(-v, solver);
    });
  });

  exports.abs = special(1, 'abs', function(solver, cont, x) {
    return solver.cont(x, function(v, solver) {
      return cont(Math.abs(v), solver);
    });
  });

  exports.index = special(2, 'index', function(solver, cont, x, y) {
    var xcont, ycont;

    ycont = solver.cont(y, function(v, solver) {
      return cont(x[y], solver);
    });
    xcont = function(v, solver) {
      x = v;
      return ycont(null, solver);
    };
    return solver.cont(x, xcont);
  });

  exports.first = special(1, 'first', function(solver, cont, x) {
    return solver.cont(x, function(v, solver) {
      return cont(v[0], solver);
    });
  });

  exports.left = special(1, 'left', function(solver, cont, x) {
    return solver.cont(x, function(v, solver) {
      return cont(v.slice(1), solver);
    });
  });

  exports.second = special(1, 'second', function(solver, cont, x) {
    return solver.cont(x, function(v, solver) {
      return cont(v[1], solver);
    });
  });

  exports.third = special(1, 'third', function(solver, cont, x) {
    return solver.cont(x, function(v, solver) {
      return cont(v[2], solver);
    });
  });

  exports.concat = special(2, 'concat', function(solver, cont, x, y) {
    var xcont, ycont;

    ycont = solver.cont(y, function(v, solver) {
      return cont(x.concat(y), solver);
    });
    xcont = function(v, solver) {
      x = v;
      return ycont(null, solver);
    };
    return solver.cont(x, xcont);
  });

  exports.list = special(-1, 'list', function() {
    var args, cont, solver;

    solver = arguments[0], cont = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
    return solver.argsCont(args, cont);
  });

  exports.push = special(2, 'push', function(solver, cont, x, y) {
    var xcont, ycont;

    ycont = solver.cont(y, function(v, solver) {
      return cont(x.push(y), solver);
    });
    xcont = function(v, solver) {
      x = v;
      return ycont(null, solver);
    };
    return solver.cont(x, xcont);
  });

  exports.free = special(1, 'freep', function(solver, cont, x) {
    return function(v, solver) {
      return cont(solver.trail.deref(x) instanceof Var, solver);
    };
  });

}).call(this);

/*
//@ sourceMappingURL=general.map
*/
