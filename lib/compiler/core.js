// Generated by CoffeeScript 1.6.2
(function() {
  var ArgumentError, ArityError, Compiler, Env, Error, TypeError, beautify, compile, fs, hasOwnProperty, il, _, _ref, _ref1, _ref2,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require("underscore");

  fs = require("fs");

  beautify = require('js-beautify').js_beautify;

  il = require("./interlang");

  hasOwnProperty = Object.prototype.hasOwnProperty;

  exports.solve = function(exp, path) {
    var compiled;

    path = compile(exp, path);
    delete require.cache[require.resolve(path)];
    compiled = require(path);
    return compiled.main();
  };

  compile = function(exp, path) {
    var code, compiler, fd;

    compiler = new Compiler();
    code = compiler.compile(exp) + "\n//exports.main();";
    code = beautify(code, {
      indent_size: 2
    });
    path = path || "f:/daonode/lib/compiler/test/compiled.js";
    fd = fs.openSync(path, 'w');
    fs.writeSync(fd, code);
    fs.closeSync(fd);
    return path;
  };

  exports.Compiler = Compiler = (function() {
    var e, instance, name, vop, _fn, _i, _len, _ref;

    function Compiler() {
      this.nameToVarIndex = {};
      this.exits = {};
      this.continues = {};
      this.protect = function(cont) {
        return cont;
      };
      this.index = 1;
    }

    Compiler.prototype.compile = function(exp) {
      var exps, lamda, lamdaVars, locals, nonlocals, v;

      v = this.il_var('v');
      exp = this.cont(exp, this.clamda(v, il["throw"](il["new"](il.symbol('SolverFinish').call(v)))));
      exps = [il.userlocalassign('_', il.require('underscore')), il.userlocalassign('__slice', il.attr([], il.symbol('slice'))), il.userlocalassign('solve', il.attr(il.require('f:/daonode/lib/compiler/core.js'), il.symbol('solve'))), il.userlocalassign('parser', il.require('f:/daonode/lib/compiler/parser.js')), il.userlocalassign('solvecore', il.require('f:/daonode/lib/compiler/solve.js')), il.userlocalassign('SolverFinish', il.attr(il.userlocal('solvecore'), il.symbol('SolverFinish'))), il.userlocalassign('Solver', il.attr(il.userlocal('solvecore'), il.symbol('Solver'))), il.userlocalassign('Trail', il.attr(il.userlocal('solvecore'), il.symbol('Trail'))), il.userlocalassign('Var', il.attr(il.userlocal('solvecore'), il.symbol('Var'))), il.userlocalassign('DummyVar', il.attr(il.userlocal('solvecore'), il.symbol('DummyVar'))), il.userlocalassign('solver', il["new"](il.symbol('Solver').call())), il.assign(il.state, null), il.assign(il.catches, {}), il.assign(il.trail, il.newTrail), il.assign(il.failcont, il.clamda(v, il["throw"](il["new"](il.symbol('SolverFinish').call(v))))), il.assign(il.cutcont, il.failcont), il.run(il.clamda(v, exp))];
      lamda = il.userlamda.apply(il, [[]].concat(__slice.call(exps)));
      exp = il.assign(il.attr(il.usernonlocal('exports'), il.symbol('main')), lamda);
      lamda.locals = locals = {};
      lamda.nonlocals = nonlocals = {};
      lamdaVars = {
        _userlocals: locals,
        _usernonlocals: nonlocals,
        _locals: locals,
        _nonlocals: nonlocals
      };
      exp = exp.optimize(new Env(null, {}, lamdaVars), this);
      exp = exp.jsify();
      return exp.toCode(this);
    };

    Compiler.prototype.il_var = function(name) {
      return il.internallocal(name + '_$' + this.index++);
    };

    Compiler.prototype.clamda = function() {
      var body, cont, v;

      v = arguments[0], body = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      this.globalCont = cont = il.clamda.apply(il, [v].concat(__slice.call(body)));
      return cont;
    };

    Compiler.prototype.clamda = function() {
      var body, cont, v;

      v = arguments[0], body = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      this.globalCont = cont = il.clamda.apply(il, [v].concat(__slice.call(body)));
      return cont;
    };

    Compiler.prototype.cont = function(exp, cont) {
      var head, length, _ref;

      if (_.isString(exp)) {
        return cont.call(il.userlocal(exp));
      }
      if (!_.isArray(exp)) {
        return cont.call(exp);
      }
      length = exp.length;
      if (length === 0) {
        return cont.call(exp);
      }
      head = exp[0];
      if (!_.isString(head)) {
        return cont.call(exp);
      }
      if (!this.specials.hasOwnProperty(head)) {
        return cont.call(exp);
      }
      return (_ref = this.specials[head]).call.apply(_ref, [this, cont].concat(__slice.call(exp.slice(1))));
    };

    Compiler.prototype.leftValueCont = function(cont, task, item, exp, op) {
      var assignExpCont, head, i, index, length, obj, object, v,
        _this = this;

      assignExpCont = function(item) {
        var fc, temp, v;

        v = _this.il_var('v');
        temp = _this.il_var('temp');
        switch (task) {
          case 'assign':
            return _this.cont(exp, _this.clamda(v, il.assign(item, v), cont.call(item)));
          case 'augment-assign':
            return _this.cont(exp, _this.clamda(v, il.assign(item, il[op](item, v), cont.call(item))));
          case 'inc':
            return il.begin(il.assign(item, il.add(item, 1)), cont.call(item));
          case 'dec':
            return il.begin(il.assign(item, il.sub(item, 1)), cont.call(item));
          case 'suffixinc':
            return il.begin(il.assign(temp, item), il.assign(item, il.add(item, 1)), cont.call(temp));
          case 'suffixdec':
            return il.begin(il.assign(temp, item), il.assign(item, il.sub(item, 1)), cont.call(temp));
          case 'incp':
            fc = _this.il_var('fc');
            return il.begin(il.assign(fc, il.failcont), il.setfailcont(il.clamda(v, il.assign(item, il.sub(item, 1)), fc.call(item))), il.assign(item, il.add(item, 1)), cont.call(item));
          case 'decp':
            fc = _this.il_var('fc');
            return il.begin(il.assign(fc, il.failcont), il.setfailcont(il.clamda(v, il.assign(item, il.add(item, 1)), fc.call(item))), il.assign(item, il.sub(item, 1)), cont.call(item));
          case 'suffixincp':
            fc = _this.il_var('fc');
            return il.begin(il.assign(temp, item), il.assign(fc, il.failcont), il.setfailcont(il.clamda(v, il.assign(item, il.sub(item, 1)), fc.call(temp))), il.assign(item, il.add(item, 1)), cont.call(temp));
          case 'suffixdecp':
            fc = _this.il_var('fc');
            return il.begin(il.assign(temp, item), il.assign(fc, il.failcont), il.setfailcont(il.clamda(v, il.assign(item, il.add(item, 1)), fc.call(temp))), il.assign(item, il.sub(item, 1)), cont.call(temp));
        }
      };
      if (_.isString(item)) {
        return assignExpCont(il.userlocal(item));
      }
      if (!_.isArray(item)) {
        throw new Error("Left value should be an sexpression.");
      }
      length = item.length;
      if (length === 0) {
        throw new Error("Left value side should not be empty list.");
      }
      head = item[0];
      if (!_.isString(head)) {
        throw new Error("Keyword should be a string.");
      }
      if (head === "index") {
        object = item[1];
        index = item[2];
        obj = this.il_var('obj');
        i = this.il_var('i');
        v = this.il_var('v');
        return this.cont(object, il.clamda(obj, this.cont(index, il.clamda(i, assignExpCont(il.index(obj, i))))));
      } else {
        throw new Error("Left Value side should be assignable expression.");
      }
    };

    Compiler.prototype.specials = {
      "quote": function(cont, exp) {
        return cont.call(exp);
      },
      "eval": function(cont, exp, path) {
        var p, v;

        v = this.il_var('v');
        p = this.il_var('path');
        return this.cont(exp, this.clamda(v, this.cont(path, this.clamda(p, cont.call(il.evalexpr(v, p))))));
      },
      'string': function(cont, exp) {
        return cont.call(exp);
      },
      "begin": function() {
        var cont, exps;

        cont = arguments[0], exps = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        return this.expsCont(exps, cont);
      },
      "nonlocal": function() {
        var cont, vars;

        cont = arguments[0], vars = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        return il.begin(il.nonlocalvar(vars), cont.call(null));
      },
      "assign": function(cont, left, exp) {
        return this.leftValueCont(cont, "assign", left, exp);
      },
      "augment-assign": function(cont, op, left, exp) {
        return this.leftValueCont(cont, "augment-assign", left, exp, op);
      },
      'inc': function(cont, item) {
        return this.leftValueCont(cont, "inc", item);
      },
      'suffixinc': function(cont, item) {
        return this.leftValueCont(cont, "suffixinc", item);
      },
      'dec': function(item) {
        return this.leftValueCont(cont, "dec", item);
      },
      'suffixdec': function(item) {
        return this.leftValueCont(cont, "suffixdec", item);
      },
      'incp': function(cont, item) {
        return this.leftValueCont(cont, "incp", item);
      },
      'suffixincp': function(cont, item) {
        return this.leftValueCont(cont, "suffixincp", item);
      },
      'decp': function(item) {
        return this.leftValueCont(cont, "decp", item);
      },
      'suffixdecp': function(item) {
        return this.leftValueCont(cont, "suffixdecp", item);
      },
      "if": function(cont, test, then_, else_) {
        var v;

        v = this.il_var('v');
        return this.cont(test, this.clamda(v, il.if_(v, this.cont(then_, cont), this.cont(else_, cont))));
      },
      "jsfun": function(cont, func) {
        var f;

        f = il.jsfun(func);
        f._effect = this._effect;
        return cont.call(f);
      },
      "pure": function(cont, exp) {
        var oldEffect, result;

        oldEffect = this._effect;
        this._effect = il.PURE;
        result = this.cont(exp, cont);
        this._effect = oldEffect;
        return result;
      },
      "effect": function(cont, exp) {
        var oldEffect, result;

        oldEffect = this._effect;
        this._effect = il.EFFECT;
        result = this.cont(exp, cont);
        this._effect = oldEffect;
        return result;
      },
      "io": function(cont, exp) {
        var oldEffect, result;

        oldEffect = this._effect;
        this._effect = il.IO;
        result = this.cont(exp, cont);
        this._effect = oldEffect;
        return result;
      },
      "lambda": function() {
        var body, cont, globalCont, p, params, v;

        cont = arguments[0], params = arguments[1], body = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
        v = this.il_var('v');
        params = (function() {
          var _i, _len, _results;

          _results = [];
          for (_i = 0, _len = params.length; _i < _len; _i++) {
            p = params[_i];
            _results.push(il.internallocal(p));
          }
          return _results;
        })();
        globalCont = this.globalCont;
        this.globalCont = il.idcont;
        cont = cont.call(il.userlamda(params, this.expsCont(body, il.idcont)));
        this.globalCont = globalCont;
        return cont;
      },
      "macro": function() {
        var body, cont, globalCont, i, p, params, params1, v;

        cont = arguments[0], params = arguments[1], body = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
        v = this.il_var('v');
        params1 = (function() {
          var _i, _len, _results;

          _results = [];
          for (_i = 0, _len = params.length; _i < _len; _i++) {
            p = params[_i];
            _results.push(il.internallocal(p));
          }
          return _results;
        })();
        body = (function() {
          var _i, _ref, _results;

          _results = [];
          for (i = _i = 0, _ref = body.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
            _results.push(this.substMacroArgs(body[i], params));
          }
          return _results;
        }).call(this);
        globalCont = this.globalCont;
        this.globalCont = il.idcont;
        cont = cont.call(il.lamda(params1, this.expsCont(body, il.idcont)));
        this.globalCont = globalCont;
        return cont;
      },
      "evalarg": function(cont, name) {
        return cont.call(il.internallocal(name).call(cont));
      },
      "funcall": function() {
        var args, caller, compiler, cont, f, i, length, params, _i, _ref;

        cont = arguments[0], caller = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
        compiler = this;
        f = this.il_var('f');
        length = args.length;
        params = (function() {
          var _i, _results;

          _results = [];
          for (i = _i = 0; 0 <= length ? _i < length : _i > length; i = 0 <= length ? ++_i : --_i) {
            _results.push(this.il_var('a' + i));
          }
          return _results;
        }).call(this);
        cont = cont.call(f.apply(params));
        for (i = _i = _ref = length - 1; _i >= 0; i = _i += -1) {
          cont = (function(i, cont) {
            return compiler.cont(args[i], compiler.clamda(params[i], cont));
          })(i, cont);
        }
        return this.cont(caller, this.clamda(f, cont));
      },
      "macall": function() {
        var args, caller, compiler, cont, f, i, length, params, v, _i, _ref;

        cont = arguments[0], caller = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
        compiler = this;
        f = this.il_var('f');
        v = this.il_var('v');
        length = args.length;
        params = (function() {
          var _i, _results;

          _results = [];
          for (i = _i = 0; 0 <= length ? _i < length : _i > length; i = 0 <= length ? ++_i : --_i) {
            _results.push(this.il_var('a' + i));
          }
          return _results;
        }).call(this);
        cont = f.apply(params);
        for (i = _i = _ref = length - 1; _i >= 0; i = _i += -1) {
          cont = (function(i, cont) {
            var body, globalCont;

            globalCont = compiler.globalCont;
            compiler.globalCont = il.idcont;
            body = compiler.cont(args[i], il.idcont);
            compiler.globalCont = globalCont;
            return compiler.clamda(params[i], cont).call(il.lamda([], body));
          })(i, cont);
        }
        return this.cont(caller, this.clamda(f, cont));
      },
      "quasiquote": function(cont, exp) {
        return this.quasiquote(exp, cont);
      },
      "unquote": function(cont, exp) {
        throw new Error("unquote: too many unquote and unquoteSlice");
      },
      "unquote-slice": function(cont, exp) {
        throw new Error("unquoteSlice: too many unquote and unquoteSlice");
      },
      'block': function() {
        var body, cont, continues, defaultContinues, defaultExits, exits, f, fun, label, _base, _base1, _base2, _base3, _ref, _ref1, _ref2, _ref3;

        cont = arguments[0], label = arguments[1], body = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
        label = label[1];
        if (!_.isString(label)) {
          label = '';
          body = [label].concat(body);
        }
        exits = (_ref = (_base = this.exits)[label]) != null ? _ref : _base[label] = [];
        exits.push(cont);
        exits.push(this.globalCont);
        defaultExits = (_ref1 = (_base1 = this.exits)['']) != null ? _ref1 : _base1[''] = [];
        defaultExits.push(cont);
        continues = (_ref2 = (_base2 = this.continues)[label]) != null ? _ref2 : _base2[label] = [];
        f = this.il_var('block' + label);
        fun = il.clamda(this.il_var('v'), null);
        continues.push(f);
        defaultContinues = (_ref3 = (_base3 = this.continues)['']) != null ? _ref3 : _base3[''] = [];
        defaultContinues.push(f);
        fun.body = this.expsCont(body, cont);
        exits.pop();
        if (exits.length === 0) {
          delete this.exits[label];
        }
        continues.pop();
        if (continues.length === 0) {
          delete this.continues[label];
        }
        defaultExits.pop();
        defaultContinues.pop();
        return il.begin(il.assign(f, fun), f.apply([null]));
      },
      'break': function(cont, label, value) {
        var exitCont, exits, globalCont;

        label = label[1];
        exits = this.exits[label];
        if (!exits || exits === []) {
          throw new Error(label);
        }
        exitCont = exits[exits.length - 1];
        globalCont = this.globalCont;
        cont = this.cont(value, this.protect(exitCont));
        this.globalCont = globalCont;
        return cont;
      },
      'continue': function(cont, label) {
        var continueCont, continues;

        label = label[1];
        continues = this.continues[label];
        if (!continues || continues === []) {
          throw new Error(label);
        }
        continueCont = continues[continues.length - 1];
        return this.protect(continueCont).call(null);
      },
      'catch': function() {
        var cont, forms, tag, temp1, temp2, v, v2;

        cont = arguments[0], tag = arguments[1], forms = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
        v = this.il_var('v');
        v2 = this.il_var('v');
        temp1 = this.il_var('temp');
        temp2 = this.il_var('temp');
        return this.cont(tag, this.clamda(v, il.assign(temp1, v), il.pushCatch(temp1, cont), this.expsCont(forms, this.clamda(v2, il.assign(temp2, v2), il.popCatch(temp1), cont.call(temp2)))));
      },
      "throw": function(cont, tag, form) {
        var temp, temp2, v, v2;

        v = this.il_var('v');
        v2 = this.il_var('v');
        temp = this.il_var('temp');
        temp2 = this.il_var('temp');
        return this.cont(tag, this.clamda(v, il.assign(temp, v), this.cont(form, this.clamda(v2, il.assign(temp2, v2), this.protect(il.findCatch(temp)).call(temp2)))));
      },
      'unwind-protect': function() {
        var cleanup, compiler, cont, form, oldprotect, result, temp, temp2, v1, v2;

        cont = arguments[0], form = arguments[1], cleanup = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
        oldprotect = this.protect;
        v1 = this.il_var('v');
        v2 = this.il_var('v');
        temp = this.il_var('temp');
        temp2 = this.il_var('temp');
        compiler = this;
        this.protect = function(cont) {
          return compiler.clamda(v1, il.assign(temp, v1), compiler.expsCont(cleanup, compiler.clamda(v2, v2, oldprotect(cont).call(temp))));
        };
        result = this.cont(form, compiler.clamda(v1, il.assign(temp, v1), this.expsCont(cleanup, this.clamda(v2, v2, cont.call(temp)))));
        this.protect = oldprotect;
        return result;
      },
      'callcc': function(cont, fun) {
        var v;

        v = this.il_var('v');
        return this.cont(fun, this.clamda(v, cont.call(v.call(cont, cont))));
      },
      'callfc': function(cont, fun) {
        var v;

        v = this.il_var('v');
        return this.cont(fun, this.clamda(v, cont.call(v.call(il.failcont, cont))));
      },
      'logicvar': function(cont, name) {
        return cont.call(il.newLogicVar(name));
      },
      'dummy': function(cont, name) {
        return cont.call(il.newDummyVar(name));
      },
      'unify': function(cont, x, y) {
        var x1, y1;

        x1 = this.il_var('x');
        y1 = this.il_var('y');
        return this.cont(x, this.clamda(x1, this.cont(y, this.clamda(y1, il.if_(il.unify(x1, y1), cont.call(true), il.failcont.call(false))))));
      },
      'notunify': function(cont, x, y) {
        var x1, y1;

        x1 = this.il_var('x');
        y1 = this.il_var('y');
        return this.cont(x, this.clamda(x1, this.cont(y, this.clamda(y1, il.if_(il.unify(x, y), il.failcont.call(false), cont.call(true))))));
      },
      'is': function(cont, vari, exp) {
        var v;

        v = this.il_var('v');
        return this.cont(exp, this.clamda(v, il.bind(vari, v), cont.call(true)));
      },
      'bind': function(cont, vari, term) {
        return il.begin(il.bind(vari, il.deref(term)), cont.call(true));
      },
      'getvalue': function(cont, term) {
        return cont.call(il.getvalue(this.interlang(term)));
      },
      'succeed': function(cont) {
        return cont.call(true);
      },
      'fail': function(cont) {
        return il.failcont.call(false);
      },
      'pushp': function(cont, list, value) {
        var fc, list1, list2, v, value1, value2;

        list1 = this.il_var('list');
        value1 = this.il_var('value');
        list2 = this.il_var('list');
        value2 = this.il_var('value');
        fc = this.il_var('fc');
        v = this.il_var('v');
        return this.cont(list, this.clamda(list1, il.assign(list2, list1), this.cont(value, this.clamda(value1, il.assign(value2, value1), il.assign(fc, il.failcont), il.setfailcont(il.clamda(v, v, il.pop(list2), fc.call(value2))), il.push(list2, value2), cont.call(value2)))));
      },
      'orp': function(cont, x, y) {
        var fc, state, trail, v;

        v = this.il_var('v');
        trail = this.il_var('trail');
        state = this.il_var('state');
        fc = this.il_var('fc');
        return il.begin(il.assign(trail, il.trail), il.assign(state, il.state), il.assign(fc, il.failcont), il.settrail(il.newTrail), il.setfailcont(il.clamda(v, v, il.undotrail(il.trail), il.settrail(trail), il.setstate(state), il.setfailcont(fc), this.cont(y, cont))), this.cont(x, cont));
      },
      'ifp': function(cont, test, action) {
        var fc, v;

        v = this.il_var('v');
        fc = this.il_var('fc');
        return il.begin(il.assign(fc, il.failcont), this.cont(test, this.clamda(v, v, il.setfailcont(fc), this.cont(action, cont))));
      },
      'notp': function(cont, goal) {
        var fc, state, trail, v, v1;

        v = this.il_var('v');
        v1 = this.il_var('v');
        trail = this.il_var('trail');
        state = this.il_var('state');
        fc = this.il_var('fc');
        return il.begin(il.assign(trail, il.trail), il.assign(fc, il.failcont), il.assign(state, il.state), il.settrail(il.newTrail), il.setfailcont(il.clamda(v, il.assign(v1, v), il.undotrail(il.trail), il.settrail(trail), il.setstate(state), il.setfailcont(fc), cont.call(v1))), this.cont(goal, fc));
      },
      'repeat': function(cont) {
        return il.begin(il.setfailcont(cont), cont.call(null));
      },
      'cutable': function(cont, goal) {
        var cc, v, v1;

        cc = this.il_var('cutcont');
        v = this.il_var('v');
        v1 = this.il_var('v');
        return il.begin(il.assign(cc, il.cutcont), il.assign(il.cutcont, il.failcont), this.cont(goal, this.clamda(v, il.assign(v1, v), il.setcutcont(cc), cont.call(v1))));
      },
      'cut': function(cont) {
        return il.begin(il.setfailcont(il.cutcont), cont.call(null));
      },
      'findall': function(cont, goal, result, template) {
        var fc, result1, v, v1;

        fc = this.il_var('fc');
        v = this.il_var('v');
        v1 = this.il_var('v');
        if (result == null) {
          return il.begin(il.assign(fc, il.failcont), il.setfailcont(il.clamda(v, il.assign(v1, v), il.setfailcont(fc), cont.call(v1))), this.cont(goal, il.failcont));
        } else {
          result1 = this.il_var('result');
          return il.begin(il.assign(result1, []), il.assign(fc, il.failcont), il.setfailcont(il.clamda(v, il.assign(v1, v), il.if_(il.unify(result, result1), fc.call(v1), il.begin(il.setfailcont(fc), cont.call(null))))), this.cont(exp, this.clamda(v, il.assign(v1, v), il.push(result1, il.getvalue(template)), il.failcont.call(v1))));
        }
      },
      'once': function(cont, goal) {
        var fc, v, v1;

        fc = this.il_var('fc');
        v = this.il_var('v');
        v1 = this.il_var('v');
        return il.begin(il.assign(fc, il.failcont), this.cont(goal, this.clamda(v, il.assign(v1, v), il.setfailcont(fc), cont.call(v1))));
      },
      'parse': function(cont, exp, state) {
        var oldState, v, v1;

        v = this.il_var('v');
        v1 = this.il_var('v');
        oldState = this.il_var('state');
        return this.cont(state, this.clamda(v, il.assign(oldState, il.state), il.setstate(v), this.cont(exp, this.clamda(v, il.assign(v1, v), il.setstate(oldState), cont.call(v1)))));
      },
      'parsetext': function(cont, exp, text) {
        var oldState, v, v1;

        v = this.il_var('v');
        v1 = this.il_var('v');
        oldState = this.il_var('state');
        return this.cont(text, this.clamda(v, il.begin(il.assign(oldState, il.state), il.setstate(il.array(v, 0)), this.cont(exp, this.clamda(v, il.assign(v1, v), il.setstate(oldState), cont.call(v1))))));
      },
      'setstate': function(cont, state) {
        var v;

        v = this.il_var('v');
        return this.cont(state, this.clamda(v, il.setstate(v), cont.call(true)));
      },
      'settext': function(cont, text) {
        var v;

        v = this.il_var('v');
        return this.cont(text, this.clamda(v, il.setstate(il.array(v, 0)), cont.call(true)));
      },
      'setpos': function(cont, pos) {
        var v;

        v = this.il_var('v');
        return this.cont(pos, this.clamda(v, il.assign(il.index(il.state, 1), v), cont.call(true)));
      },
      'getstate': function(cont) {
        return cont.call(il.state);
      },
      'gettext': function(cont) {
        return cont.call(il.index(il.state, 0));
      },
      'getpos': function(cont) {
        return cont.call(il.index(il.state, 1));
      },
      'eoi': function(cont) {
        var data, pos;

        data = this.il_var('data');
        pos = this.il_var('pos');
        return il.begin(il.listassign(data, pos, il.state), il.if_(il.ge(pos, il.length(data)), cont.call(true), il.failcont.call(false)));
      },
      'boi': function(cont) {
        return il.if_(il.eq(il.index(il.state, 1), 0), cont.call(true), il.failcont.call(false));
      },
      'eol': function(cont) {
        var c, pos, text;

        text = this.il_var('text');
        pos = this.il_var('pos');
        c = this.il_var('c');
        return il.begin(il.listassign(text, pos, il.state), il.if_(il.ge(pos, il.length(text)), cont.call(true), il.begin(il.assign(c, il.index(text, pos, 1)), il.if_(il.or_(il.eq(c, "\r"), il.eq(c, "\n")), cont.call(true), il.failcont.call(false)))));
      },
      'bol': function(cont) {
        var c, pos, text;

        text = this.il_var('text');
        pos = this.il_var('pos');
        c = this.il_var('c');
        return il.begin(il.listassign(text, pos, il.state), il.if_(il.eq(pos, 0), cont.call(true), il.begin(il.assign(c, il.index(text, il.sub(pos, 1))), il.if_(il.or_(il.eq(c, "\r"), il.eq(c, "\n")), cont.call(true), il.failcont.call(false)))));
      },
      'step': function(cont, n) {
        var pos, text, v;

        v = this.il_var('v');
        text = this.il_var('text');
        pos = this.il_var('pos');
        return this.cont(n, this.clamda(v, il.listassign(text, pos, il.state), il.addassign(pos, v), il.setstate(il.array(text, pos)), cont.call(pos)));
      },
      'lefttext': function(cont) {
        return cont.call(il.slice(il.index(il.state, 0), il.index(il.state, 1)));
      },
      'subtext': function(cont, length, start) {
        var length1, length2, length3, pos, start1, start2, start3, text;

        text = this.il_var('text');
        pos = this.il_var('pos');
        start1 = this.il_var('start');
        length1 = this.il_var('length');
        start2 = this.il_var('start');
        length2 = this.il_var('length');
        start3 = this.il_var('start');
        length3 = this.il_var('length');
        return this.cont(length, this.clamda(length1, il.assign(length2, length1), this.cont(start, this.clamda(start1, il.assign(start2, start1), il.listassign(text, pos, il.state), il.begin(il.assign(start3, il.if_(il.ne(start2, null), start2, pos)), il.assign(length3, il.if_(il.ne(length2, null), length2, il.length(text))), cont.call(il.slice(text, start3, il.add(start3, length3))))))));
      },
      'nextchar': function(cont) {
        var pos, text;

        text = this.il_var('text');
        pos = this.il_var('pos');
        return il.begin(il.listassign(text, pos, il.state), cont.call(il.index(text, pos)));
      },
      'may': function(cont, exp) {
        return il.begin(il.appendFailcont(cont), this.cont(exp, cont));
      },
      'lazymay': function(cont, exp) {
        var fc, v;

        fc = this.il_var('fc');
        v = this.il_var('v');
        return il.begin(il.assign(fc, il.failcont), il.setfailcont(il.clamda(v, v, il.setfailcont(fc), this.cont(exp, cont))), cont.call(null));
      },
      'greedymay': function(cont, exp) {
        var fc, v, v1;

        fc = this.il_var('fc');
        v = this.il_var('v');
        v1 = this.il_var('v');
        return il.begin(il.assign(fc, il.failcont), il.setfailcont(il.clamda(v, il.assign(v1, v), il.setfailcont(fc), cont.call(v1))), this.cont(exp, this.clamda(v, il.assign(v1, v), il.setfailcont(fc), cont.call(v1))));
      },
      'any': function(cont, exp) {
        var anyCont, fc, state, trail, v, v1;

        fc = this.il_var('fc');
        trail = this.il_var('trail');
        state = this.il_var('state');
        anyCont = this.il_var('anyCont');
        v = this.il_var('v');
        v1 = this.il_var('v');
        return il.begin(il.assign(anyCont, il.recclamda(v, il.assign(fc, il.failcont), il.assign(trail, il.trail), il.assign(state, il.state), il.settrail(il.newTrail), il.setfailcont(il.clamda(v, il.assign(v1, v), il.undotrail(il.trail), il.settrail(trail), il.setstate(state), il.setfailcont(fc), cont.call(v1))), this.cont(exp, anyCont))), anyCont.call(null));
      },
      'lazyany': function(cont, exp) {
        var anyCont, anyFcont, fc, trail, v;

        fc = this.il_var('fc');
        trail = this.il_var('trail');
        v = this.il_var('v');
        anyCont = this.il_var('anyCont');
        anyFcont = this.il_var('anyFcont');
        return il.begin(il.local(trail), il.assign(anyCont, il.recclamda(v, il.internalnonlocalassign(trail, il.trail), il.settrail(il.newTrail), il.setfailcont(anyFcont), cont.call(null))), il.assign(anyFcont, il.recclamda(v, il.undotrail(il.trail), il.settrail(trail), il.setfailcont(fc), this.cont(exp, anyCont))), il.assign(fc, il.failcont), anyCont.call(null));
      },
      'greedyany': function(cont, exp) {
        var anyCont, fc, v, v1;

        fc = this.il_var('fc');
        anyCont = this.il_var('anyCont');
        v = this.il_var('v');
        v1 = this.il_var('v');
        return il.begin(il.assign(anyCont, il.recclamda(v, this.cont(exp, anyCont))), il.assign(fc, il.failcont), il.setfailcont(il.clamda(v, il.assign(v1, v), il.setfailcont(fc), cont.call(v1))), anyCont.call(null));
      },
      'parallel': function(cont, x, y, checkFunction) {
        var right, state, v, v1;

        if (checkFunction == null) {
          checkFunction = function(state, baseState) {
            return state[1] === baseState[1];
          };
        }
        state = this.il_var('state');
        right = this.il_var('right');
        v = this.il_var('v');
        v1 = this.il_var('v');
        return il.begin(il.assign(state, il.state), this.cont(x, this.clamda(v, v, il.assign(right, il.state), il.setstate(state), this.cont(y, this.clamda(v, il.assign(v1, v), il.if_(il.fun(checkFunction).call(il.state, right), cont.call(v1), il.failcont.call(v1)))))));
      },
      'follow': function(cont, item) {
        var state, v, v1;

        state = this.il_var('state');
        v = this.il_var('v');
        v1 = this.il_var('v');
        state = this.il_var('state');
        return il.begin(il.assign(state, il.state), this.cont(item, this.clamda(v, il.assign(v1, v), il.setstate(state), cont.call(v))));
      },
      'notfollow': function(cont, item) {
        var fc, state, v, v1;

        state = this.il_var('state');
        fc = this.il_var('fc');
        v = this.il_var('v');
        v1 = this.il_var('v');
        return il.begin(il.assign(fc, il.failcont), il.assign(state, il.state), il.setfailcont(cont), this.cont(item, this.clamda(v, il.assign(v1, v), il.setstate(state), fc.call(v1))));
      },
      'xxxchar': function(cont, item) {
        var c, data, pos, v, x;

        data = this.il_var('data');
        pos = this.il_var('pos');
        x = this.il_var('x');
        c = this.il_var('c');
        v = this.il_var('v');
        return this.cont(item, this.clamda(v, il.listassign(data, pos, il.state), il.if_(il.gt(pos, il.length(data)), il["return"](il.failcont.call(v))), il.begin(il.assign(x, il.deref(v)), il.assign(c, il.index(data, pos)), il.iff(il["instanceof"](x, il.symbol('Var')), il.begin(il.bind(x, c), il.setstate(il.array(data, il.add(pos, 1))), cont.call(il.add(pos, 1))), il.eq(x, c), il.begin(il.setstate(il.array(data, il.add(pos, 1))), cont.call(il.add(pos, 1))), il.attr(il.symbol('_'), il.symbol('isString')).call(x), il.if_(il.eq(il.length(x), 1), il.failcont.call(v), il["throw"](il["new"](il.symbol('ExpressionError').call(x)))), il["throw"](il["new"](il.symbol('TypeError').call(x)))))));
      },
      'spaces': function(cont, item) {
        return cont.call(il.spaces(il.solver));
      },
      'spaces0': function(cont, item) {
        return cont.call(il.spaces0(il.solver));
      }
    };

    Compiler = Compiler;

    for (name in il) {
      vop = il[name];
      try {
        instance = typeof vop === "function" ? vop() : void 0;
      } catch (_error) {
        e = _error;
        continue;
      }
      if (instance instanceof il.VirtualOperation && __indexOf.call(il.excludes, name) < 0) {
        (function(name, vop) {
          return Compiler.prototype.specials['vop_' + name] = function() {
            var args, compiler, cont, i, length, params, _i, _ref;

            cont = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
            compiler = this;
            length = args.length;
            params = (function() {
              var _i, _results;

              _results = [];
              for (i = _i = 0; 0 <= length ? _i < length : _i > length; i = 0 <= length ? ++_i : --_i) {
                _results.push(this.il_var('a' + i));
              }
              return _results;
            }).call(this);
            cont = cont.call(vop.apply(null, params));
            for (i = _i = _ref = length - 1; _i >= 0; i = _i += -1) {
              cont = (function(i, cont) {
                return compiler.cont(args[i], compiler.clamda(params[i], cont));
              })(i, cont);
            }
            return cont;
          };
        })(name, vop);
      }
    }

    _ref = ['char', 'followChars', 'notFollowChars', 'charWhen', 'stringWhile', 'stringWhile0', 'number', 'literal', 'followLiteral', 'quoteString'];
    _fn = function(name, vop) {
      return Compiler.prototype.specials[name] = function(cont, item) {
        var compiler, v;

        compiler = this;
        v = this.il_var('v');
        return compiler.cont(item, compiler.clamda(v, cont.call(il[name](il.solver, v))));
      };
    };
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      _fn(name, vop);
    }

    Compiler.prototype.optimize = function(exp, env) {
      var expOptimize;

      expOptimize = exp != null ? exp.optimize : void 0;
      if (expOptimize) {
        return expOptimize.call(exp, env, this);
      } else {
        return exp;
      }
    };

    Compiler.prototype.toCode = function(exp) {
      var exptoCode;

      exptoCode = exp != null ? exp.toCode : void 0;
      if (exptoCode) {
        return exptoCode.call(exp, this);
      } else {
        if (exp === void 0) {
          return 'undefined';
        } else if (exp === null) {
          return 'null';
        } else if (_.isNumber(exp)) {
          return exp.toString();
        } else if (_.isString(exp)) {
          return JSON.stringify(exp);
        } else if (exp === true) {
          return "true";
        } else if (exp === false) {
          return "false";
        } else if (_.isArray(exp)) {
          return JSON.stringify(exp);
        } else if (typeof exp === 'function') {
          return exp.toString();
        } else if (_.isObject(exp)) {
          return JSON.stringify(exp);
        } else {
          return exp.toString();
        }
      }
    };

    Compiler.prototype.expsCont = function(exps, cont) {
      var length, v;

      length = exps.length;
      if (length === 0) {
        throw new exports.TypeError(exps);
      } else if (length === 1) {
        return this.cont(exps[0], cont);
      } else {
        v = this.il_var('v');
        return this.cont(exps[0], this.clamda(v, v, this.expsCont(exps.slice(1), cont)));
      }
    };

    Compiler.prototype.quasiquote = function(exp, cont) {
      var head, i, length, quasilist, v, _j, _ref1;

      if (!_.isArray(exp)) {
        return cont.call(exp);
      }
      length = exp.length;
      if (length === 0) {
        return cont.call(exp);
      }
      head = exp[0];
      if (!_.isString(head)) {
        return cont.call(exp);
      }
      if (!this.specials.hasOwnProperty(head)) {
        return cont.call(exp);
      }
      head = exp[0];
      if (head === "unquote") {
        return this.cont(exp[1], cont);
      } else if (head === "unquote-slice") {
        return this.cont(exp[1], cont);
      } else if (head === "quote") {
        return cont.call(exp);
      } else if (head === "string") {
        return cont.call(exp);
      } else {
        quasilist = this.il_var('quasilist');
        v = this.il_var('v');
        cont = cont.call(quasilist);
        for (i = _j = _ref1 = exp.length - 1; _j >= 1; i = _j += -1) {
          e = exp[i];
          if (_.isArray(e) && e.length > 0 && e[0] === "unquote-slice") {
            cont = this.quasiquote(e, this.clamda(v, il.assign(quasilist, il.concat(quasilist, v)), cont));
          } else {
            cont = this.quasiquote(e, this.clamda(v, il.push(quasilist, v), cont));
          }
        }
        return il.begin(il.assign(quasilist, il.list(head)), cont);
      }
    };

    Compiler.prototype.substMacroArgs = function(exp, params) {
      var head, length;

      if (__indexOf.call(params, exp) >= 0) {
        return ['evalarg', exp];
      }
      if (!_.isArray(exp)) {
        return exp;
      }
      length = exp.length;
      if (length === 0) {
        return exp;
      }
      head = exp[0];
      if (!_.isString(head)) {
        return exp;
      }
      if (!this.specials.hasOwnProperty(head)) {
        return exp;
      }
      if (head === 'lambda' || head === 'macro') {
        params = ((function() {
          var _j, _len1, _results;

          if (__indexOf.call(exp[1], e) < 0) {
            _results = [];
            for (_j = 0, _len1 = params.length; _j < _len1; _j++) {
              e = params[_j];
              _results.push(e);
            }
            return _results;
          }
        })());
        return exp.slice(0, 2).concat((function() {
          var _j, _len1, _ref1, _results;

          _ref1 = exp.slice(2);
          _results = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            e = _ref1[_j];
            _results.push(this.substMacroArgs(e, params));
          }
          return _results;
        }).call(this));
      } else if (head === 'quote') {
        return exp;
      } else if (head === 'string') {
        return exp;
      } else if (head === 'quasiquote') {
        return exp;
      } else {
        return [exp[0]].concat((function() {
          var _j, _len1, _ref1, _results;

          _ref1 = exp.slice(1);
          _results = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            e = _ref1[_j];
            _results.push(this.substMacroArgs(e, params));
          }
          return _results;
        }).call(this));
      }
    };

    Compiler.prototype.interlang = function(term) {
      var head, length;

      if (_.isString(term)) {
        return il.userlocal(term);
      }
      if (!_.isArray(term)) {
        return term;
      }
      length = term.length;
      if (length === 0) {
        return term;
      }
      head = term[0];
      if (!_.isString(head)) {
        return term;
      }
      if (head === 'string') {
        return term[1];
      }
      return term;
    };

    return Compiler;

  })();

  exports.Env = Env = (function() {
    function Env(outer, bindings, vars) {
      var k, outerVariables, variables;

      this.outer = outer;
      this.bindings = bindings;
      this.variables = variables = {};
      for (k in bindings) {
        if (hasOwnProperty.call(bindings, k)) {
          variables[k] = true;
        }
      }
      if (this.outer) {
        outerVariables = this.outer.variables;
        for (k in outerVariables) {
          if (hasOwnProperty.call(outerVariables, k)) {
            variables[k] = true;
          }
        }
      }
      _.extend(this, vars);
    }

    Env.prototype.extend = function(vari, value, vars) {
      var bindings;

      bindings = {};
      bindings[vari.name] = value;
      return new Env(this, bindings, vars);
    };

    Env.prototype.extendBindings = function(bindings, vars) {
      return new Env(this, bindings, vars);
    };

    Env.prototype.lookup = function(vari) {
      var bindings, name, outer;

      bindings = this.bindings;
      name = vari.name;
      if (bindings.hasOwnProperty(name)) {
        return bindings[name];
      } else {
        outer = this.outer;
        if (outer) {
          return outer.lookup(vari);
        } else {
          return vari;
        }
      }
    };

    Env.prototype.locals = function() {
      return this._locals || this.outer.locals();
    };

    Env.prototype.nonlocals = function() {
      return this._nonlocals || this.outer.nonlocals();
    };

    Env.prototype.userlocals = function() {
      return this._userlocals || this.outer.userlocals();
    };

    Env.prototype.usernonlocals = function() {
      return this._usernonlocals || this.outer.usernonlocals();
    };

    return Env;

  })();

  exports.Error = Error = (function() {
    function Error(exp, message, stack) {
      this.exp = exp;
      this.message = message != null ? message : '';
      this.stack = stack != null ? stack : this;
    }

    Error.prototype.toString = function() {
      return "" + this.constructor.name + ": " + this.exp + " >>> " + this.message;
    };

    return Error;

  })();

  exports.TypeError = TypeError = (function(_super) {
    __extends(TypeError, _super);

    function TypeError() {
      _ref = TypeError.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    return TypeError;

  })(Error);

  exports.ArgumentError = ArgumentError = (function(_super) {
    __extends(ArgumentError, _super);

    function ArgumentError() {
      _ref1 = ArgumentError.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    return ArgumentError;

  })(Error);

  exports.ArityError = ArityError = (function(_super) {
    __extends(ArityError, _super);

    function ArityError() {
      _ref2 = ArityError.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    return ArityError;

  })(Error);

}).call(this);

/*
//@ sourceMappingURL=core.map
*/
