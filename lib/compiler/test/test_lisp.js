// Generated by CoffeeScript 1.6.2
(function() {
  var assign, begin, core, if_, quote, solve, xexports, _, _ref,
    __slice = [].slice;

  _ = require("underscore");

  solve = (core = require('../core')).solve;

  _ref = require('../util'), quote = _ref.quote, begin = _ref.begin, assign = _ref.assign, if_ = _ref.if_;

  xexports = {};

  xexports.Test = {
    "test assign inc dec": function(test) {
      var a;

      a = vari('a');
      test.equal(solve(begin(assign(a, 1), block('a', if_(eq(a, 10000000), break_('a', a)), inc(a), continue_('a')))), 10000000);
      return test.done();
    }
  };

  xexports.Test = {
    "test eval_ quote": function(test) {
      test.equal(solve(quote(1)), 1);
      test.equal(solve(eval_(quote(1))), 1);
      return test.done();
    },
    "test assign inc dec": function(test) {
      var a;

      a = vari('a');
      test.equal(solve(begin(assign(a, 1), a)), 1);
      test.equal(solve(begin(assign(a, 1), inc(a))), 2);
      return test.done();
    }
  };

  xexports.Test = {
    "test begin": function(test) {
      test.equal(solve(begin(1)), 1);
      test.equal(solve(begin(1, 2)), 2);
      test.equal(solve(begin(1, 2, 3)), 3);
      return test.done();
    }
  };

  exports.Test = {
    "test if_": function(test) {
      test.equal(solve(if_(1, 2, 3)), 2);
      test.equal(solve(if_(0, 2, 3)), 3);
      return test.done();
    }
  };

  xexports.Test = {
    "test iff": function(test) {
      test.equal(solve(iff([[1, 2]], 3)), 2);
      test.equal(solve(iff([[0, 2], [1, 3]], 5)), 3);
      return test.done();
    },
    "test block break continue": function(test) {
      var x;

      test.equal(solve(block('a', 1)), 1);
      test.equal(solve(block('a', break_('a', 2), 1)), 2);
      test.equal(solve(block('a', block('b', break_('b', 2), 1), 3)), 3);
      x = vari('x');
      test.equal(solve(begin(assign(x, 1), block('a', if_(eq(x, 5), break_('a', x)), inc(x), continue_('a')))), 5);
      return test.done();
    },
    "test loop while until": function(test) {
      var x;

      x = vari('x');
      test.equal(solve(begin(assign(x, 1), block('x', if_(eq(x, 5), break_('x', x)), print_(x), inc(x), continue_('x')))), 5);
      test.equal(solve(begin(assign(x, 1), block('x', if_(eq(x, 5), break_(x)), print_(x), inc(x), continue_()))), 5);
      test.equal(solve(begin(assign(x, 1), loop_('x', if_(eq(x, 5), break_('x', x)), print_(x), inc(x)))), 5);
      test.equal(solve(begin(assign(x, 1), loop_('x', print_(x), if_(eq(x, 5), break_(x)), inc(x)))), 5);
      test.equal(solve(begin(assign(x, 1), while_('x', le(x, 5), print_(x), inc(x)))), null);
      test.equal(solve(begin(assign(x, 1), until_('x', print_(x), inc(x), eq(x, 5)))), null);
      return test.done();
    },
    "test catch throw": function(test) {
      var a;

      a = vari('a');
      test.equal(solve(catch_(1, 2)), 2);
      test.equal(solve(catch_(1, throw_(1, 2), 3)), 2);
      return test.done();
    },
    "test protect": function(test) {
      var a;

      a = vari('a');
      test.equal(solve(block('foo', protect(break_('foo', 1), print_(2)))), 1);
      test.equal(solve(block('foo', protect(break_('foo', 1), print_(2), print_(3)))), 1);
      return test.done();
    },
    "test callcc": function(test) {
      test.equal(solve(begin(callcc(function(k) {
        return k(null);
      }), add(1, 2))), 3);
      return test.done();
    }
  };

  xexports.Test = {
    "test callfc": function(test) {
      var a, x;

      a = null;
      solve(orp(callfc(function(k) {
        return a = k;
      }), add(1, 2)));
      test.equal(a(null), 3);
      x = vari('x');
      x.binding = 5;
      solve(orp(callfc(function(k) {
        return a = k;
      }), add(x, 2)));
      test.equal(a(null), 7);
      return test.done();
    },
    "test quasiquote": function(test) {
      var a;

      test.equal(solve(qq(1)), 1);
      a = add(1, 2);
      test.deepEqual(solve(qq(a)), a);
      test.deepEqual(solve(qq(uq(a))), 3);
      test.deepEqual(solve(qq(uqs([1, 2]))), new UnquoteSliceValue([1, 2]));
      test.deepEqual(solve(qq(add(uqs([1, 2])))), a);
      return test.done();
    },
    "test argsCont": function(test) {
      var incall;

      incall = fun(-1, function() {
        var args;

        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return _.map(args, function(x) {
          return x + 1;
        });
      });
      test.deepEqual(solve(incall(1)), [2]);
      test.deepEqual(solve(incall(1, 2)), [2, 3]);
      test.deepEqual(solve(incall(1, 2, 3)), [2, 3, 4]);
      test.deepEqual(solve(incall(1, 2, 3, 4)), [2, 3, 4, 5]);
      test.deepEqual(solve(incall(1, 2, 3, 4, 5)), [2, 3, 4, 5, 6]);
      test.deepEqual(solve(incall(1, 2, 3, 4, 5, 6)), [2, 3, 4, 5, 6, 7]);
      test.deepEqual(solve(incall(1, 2, 3, 4, 5, 6, 7)), [2, 3, 4, 5, 6, 7, 8]);
      test.deepEqual(solve(incall(1, 2, 3, 4, 5, 6, 7, 8)), [2, 3, 4, 5, 6, 7, 8, 9]);
      test.deepEqual(solve(incall(1, 2, 3, 4, 5, 6, 7, 8, 9)), [2, 3, 4, 5, 6, 7, 8, 9, 10]);
      return test.done();
    }
  };

}).call(this);

/*
//@ sourceMappingURL=test_lisp.map
*/
