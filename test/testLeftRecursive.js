// Generated by CoffeeScript 1.6.2
(function() {
  var BaseParser, Parser1, Parser2, xexports,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseParser = require("../lib/leftrecursive.js").BaseParser;

  xexports = {};

  Parser1 = (function(_super) {
    __extends(Parser1, _super);

    function Parser1() {
      this.A = __bind(this.A, this);      this.Root = this.A = this.recursive('A', this.A);
    }

    Parser1.prototype.A = function(start) {
      var memo;

      return (memo = this.memo('A')(start)) && this.char('x')(this.cursor) && memo + 'x' || memo || this.char('a')(start);
    };

    return Parser1;

  })(BaseParser);

  Parser2 = (function(_super) {
    __extends(Parser2, _super);

    function Parser2() {
      this.B = __bind(this.B, this);
      this.A = __bind(this.A, this);      this.A = this.recursive('A');
      this.B = this.recursive('B');
      this.Root = this.A;
    }

    Parser2.prototype.A = function(start) {
      var memo;

      return (memo = this.look('B')(start)) && this.char('x')(this.cursor) && memo + 'x' || memo || this.char('a')(start);
    };

    Parser2.prototype.B = function(start) {
      return this.look('A')(start) || this.char('b')(start);
    };

    return Parser2;

  })(BaseParser);

  exports.Test = {
    "test A: Ax|a": function(test) {
      var parse;

      parse = function(text) {
        return new Parser1().parse(text);
      };
      test.equal(parse('a'), 'a');
      test.equal(parse('ax'), 'ax');
      test.equal(parse('axx'), 'axx');
      test.equal(parse('axxx'), 'axxx');
      return test.done();
    }
  };

  exports.Test = {
    "test A: Ax|a; B:A|b": function(test) {
      var parse;

      parse = function(text) {
        return new Parser2().parse(text);
      };
      test.equal(parse('a'), 'a');
      test.equal(parse('ax'), 'ax');
      test.equal(parse('axx'), 'axx');
      test.equal(parse('axxx'), 'axxx');
      test.equal(parse('bxxx'), 'bxxx');
      test.equal(parse('fg'), void 0);
      test.equal(parse(''), void 0);
      return test.done();
    }
  };

}).call(this);

/*
//@ sourceMappingURL=testLeftRecursive.map
*/
