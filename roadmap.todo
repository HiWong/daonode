just javascript:
  ✔ function without cont as parameter @done (13-06-28 07:57)
  ✔ augment assign @done (13-06-17 15:32)
  ☐ javascript while, javascript for
  ☐ javascript try/catch
  ✔ throw @done (13-06-29 15:03)
  ✔ javascript's new @done (13-06-22 21:27)
  ☐ toCode: remove unnecessary parenthesis by using precedence of operator
optimization:
  ☐ assign optimization
  ☐ v = v, unnessary pure expression statement
  ☐ loop optimization: assign, extract computation
  ☐ tail recursive
  ✔ il.clamda can replace parmenter v directly @done (13-07-02 16:09)
  ☐ optimize parser terminal's interlang vop
  ✔ il.equalcont @done (13-06-23 21:03)
lisp features:
  ✔ quote, eval @done (13-06-27 18:04)
  ✔ lamda @done (13-06-27 18:05)
  ✔ block/break/continue @done (13-06-27 18:04)
  ✔ catch/throw @done (13-06-18 08:53)
  ✔ unwind-protect @done (13-06-18 08:53)
  ✔ callcc @done (13-06-18 10:58)
logic features:
  ✔ logic var @done (13-06-19 17:56)
  ✔ unify @done (13-06-19 17:18)
  ✔ logic or @done (13-06-19 10:32)
  ✔ fail @done (13-06-19 10:32)
  ✔ logic negation, repeat @done (13-06-19 15:02)
  ✔ findall @done (13-06-20 14:04)
  ✔ once, ifp, etc. @done (13-06-26 21:54)
    ☐ test
  ✔ callfc @done (13-06-26 21:54)
    ☐ test
  ☐ Cons, UObject, UArray
parser features:
  ✔ parser state @done (13-06-21 21:32)
  ✔ test parsetext, settext @done (13-06-23 20:50)
  ✔ low level primitive @done (13-06-21 21:32)
    ✔ test @done (13-06-24 11:31)
  ✔ terminals @done (13-06-22 21:26)
    ✔ test char, number, literal @done (13-06-23 18:19)
  ✔ follow, notfollow, parallel, may, any, some, times, seplist @done (13-06-26 18:38)
    ✔ follow, notfollow, parallel @done (13-06-26 09:50)
    ✔ any @done (13-06-24 22:19)
    ✔ test may(normal, lazy, greedy) @done (13-06-24 18:24)
    ✔ some @done (13-06-25 10:41)
    ✔ times @done (13-06-25 20:58)
    ✔ seplist @done (13-06-26 18:38)
  ✔ dummy var @done (13-06-24 21:21)

