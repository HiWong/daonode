// Generated by CoffeeScript 1.6.2
(function() {
  var clamda, core, fun, il, special,
    __slice = [].slice;

  core = require("../core");

  clamda = core.clamda;

  il = require("../interlang");

  fun = core.fun;

  special = core.special;

  exports.print_ = special(null, 'print', function() {
    var args, compiler, cont;

    compiler = arguments[0], cont = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
    return compiler.argsCont(args, clamda(args, il.print.apply(il, args), il["return"](cont, null)));
  });

  exports.eq = special(2, 'eq', function(compiler, cont, x, y) {
    var x1, y1;

    x1 = compiler.vari('x');
    y1 = compiler.vari('y');
    return compiler.cont(x, clamda(x1, compiler.cont(y, clamda(y1, cont.call(il.eq(x1, y1))).call(null)).call(null)));
  });

  exports.ne = special(2, 'ne', function(compiler, cont, x, y) {
    var xcont, ycont;

    ycont = compiler.cont(y, function(v) {
      return cont(x !== v);
    });
    xcont = function(v) {
      x = v;
      return ycont(null);
    };
    return compiler.cont(x, xcont);
  });

  exports.lt = special(2, 'lt', function(compiler, cont, x, y) {
    var xcont, ycont;

    ycont = compiler.cont(y, function(v) {
      return cont(x <= v);
    });
    xcont = function(v) {
      x = v;
      return ycont(null);
    };
    return compiler.cont(x, xcont);
  });

  exports.le = special(2, 'le', function(compiler, cont, x, y) {
    var xcont, ycont;

    ycont = compiler.cont(y, function(v) {
      return cont(x <= v);
    });
    xcont = function(v) {
      x = v;
      return ycont(null);
    };
    return compiler.cont(x, xcont);
  });

  exports.gt = special(2, 'gt', function(compiler, cont, x, y) {
    var xcont, ycont;

    ycont = compiler.cont(y, function(v) {
      return cont(x > v);
    });
    xcont = function(v) {
      x = v;
      return ycont(null);
    };
    return compiler.cont(x, xcont);
  });

  exports.ge = special(2, 'ge', function(compiler, cont, x, y) {
    var xcont, ycont;

    ycont = compiler.cont(y, function(v) {
      return cont(x >= v);
    });
    xcont = function(v) {
      x = v;
      return ycont(null);
    };
    return compiler.cont(x, xcont);
  });

  exports.add = special(2, 'add', function(compiler, cont, x, y) {
    var xcont, ycont;

    ycont = compiler.cont(y, function(v) {
      return cont(x + v);
    });
    xcont = function(v) {
      x = v;
      return ycont(null);
    };
    return compiler.cont(x, xcont);
  });

  exports.sub = special(2, 'sub', function(compiler, cont, x, y) {
    var xcont, ycont;

    ycont = compiler.cont(y, function(v) {
      return cont(x - v);
    });
    xcont = function(v) {
      x = v;
      return ycont(null);
    };
    return compiler.cont(x, xcont);
  });

  exports.mul = special(2, 'mul', function(compiler, cont, x, y) {
    var xcont, ycont;

    ycont = compiler.cont(y, function(v) {
      return cont(x * v);
    });
    xcont = function(v) {
      x = v;
      return ycont(null);
    };
    return compiler.cont(x, xcont);
  });

  exports.div = special(2, 'div', function(compiler, cont, x, y) {
    var xcont, ycont;

    ycont = compiler.cont(y, function(v) {
      return cont(x / v);
    });
    xcont = function(v) {
      x = v;
      return ycont(null);
    };
    return compiler.cont(x, xcont);
  });

  exports.mod = special(2, 'mod', function(compiler, cont, x, y) {
    var xcont, ycont;

    ycont = compiler.cont(y, function(v) {
      return cont(x % v);
    });
    xcont = function(v) {
      x = v;
      return ycont(null);
    };
    return compiler.cont(x, xcont);
  });

  exports.and_ = special(2, 'and_', function(compiler, cont, x, y) {
    var xcont, ycont;

    ycont = compiler.cont(y, function(v) {
      return cont(x && v);
    });
    xcont = function(v) {
      x = v;
      return ycont(null);
    };
    return compiler.cont(x, xcont);
  });

  exports.or_ = special(2, 'or_', function(compiler, cont, x, y) {
    var xcont, ycont;

    ycont = compiler.cont(y, function(v) {
      return cont(x && v);
    });
    xcont = function(v) {
      x = v;
      return ycont(null);
    };
    return compiler.cont(x, xcont);
  });

  exports.not_ = special(1, 'not_', function(compiler, cont, x) {
    return compiler.cont(x, function(v) {
      return cont(!v);
    });
  });

  exports.lshift = special(2, 'lshift', function(compiler, cont, x, y) {
    var xcont, ycont;

    ycont = compiler.cont(y, function(v) {
      return cont(x << v);
    });
    xcont = function(v) {
      x = v;
      return ycont(null);
    };
    return compiler.cont(x, xcont);
  });

  exports.rshift = special(2, 'rshift', function(compiler, cont, x, y) {
    var xcont, ycont;

    ycont = compiler.cont(y, function(v) {
      return cont(x >> v);
    });
    xcont = function(v) {
      x = v;
      return ycont(null);
    };
    return compiler.cont(x, xcont);
  });

  exports.bitand = special(2, 'bitand', function(compiler, cont, x, y) {
    var xcont, ycont;

    ycont = compiler.cont(y, function(v) {
      return cont(x & v);
    });
    xcont = function(v) {
      x = v;
      return ycont(null);
    };
    return compiler.cont(x, xcont);
  });

  exports.bitor = special(2, 'bitor', function(compiler, cont, x, y) {
    var xcont, ycont;

    ycont = compiler.cont(y, function(v) {
      return cont(x | v);
    });
    xcont = function(v) {
      x = v;
      return ycont(null);
    };
    return compiler.cont(x, xcont);
  });

  exports.bitnot = special(1, 'not_', function(compiler, cont, x) {
    return compiler.cont(x, function(v) {
      return cont(~v);
    });
  });

  exports.inc = special(1, 'inc', function(compiler, cont, vari) {
    return function(v) {
      return cont(++vari.binding);
    };
  });

  exports.inc2 = special(1, 'inc2', function(compiler, cont, vari) {
    return function(v) {
      vari.binding++;
      return cont(++vari.binding);
    };
  });

  exports.dec = special(1, 'dec', function(compiler, cont, vari) {
    return function(v) {
      return cont(--vari.binding);
    };
  });

  exports.dec2 = special(1, 'dec2', function(compiler, cont, vari) {
    return function(v) {
      vari.binding--;
      return cont(--vari.binding);
    };
  });

  exports.getvalue = special(1, 'getvalue', function(compiler, cont, x) {
    return compiler.cont(x, function(v) {
      return cont(compiler.trail.getvalue(v));
    });
  });

  exports.length = special(1, 'length', function(compiler, cont, x) {
    return compiler.cont(x, function(v) {
      return cont(v.length);
    });
  });

  exports.neg = special(1, 'neg', function(compiler, cont, x) {
    return compiler.cont(x, function(v) {
      return cont(-v);
    });
  });

  exports.abs = special(1, 'abs', function(compiler, cont, x) {
    return compiler.cont(x, function(v) {
      return cont(Math.abs(v));
    });
  });

  exports.index = special(2, 'index', function(compiler, cont, x, y) {
    var xcont, ycont;

    ycont = compiler.cont(y, function(v) {
      return cont(x[y]);
    });
    xcont = function(v) {
      x = v;
      return ycont(null);
    };
    return compiler.cont(x, xcont);
  });

  exports.first = exports.head = special(1, 'first', function(compiler, cont, x) {
    return compiler.cont(x, function(v) {
      return cont(v[0]);
    });
  });

  exports.tail = special(1, 'tail', function(compiler, cont, x) {
    return compiler.cont(x, function(v) {
      return cont(v.slice(1));
    });
  });

  exports.second = special(1, 'second', function(compiler, cont, x) {
    return compiler.cont(x, function(v) {
      return cont(v[1]);
    });
  });

  exports.third = special(1, 'third', function(compiler, cont, x) {
    return compiler.cont(x, function(v) {
      return cont(v[2]);
    });
  });

  exports.concat = special(2, 'concat', function(compiler, cont, x, y) {
    var xcont, ycont;

    ycont = compiler.cont(y, function(v) {
      return cont(x.concat(y));
    });
    xcont = function(v) {
      x = v;
      return ycont(null);
    };
    return compiler.cont(x, xcont);
  });

  exports.list = special([], 'list', function() {
    var args, compiler, cont;

    compiler = arguments[0], cont = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
    return compiler.argsCont(args, cont);
  });

  exports.push = special(2, 'push', function(compiler, cont, x, y) {
    var xcont, ycont;

    ycont = compiler.cont(y, function(v) {
      return cont(x.push(v));
    });
    xcont = function(v) {
      x = v;
      return ycont(null);
    };
    return compiler.cont(x, xcont);
  });

  exports.pushp = special(2, 'pushp', function(compiler, cont, x, y) {
    var xcont, ycont;

    ycont = compiler.cont(y, function(v) {
      var fc;

      fc = compiler.failcont;
      compiler.failcont = function(v) {
        x.pop();
        return fc(v);
      };
      return cont(x.push(v));
    });
    xcont = function(v) {
      x = v;
      return ycont(null);
    };
    return compiler.cont(x, xcont);
  });

  exports.free = special(1, 'freep', function(compiler, cont, x) {
    return function(v) {
      return cont(compiler.trail.deref(x) instanceof Var);
    };
  });

  exports.toString = special(1, 'toString', function(compiler, cont, x) {
    return compiler.cont(x, function(v) {
      return cont((v != null ? typeof v.toString === "function" ? v.toString() : void 0 : void 0) || JSON.stringify(v));
    });
  });

}).call(this);

/*
//@ sourceMappingURL=general.map
*/
