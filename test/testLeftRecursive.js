// Generated by CoffeeScript 1.6.2
(function() {
  var a, b, char, hasOwnProperty, p, parse1, parse2, parse3, parser, prepareGrammar, setRules, x, xexports, _ref;

  _ref = parser = p = require("../lib/leftRecursive.js"), prepareGrammar = _ref.prepareGrammar, char = _ref.char, setRules = _ref.setRules;

  hasOwnProperty = Object.hasOwnProperty;

  a = char('a');

  b = char('b');

  x = char('x');

  parse1 = function(text) {
    var rules;

    rules = {
      A: function(start) {
        var m;

        return (m = rules.A(start)) && x(p.cur()) && m + 'x' || m || a(start);
      }
    };
    return parser.parse(text, rules['A'], rules);
  };

  parse2 = function(text) {
    var rules;

    rules = {
      A: function(start) {
        var m;

        return (m = rules.B(start)) && x(p.cur()) && m + 'x' || m || a(start);
      },
      B: function(start) {
        return rules.A(start) || b(start);
      }
    };
    return parser.parse(text, rules['A'], rules);
  };

  parse3 = function(text) {
    var rules;

    rules = {
      A: function(start) {
        var m;

        return (m = rules.B(start)) && x(p.cur()) && m + 'x' || m || a(start);
      },
      B: function(start) {
        return rules.C(start);
      },
      C: function(start) {
        return rules.A(start) || b(start);
      }
    };
    return parser.parse(text, rules['A'], rules);
  };

  xexports = {};

  exports.Test = {
    "test A: Ax|a": function(test) {
      var parse;

      parse = parse1;
      test.equal(parse('a'), 'a');
      test.equal(parse('ax'), 'ax');
      test.equal(parse('axx'), 'axx');
      test.equal(parse('axxx'), 'axxx');
      return test.done();
    }
  };

  exports.Test = {
    "test A: Bx|a; B:A|b": function(test) {
      var parse;

      parse = parse2;
      test.equal(parse('ax'), 'ax');
      return test.done();
    }
  };

  exports.Test = {
    "test A: Bx|a; B:C; C:A|b": function(test) {
      var parse;

      parse = parse3;
      test.equal(parse('a'), 'a');
      return test.done();
    }
  };

  xexports.Test = {
    "test compute Left Recursive": function(test) {
      var g, grammar, map;

      grammar = g = {
        A: function(start) {
          return g.B(start) && g.C(p.cur) || g.D(start) && g.E(p.cur) || g.E(start);
        },
        B: function(start) {
          return g.A(start);
        },
        C: function(start) {},
        D: function(start) {},
        E: function(start) {}
      };
      map = prepareGrammar(grammar);
      test.deepEqual(map['A'], ['B', 'A', 'D', 'E']);
      test.deepEqual(map['B'], ['A', 'B', 'D', 'E']);
      test.equal(hasOwnProperty.call(parser.recursiveRules, 'A'), true);
      test.equal(hasOwnProperty.call(parser.recursiveRules, 'B'), true);
      test.equal(hasOwnProperty.call(parser.recursiveRules, 'D'), false);
      return test.done();
    }
  };

}).call(this);

/*
//@ sourceMappingURL=testLeftRecursive.map
*/
