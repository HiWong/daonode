// Generated by CoffeeScript 1.6.2
(function() {
  exports.operator = function(solver) {
    var c, c1, length, pos, text, _ref;

    _ref = solver.state, text = _ref[0], pos = _ref[1];
    length = text.length;
    if (pos >= length) {
      return solver.failcont(pos);
    }
    c = text[pos];
    switch (c) {
      case '+':
        solver.state = [text, pos + 1];
        return 'vop_add';
      case '-':
        solver.state = [text, pos + 1];
        return 'vop_sub';
      case '*':
        solver.state = [text, pos + 1];
        return 'vop_mul';
      case '/':
        solver.state = [text, pos + 1];
        return 'vop_div';
      case '%':
        solver.state = [text, pos + 1];
        return 'vop_mod';
      case '=':
        c1 = text[pos + 1];
        if (c1 === '=') {
          solver.state = [text, pos + 2];
          return 'vop_eq';
        } else {
          return solver.failcont(pos);
        }
        break;
      case '!':
        c1 = text[pos + 1];
        if (c1 === '=') {
          solver.state = [text, pos + 2];
          return 'vop_ne';
        } else {
          return solver.failcont(pos);
        }
        break;
      case '>':
        c1 = text[pos + 1];
        if (c1 === '=') {
          solver.state = [text, pos + 2];
          return 'vop_ge';
        } else if (c1 === '>') {
          solver.state = [text, pos + 2];
          return 'vop_rshift';
        } else {
          solver.state = [text, pos + 1];
          return 'vop_gt';
        }
        break;
      case '<':
        c1 = text[pos + 1];
        if (c1 === '=') {
          solver.state = [text, pos + 2];
          return 'vop_le';
        } else if (c1 === '<') {
          solver.state = [text, pos + 2];
          return 'vop_lshift';
        } else {
          solver.state = [text, pos + 1];
          return 'vop_lt';
        }
    }
  };

}).call(this);

/*
//@ sourceMappingURL=daoutil.map
*/
