// Generated by CoffeeScript 1.6.2
(function() {
  var andp, array, assign, atomExpr, begin, binaryExpr, char, compile, core, daoutil, direct, funcall, grammar, identifier, il, jsfun, lamda, nonlocal, number, op, operator, orp, parsetext, quoteString, repl, solve, solver, string, unaryExpr, util, x, y, z, _, _ref;

  _ = require("underscore");

  solve = (core = require('./core')).solve;

  _ref = util = require('./util'), string = _ref.string, char = _ref.char, number = _ref.number, parsetext = _ref.parsetext, quoteString = _ref.quoteString, identifier = _ref.identifier, begin = _ref.begin, nonlocal = _ref.nonlocal, direct = _ref.direct, jsfun = _ref.jsfun, lamda = _ref.lamda, funcall = _ref.funcall, andp = _ref.andp, orp = _ref.orp, assign = _ref.assign, array = _ref.array;

  operator = (daoutil = require('./daoutil')).operator;

  il = require('./interlang');

  repl = function() {};

  exports.compile = compile = function(code) {
    var path, sexpr;

    sexpr = core.solve(parsetext(grammar, string(exp)));
    path = process.cwd() + '/lib/compiled.js';
    return core.compile(sexpr, path);
  };

  exports.solve = solve = function(exp) {
    var sexpr;

    sexpr = core.solve(parsetext(grammar, string(exp)));
    return core.solve(sexpr);
  };

  solver = 'solver';

  x = 'x';

  y = 'y';

  z = 'z';

  op = 'op';

  atomExpr = 'atomExpr';

  unaryExpr = 'unaryExpr';

  binaryExpr = 'binaryExpr';

  grammar = begin(direct(il.begin(il.assign(il.uservar('daoutil'), il.require('./daoutil')), il.assign(il.uservar('binaryOperator'), il.attr(il.uservar('daoutil'), il.symbol('binaryOperator'))), il.assign(il.uservar('unaryOperator'), il.attr(il.uservar('daoutil'), il.symbol('unaryOperator'))), il.assign(il.uservar('suffixOperator'), il.attr(il.uservar('daoutil'), il.symbol('suffixOperator'))))), assign(atomExpr, lamda([], orp(identifier(), quoteString(), number()))), assign(unaryExpr, lamda([], orp(andp(assign(op, funcall('unaryOperator', solver)), assign(x, funcall(atomExpr)), array(op, x)), andp(assign(x, funcall(atomExpr)), orp(andp(assign(op, funcall('suffixOperator', solver)), array(op, x)), x))))), assign(binaryExpr, lamda([], andp(assign(x, funcall(atomExpr)), orp(andp(assign(op, funcall('binaryOperator', solver)), assign(y, funcall(atomExpr)), array(op, x, y)), x)))), funcall(binaryExpr));

}).call(this);

/*
//@ sourceMappingURL=dao.map
*/
