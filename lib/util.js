// Generated by CoffeeScript 1.6.2
(function() {
  var INDEX, ObjecttoString, andp, any, assign, begin, bind, block, break_, char, charIn, charWhen, continue_, defaultLabel, funcall, getvalue, greedyany, if_, iff, inc, incp, index, io, isArray, isInteger, isLabel, isNumber, isObject, isString, jsbreak, jscontinue, jsfun, lambda, lazyany, list, macro, makeLabel, name, not_, orp, push, pushp, quasiquote, sideEffect, string, stringIn, stringIn0, stringWhile, stringWhile0, times, unify, uniqueconst, uniquevar, unquote, unquoteSlice, vari, variable, _i, _j, _len, _ref, _ref1, _results,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ObjecttoString = Object.prototype.toString;

  exports.isNumber = isNumber = function(x) {
    return ObjecttoString.call(x) === '[object Number]';
  };

  exports.isInteger = isInteger = function(x) {
    return ObjecttoString.call(x) === '[object Number]' && x % 1 === 0;
  };

  exports.isString = isString = function(x) {
    return ObjecttoString.call(x) === '[object String]';
  };

  exports.isArray = isArray = function(x) {
    return ObjecttoString.call(x) === '[object Array]';
  };

  exports.isObject = isObject = function(x) {
    return x === Object(x);
  };

  _ref = (function() {
    _results = [];
    for (_i = 1; _i < 1000; _i++){ _results.push(_i); }
    return _results;
  }).apply(this), exports.QUOTE = _ref[0], exports.EVAL = _ref[1], exports.STRING = _ref[2], exports.BEGIN = _ref[3], exports.NONLOCAL = _ref[4], exports.VARIABLE = _ref[5], exports.UNIQUEVAR = _ref[6], exports.UNIQUECONST = _ref[7], exports.ASSIGN = _ref[8], exports.AUGMENTASSIGN = _ref[9], exports.INC = _ref[10], exports.SUFFIXINC = _ref[11], exports.DEC = _ref[12], exports.SUFFIXDEC = _ref[13], exports.INCP = _ref[14], exports.SUFFIXINCP = _ref[15], exports.DECP = _ref[16], exports.SUFFIXDECP = _ref[17], exports.IF = _ref[18], exports.SWITCH = _ref[19], exports.JSFUN = _ref[20], exports.DIRECT = _ref[21], exports.PURE = _ref[22], exports.EFFECT = _ref[23], exports.IO = _ref[24], exports.LAMDA = _ref[25], exports.MACRO = _ref[26], exports.EVALARG = _ref[27], exports.ARRAY = _ref[28], exports.UARRAY = _ref[29], exports.MAKEOBJECT = _ref[30], exports.UOBJECT = _ref[31], exports.CONS = _ref[32], exports.FUNCALL = _ref[33], exports.MACROCALL = _ref[34], exports.JSFUNCALL = _ref[35], exports.FOR = _ref[36], exports.FORIN = _ref[37], exports.FOROF = _ref[38], exports.TRY = _ref[39], exports.BLOCK = _ref[40], exports.BREAK = _ref[41], exports.CONTINUE = _ref[42], exports.CATCH = _ref[43], exports.THROW = _ref[44], exports.UNWINDPROTECT = _ref[45], exports.CALLCC = _ref[46], exports.CALLFC = _ref[47], exports.QUASIQUOTE = _ref[48], exports.UNQUOTE = _ref[49], exports.UNQUOTESLICE = _ref[50], exports.PUSH = _ref[51], exports.LIST = _ref[52], INDEX = _ref[53], exports.LOGICVAR = _ref[54], exports.DUMMYVAR = _ref[55], exports.UNIFY = _ref[56], exports.NOTUNIFY = _ref[57], exports.IS = _ref[58], exports.BIND = _ref[59], exports.GETVALUE = _ref[60], exports.SUCCEED = _ref[61], exports.FAIL = _ref[62], exports.PUSHP = _ref[63], exports.ORP = _ref[64], exports.IFP = _ref[65], exports.NOTP = _ref[66], exports.REPEAT = _ref[67], exports.CUTABLE = _ref[68], exports.CUT = _ref[69], exports.FINDALL = _ref[70], exports.ONCE = _ref[71], exports.PARSE = _ref[72], exports.PARSETEXT = _ref[73], exports.SETSTATE = _ref[74], exports.SETTEXT = _ref[75], exports.SETPOS = _ref[76], exports.GETSTATE = _ref[77], exports.GETTEXT = _ref[78], exports.GETPOS = _ref[79], exports.EOI = _ref[80], exports.BOI = _ref[81], exports.EOL = _ref[82], exports.BOL = _ref[83], exports.STEP = _ref[84], exports.LEFTTEXT = _ref[85], exports.SUBTEXT = _ref[86], exports.NEXTCHAR = _ref[87], exports.MAY = _ref[88], exports.LAZYMAY = _ref[89], exports.GREEDYMAY = _ref[90], exports.ANY = _ref[91], exports.LAZYANY = _ref[92], exports.GREEDYANY = _ref[93], exports.PARALLEL = _ref[94], exports.FOLLOW = _ref[95], exports.NOTFOLLOW = _ref[96], exports.ADD = _ref[97], exports.SUB = _ref[98], exports.MUL = _ref[99], exports.DIV = _ref[100], exports.MOD = _ref[101], exports.AND = _ref[102], exports.OR = _ref[103], exports.NOT = _ref[104], exports.BITAND = _ref[105], exports.BITOR = _ref[106], exports.BITXOR = _ref[107], exports.LSHIFT = _ref[108], exports.RSHIFT = _ref[109], exports.EQ = _ref[110], exports.NE = _ref[111], exports.LE = _ref[112], exports.LT = _ref[113], exports.GT = _ref[114], exports.GE = _ref[115], exports.NEG = _ref[116], exports.BITNOT = _ref[117];

  exports.SEXPR_HEAD_FIRST = 1;

  exports.SEXPR_HEAD_LAST = exports.BITNOT;

  vari = function(name) {
    return name;
  };

  exports.vars = function(names) {
    var name, _j, _len, _ref1, _results1;

    _ref1 = split(names, reElements);
    _results1 = [];
    for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
      name = _ref1[_j];
      _results1.push(vari(name));
    }
    return _results1;
  };

  exports.nonlocal = function() {
    var names;

    names = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return [exports.NONLOCAL].concat(__slice.call(names));
  };

  exports.variable = variable = function() {
    var names;

    names = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return [exports.VARIABLE].concat(__slice.call(names));
  };

  exports.string = string = function(s) {
    return [exports.STRING, s];
  };

  exports.quote = function(exp) {
    return [exports.QUOTE, exp];
  };

  exports.eval_ = function(exp, path) {
    return [exports.EVAL, exp, path];
  };

  exports.begin = begin = function() {
    var exps;

    exps = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return [exports.BEGIN].concat(__slice.call(exps));
  };

  exports.assign = assign = function(left, exp) {
    return [exports.ASSIGN, left, exp];
  };

  exports.addassign = function(left, exp) {
    return [exports.AUGMENTASSIGN, 'add', left, exp];
  };

  exports.subassign = function(left, exp) {
    return [exports.AUGMENTASSIGN, 'sub', left, exp];
  };

  exports.mulassign = function(left, exp) {
    return [exports.AUGMENTASSIGN, 'mul', left, exp];
  };

  exports.divassign = function(left, exp) {
    return [exports.AUGMENTASSIGN, 'div', left, exp];
  };

  exports.modassign = function(left, exp) {
    return [exports.AUGMENTASSIGN, 'mod', left, exp];
  };

  exports.andassign = function(left, exp) {
    return [exports.AUGMENTASSIGN, 'and_', left, exp];
  };

  exports.orassign = function(left, exp) {
    return [exports.AUGMENTASSIGN, 'or_', left, exp];
  };

  exports.bitandassign = function(left, exp) {
    return [exports.AUGMENTASSIGN, 'bitand', left, exp];
  };

  exports.bitorassign = function(left, exp) {
    return [exports.AUGMENTASSIGN, 'bitor', left, exp];
  };

  exports.bitxorassign = function(left, exp) {
    return [exports.AUGMENTASSIGN, 'bitxor', left, exp];
  };

  exports.lshiftassign = function(left, exp) {
    return [exports.AUGMENTASSIGN, 'lshift', left, exp];
  };

  exports.rshiftassign = function(left, exp) {
    return [exports.AUGMENTASSIGN, 'rshift', left, exp];
  };

  exports.if_ = if_ = function(test, then_, else_) {
    return [exports.IF, test, then_, else_];
  };

  exports.iff = iff = function(clauses, else_) {
    var length, test, then_, _ref1;

    length = clauses.length;
    if (length === 0) {
      throw new Error("iff clauses should have at least one clause.");
    } else {
      _ref1 = clauses[0], test = _ref1[0], then_ = _ref1[1];
      if (length === 1) {
        return if_(test, then_, else_);
      } else {
        return if_(test, then_, iff(clauses.slice(1), else_));
      }
    }
  };

  exports.switch_ = function(test, clauses, else_) {
    return [exports.SWITCH, test, clauses, else_];
  };

  exports.array = function() {
    var args;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return [exports.ARRAY].concat(__slice.call(args));
  };

  exports.uarray = function() {
    var args;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return [exports.UARRAY].concat(__slice.call(args));
  };

  exports.cons = function(head, tail) {
    return [exports.CONS, head, tail];
  };

  exports.makeobject = function() {
    var args;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return [exports.MAKEOBJECT].concat(__slice.call(args));
  };

  exports.uobject = function() {
    var args;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return [exports.UOBJECT].concat(__slice.call(args));
  };

  exports.funcall = funcall = function() {
    var args, caller;

    caller = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return [exports.FUNCALL, caller].concat(__slice.call(args));
  };

  exports.jsfuncall = function() {
    var args, caller;

    caller = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return [exports.JSFUNCALL, caller].concat(__slice.call(args));
  };

  exports.macall = function() {
    var args, caller;

    caller = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return [exports.MACROCALL, caller].concat(__slice.call(args));
  };

  exports.jsobject = function(exp) {
    return [exports.JSOBJECT, exp];
  };

  exports.jsfun = jsfun = function(exp) {
    return [exports.JSFUN, exp];
  };

  exports.print_ = function() {
    var exps;

    exps = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return [exports.JSFUNCALL, io(jsfun('console.log'))].concat(exps);
  };

  exports.direct = function(exp) {
    return [exports.DIRECT, exp];
  };

  exports.pure = io = function(exp) {
    return [exports.PURE, exp];
  };

  exports.effect = sideEffect = function(exp) {
    return [exports.EFFECT, exp];
  };

  exports.io = io = function(exp) {
    return [exports.IO, exp];
  };

  exports.lamda = lambda = function() {
    var body, params;

    params = arguments[0], body = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return [exports.LAMDA, params].concat(body);
  };

  exports.macro = macro = function() {
    var body, params;

    params = arguments[0], body = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return [exports.MACRO, params].concat(body);
  };

  exports.qq = quasiquote = function(exp) {
    return [exports.QUASIQUOTE, exp];
  };

  exports.uq = unquote = function(exp) {
    return [exports.UNQUOTE, exp];
  };

  exports.uqs = unquoteSlice = function(exp) {
    return [exports.UNQUOTESLICE, exp];
  };

  isLabel = function(label) {
    return isArray(label) && label.length === 2 && label[0] === 'label';
  };

  exports.makeLabel = makeLabel = function(label) {
    return ['label', label];
  };

  defaultLabel = ['label', ''];

  exports.block = block = function() {
    var body, label;

    label = arguments[0], body = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (!isLabel(label)) {
      label = makeLabel('');
      body = [exports.label].concat(body);
    }
    return [exports.BLOCK, label].concat(__slice.call(body));
  };

  exports.break_ = break_ = function(label, value) {
    if (label == null) {
      label = defaultLabel;
    }
    if (value == null) {
      value = null;
    }
    if (value !== null && !isLabel(label)) {
      throw new TypeError([exports.label, value]);
    }
    if (value === null && !isLabel(label)) {
      value = label;
      label = makeLabel('');
    }
    return [exports.BREAK, label, value];
  };

  exports.continue_ = continue_ = function(label) {
    if (label == null) {
      label = defaultLabel;
    }
    return [exports.CONTINUE, label];
  };

  exports.jsbreak = jsbreak = function(label) {
    return [exports.JSBREAK, label];
  };

  exports.jscontinue_ = jscontinue = function(label) {
    return [exports.JSCONTINUE, label];
  };

  exports.loop_ = function() {
    var body, label;

    label = arguments[0], body = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (!isLabel(label)) {
      label = defaultLabel;
      body = [exports.label].concat(body);
    }
    return block.apply(null, [label].concat(__slice.call(body.concat([exports.continue_(label)]))));
  };

  exports.while_ = function() {
    var body, label, test;

    label = arguments[0], test = arguments[1], body = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
    if (!isLabel(label)) {
      label = defaultLabel;
      test = label;
      body = [exports.test].concat(body);
    }
    return block.apply(null, [label].concat(__slice.call([exports.if_(not_(test), break_(label))].concat(body).concat([exports.continue_(label)]))));
  };

  exports.until_ = function() {
    var body, label, test, _j;

    label = arguments[0], body = 3 <= arguments.length ? __slice.call(arguments, 1, _j = arguments.length - 1) : (_j = 1, []), test = arguments[_j++];
    if (!isLabel(label)) {
      label = defaultLabel;
      test = label;
      body = [exports.test].concat(body);
    }
    body = body.concat([exports.if_(not_(test), continue_(label))]);
    return block.apply(null, [label].concat(__slice.call(body)));
  };

  exports.dowhile = function() {
    var body, label, test, _j;

    label = arguments[0], body = 3 <= arguments.length ? __slice.call(arguments, 1, _j = arguments.length - 1) : (_j = 1, []), test = arguments[_j++];
    if (!isLabel(label)) {
      label = defaultLabel;
      test = label;
      body = [exports.test].concat(body);
    }
    body = body.concat([exports.if_(test, continue_(label))]);
    return block.apply(null, [label].concat(__slice.call(body)));
  };

  exports.for_ = function() {
    var body, init, step, test;

    init = arguments[0], test = arguments[1], step = arguments[2], body = 4 <= arguments.length ? __slice.call(arguments, 3) : [];
    return [exports.FOR, init, test, step].concat(__slice.call(body));
  };

  exports.forin = function() {
    var body, container, vari;

    vari = arguments[0], container = arguments[1], body = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
    return [exports.FORIN, vari, container].concat(__slice.call(body));
  };

  exports.try_ = function(test, catches, final) {
    return [exports.TRY, test, catches, final];
  };

  exports.catch_ = function() {
    var forms, tag;

    tag = arguments[0], forms = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return [exports.CATCH, tag].concat(__slice.call(forms));
  };

  exports.throw_ = function(tag, form) {
    return [exports.THROW, tag, form];
  };

  exports.protect = function() {
    var cleanup, form;

    form = arguments[0], cleanup = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return [exports.UNWINDPROTECT, form].concat(__slice.call(cleanup));
  };

  exports.callcc = function(fun) {
    return [exports.CALLCC, fun];
  };

  exports.callfc = function(fun) {
    return [exports.CALLFC, fun];
  };

  exports.inc = inc = function(item) {
    return [exports.INC, item];
  };

  exports.suffixinc = function(item) {
    return [exports.SUFFIXINC, item];
  };

  exports.dec = function(item) {
    return [exports.DEC, item];
  };

  exports.suffixdec = function(item) {
    return [exports.SUFFIXDEC, item];
  };

  exports.incp = incp = function(item) {
    return [exports.INCP, item];
  };

  exports.suffixincp = function(item) {
    return [exports.SUFFIXINCP, item];
  };

  exports.decp = function(item) {
    return [exports.DECP, item];
  };

  exports.suffixdecp = function(item) {
    return [exports.SUFFIXDECP, item];
  };

  exports.add = function() {
    var args;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return [exports.ADD].concat(__slice.call(args));
  };

  exports.sub = function() {
    var args;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return [exports.SUB].concat(__slice.call(args));
  };

  exports.mul = function() {
    var args;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return [exports.MUL].concat(__slice.call(args));
  };

  exports.div = function() {
    var args;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return [exports.DIV].concat(__slice.call(args));
  };

  exports.mod = function() {
    var args;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return [exports.MOD].concat(__slice.call(args));
  };

  exports.and_ = function() {
    var args;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return [exports.AND].concat(__slice.call(args));
  };

  exports.or_ = function() {
    var args;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return [exports.OR].concat(__slice.call(args));
  };

  exports.not_ = not_ = function(x) {
    return [exports.NOT, x];
  };

  exports.bitand = function() {
    var args;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return [exports.BITAND].concat(__slice.call(args));
  };

  exports.bitor = function() {
    var args;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return [exports.BITOR].concat(__slice.call(args));
  };

  exports.bitxor = function() {
    var args;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return [exports.BITXOR].concat(__slice.call(args));
  };

  exports.lsfhift = function() {
    var args;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return [exports.LSHIFT].concat(__slice.call(args));
  };

  exports.rshift = function() {
    var args;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return [exports.RSHIFT].concat(__slice.call(args));
  };

  exports.eq = function() {
    var args;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return [exports.EQ].concat(__slice.call(args));
  };

  exports.ne = function() {
    var args;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return [exports.NE].concat(__slice.call(args));
  };

  exports.le = function() {
    var args;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return [exports.LE].concat(__slice.call(args));
  };

  exports.lt = function() {
    var args;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return [exports.LT].concat(__slice.call(args));
  };

  exports.gt = function() {
    var args;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return [exports.GT].concat(__slice.call(args));
  };

  exports.ge = function() {
    var args;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return [exports.GE].concat(__slice.call(args));
  };

  exports.neg = function() {
    var args;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return [exports.NEG].concat(__slice.call(args));
  };

  exports.bitnot = function() {
    var args;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return [exports.BITNOT].concat(__slice.call(args));
  };

  exports.index = index = function() {
    var args;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return [exports.INDEX].concat(__slice.call(args));
  };

  exports.push = push = function() {
    var args;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return [exports.PUSH].concat(__slice.call(args));
  };

  exports.list = list = function() {
    var args;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return [exports.LIST].concat(__slice.call(args));
  };

  exports.pushp = pushp = function(list, value) {
    return [exports.PUSHP, list, value];
  };

  exports.logicvar = function(name) {
    return [exports.LOGICVAR, name];
  };

  exports.dummy = function(name) {
    return [exports.DUMMYVAR, name];
  };

  exports.unify = unify = function() {
    var args;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return [exports.UNIFY].concat(__slice.call(args));
  };

  exports.notunify = function() {
    var args;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return [exports.NOTUNIFY].concat(__slice.call(args));
  };

  exports.succeed = [exports.SUCCEED];

  exports.fail = [exports.FAIL];

  exports.andp = andp = exports.begin;

  exports.orp = orp = function() {
    var exps, length;

    exps = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    length = exps.length;
    if (length === 0) {
      throw new ArgumentError(exps);
    } else if (length === 1) {
      return exps[0];
    } else if (length === 2) {
      return [exports.ORP].concat(__slice.call(exps));
    } else {
      return [exports.ORP, exps[0], orp.apply(null, exps.slice(1))];
    }
  };

  exports.notp = function(goal) {
    return [exports.NOTP, goal];
  };

  exports.repeat = [exports.REPEAT];

  exports.cutable = function(goal) {
    return [exports.CUTABLE, goal];
  };

  exports.cut = [exports.CUT];

  exports.once = function(goal) {
    return [exports.ONCE, goal];
  };

  exports.findall = function(goal, result, template) {
    return [exports.FINDALL, goal, result, template];
  };

  exports.is_ = function(vari, exp) {
    return [exports.IS, vari, exp];
  };

  exports.bind = bind = function(vari, term) {
    return [exports.BIND, vari, term];
  };

  exports.getvalue = getvalue = function(term) {
    return [exports.GETVALUE, term];
  };

  exports.parse = function(exp, state) {
    return [exports.PARSE, exp, state];
  };

  exports.parsetext = function(exp, text) {
    return [exports.PARSETEXT, exp, text];
  };

  exports.settext = function(text) {
    return [exports.SETTEXT, text];
  };

  exports.setpos = function(pos) {
    return [exports.SETPOS, pos];
  };

  exports.setstate = function(state) {
    return [exports.SETSTATE, state];
  };

  exports.getstate = [exports.GETSTATE];

  exports.gettext = [exports.GETTEXT];

  exports.getpos = [exports.GETPOS];

  exports.eoi = [exports.EOI];

  exports.boi = [exports.BOI];

  exports.eol = [exports.EOL];

  exports.bol = [exports.BOL];

  exports.step = function(n) {
    return [exports.STEP, n];
  };

  exports.lefttext = [exports.LEFTTEXT];

  exports.subtext = function(length, start) {
    return [exports.SUBTEXT, length, start];
  };

  exports.nextchar = [exports.NEXTCHAR];

  exports.may = function(exp) {
    return [exports.MAY, exp];
  };

  exports.lazymay = function(exp) {
    return [exports.LAZYMAY, exp];
  };

  exports.greedymay = function(exp) {
    return [exports.GREEDYMAY, exp];
  };

  index = 1;

  exports.uniquevar = uniquevar = function(name) {
    return [exports.UNIQUEVAR, name, index++];
  };

  exports.uniqueconst = uniqueconst = function(name) {
    return [exports.UNIQUECONST, name, index++];
  };

  exports.any = any = function(exp, result, template) {
    var result1;

    if (result == null) {
      return [exports.ANY, exp];
    } else {
      result1 = uniqueconst('result');
      return begin(assign(result1, []), any(andp(exp, push(result1, getvalue(template)))), unify(result, result1));
    }
  };

  exports.lazyany = lazyany = function(exp, result, template) {
    var result1;

    if (result == null) {
      return [exports.LAZYANY, exp];
    } else {
      result1 = uniqueconst('result');
      return begin(assign(result1, []), lazyany(andp(exp, push(result1, getvalue(template)))), unify(result, result1));
    }
  };

  exports.greedyany = greedyany = function(exp, result, template) {
    var result1;

    if (result == null) {
      return [exports.GREEDYANY, exp];
    } else {
      result1 = uniqueconst('result');
      return begin(assign(result1, []), greedyany(andp(exp, push(result1, getvalue(template)))), unify(result, result1));
    }
  };

  exports.some = function(exp, result, template) {
    var result1;

    if (result == null) {
      return andp(exp, [exports.ANY, exp]);
    } else {
      result1 = uniqueconst('result');
      return begin(['result'], assign(result1, []), exp, push(result1, getvalue(template)), any(andp(exp, push(result1, getvalue(template)))), unify(result, result1));
    }
  };

  exports.lazysome = function(exp, result, template) {
    var result1;

    if (result == null) {
      return andp(exp, [exports.LAZYANY, exp]);
    } else {
      result1 = uniqueconst('result');
      return begin(assign(result1, []), exp, push(result1, getvalue(template)), lazyany(andp(exp, push(result1, getvalue(template)))), unify(result, result1));
    }
  };

  exports.greedysome = function(exp, result, template) {
    var result1;

    if (result == null) {
      return andp(exp, [exports.GREEDYANY, exp]);
    } else {
      result1 = uniqueconst('result');
      return begin(assign(result1, []), exp, push(result1, getvalue(template)), greedyany(andp(exp, push(result1, getvalue(template)))), unify(result, result1));
    }
  };

  exports.times = times = function(exp, expectTimes, result, template) {
    var n, result1;

    n = uniquevar('n');
    if (result == null) {
      return begin(variable(n), assign(n, 0), any(andp(exp, incp(n))), unify(expectTimes, n));
    } else {
      result1 = uniqueconst('result');
      return begin(variable(n), assign(n, 0), assign(result1, []), any(andp(exp, incp(n), pushp(result1, getvalue(template)))), unify(expectTimes, n), unify(result, result1));
    }
  };

  exports.seplist = function(exp, options) {
    var expectTimes, n, result, result1, sep, template;

    if (options == null) {
      options = {};
    }
    sep = options.sep || char(string(' '));
    expectTimes = options.times || null;
    result = options.result || null;
    template = options.template || null;
    if (result !== null) {
      result1 = uniqueconst('result');
    }
    if (expectTimes === null) {
      if (result === null) {
        return andp(exp, any(andp(sep, exp)));
      } else {
        return andp(assign(result1, []), exp, pushp(result1, getvalue(template)), any(andp(sep, exp, pushp(result1, getvalue(template)))), unify(result, result1));
      }
    } else if (isInteger(expectTimes)) {
      if (result === null) {
        switch (expectTimes) {
          case 0:
            return succeed;
          case 1:
            return exp;
          default:
            return andp(exp, times(andp(sep, exp), expectTimes - 1));
        }
      } else {
        switch (expectTimes) {
          case 0:
            return unify(result, []);
          case 1:
            return andp(exp, unify(result, list(getvalue(template))));
          default:
            return andp(assign(result1, []), exp, pushp(result1, getvalue(template)), times(andp(sep, exp, pushp(result1, getvalue(template))), expectTimes - 1), unify(result, result1));
        }
      }
    } else {
      n = uniquevar('n');
      if (result === null) {
        return orp(andp(variable(n), exp, assign(n, 1), any(andp(sep, exp, incp(n))), unify(expectTimes, n)), unify(expectTimes, 0));
      } else {
        return orp(andp(variable(n), exp, assign(n, 1), assign(result1, list(getvalue(template))), any(andp(sep, exp, pushp(result1, getvalue(template)), incp(n))), unify(expectTimes, n), unify(result, result1)), andp(unify(expectTimes, 0), unify(result, [])));
      }
    }
  };

  exports.parallel = function() {
    var args;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return [exports.PARALLEL].concat(__slice.call(args));
  };

  exports.follow = function(x) {
    return [exports.FOLLOW, x];
  };

  exports.notfollow = function(x) {
    return [exports.NOTFOLLOW, x];
  };

  _ref1 = ['char', 'followChars', 'notFollowChars', 'charWhen', 'spaces', 'spaces0', 'stringWhile', 'stringWhile0', 'number', 'literal', 'followLiteral', 'notFollowLiteral', 'quoteString', 'identifier'];
  for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
    name = _ref1[_j];
    exports[name] = (function(name) {
      return function() {
        var args;

        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return funcall.apply(null, [jsfun('parser.' + name), 'solver'].concat(__slice.call(args)));
      };
    })(name);
  }

  char = exports.char;

  charWhen = exports.charWhen;

  stringWhile = exports.stringWhile;

  stringWhile0 = exports.stringWhile0;

  exports.charBetween = function(start, end) {
    return charWhen(function(c) {
      return (start < c && c < end);
    });
  };

  charIn = charIn = function(set) {
    return charWhen(function(c) {
      return __indexOf.call(set, c) >= 0;
    });
  };

  exports.digit = charWhen(function(c) {
    return ('0' <= c && c <= '9');
  });

  exports.digit1_9 = charWhen(function(c) {
    return ('1' <= c && c <= '9');
  });

  exports.lower = charWhen(function(c) {
    return ('a' <= c && c <= 'z');
  });

  exports.upper = charWhen(function(c) {
    return ('A' <= c && c <= 'Z');
  });

  exports.letter = charWhen(function(c) {
    return (('a' <= c && c <= 'z')) || (('A' <= c && c <= 'Z'));
  });

  exports.underlineLetter = charWhen(function(c) {
    return (c === '_') || (('a' <= c && c <= 'z')) || (('A' <= c && c <= 'Z'));
  });

  exports.underlineLetterDight = charWhen(function(c) {
    return (c === '_') || (('a' <= c && c <= 'z')) || (('A' <= c && c <= 'Z')) || (('0' <= c && c <= '9'));
  });

  exports.tabspace = charIn(' \t');

  exports.whitespace = charIn(' \t\r\n');

  exports.newline = charIn('\r\n');

  exports.stringBetween = function(start, end) {
    return stringWhile(function(c) {
      return (start < c && c < end);
    });
  };

  exports.stringIn = stringIn = function(set) {
    return stringWhile(function(c) {
      return __indexOf.call(set, c) >= 0;
    });
  };

  exports.digits = stringWhile(function(c) {
    return ('0' <= c && c <= '9');
  });

  exports.digits1_9 = stringWhile(function(c) {
    return ('1' <= c && c <= '9');
  });

  exports.lowers = stringWhile(function(c) {
    return ('a' <= c && c <= 'z');
  });

  exports.uppers = stringWhile(function(c) {
    return ('A' <= c && c <= 'Z');
  });

  exports.letters = stringWhile(function(c) {
    return (('a' <= c && c <= 'z')) || (('A' <= c && c <= 'Z'));
  });

  exports.underlineLetters = stringWhile(function(c) {
    return (c === '_') || (('a' <= c && c <= 'z')) || (('A' <= c && c <= 'Z'));
  });

  exports.underlineLetterDights = stringWhile(function(c) {
    return (c === '_') || (('a' <= c && c <= 'z')) || (('A' <= c && c <= 'Z')) || (('0' <= c && c <= '9'));
  });

  exports.tabspaces = stringIn(' \t');

  exports.whitespaces = stringIn(' \t\r\n');

  exports.newlinespaces = stringIn('\r\n');

  exports.stringBetween0 = function(start, end) {
    return stringWhile0(function(c) {
      return (start < c && c < end);
    });
  };

  exports.stringIn0 = stringIn0 = function(set) {
    return stringWhile0(function(c) {
      return __indexOf.call(set, c) >= 0;
    });
  };

  exports.digits0 = stringWhile0(function(c) {
    return ('0' <= c && c <= '9');
  });

  exports.digits1_90 = stringWhile0(function(c) {
    return ('1' <= c && c <= '9');
  });

  exports.lowers0 = stringWhile0(function(c) {
    return ('a' <= c && c <= 'z');
  });

  exports.uppers0 = stringWhile0(function(c) {
    return ('A' <= c && c <= 'Z');
  });

  exports.letters0 = stringWhile0(function(c) {
    return (('a' <= c && c <= 'z')) || (('A' <= c && c <= 'Z'));
  });

  exports.underlineLetters0 = stringWhile0(function(c) {
    return (c === '_') || (('a' <= c && c <= 'z')) || (('A' <= c && c <= 'Z'));
  });

  exports.underlineLetterDights0 = stringWhile0(function(c) {
    return (c === '_') || (('a' <= c && c <= 'z')) || (('A' <= c && c <= 'Z')) || (('0' <= c && c <= '9'));
  });

  exports.tabspaces0 = stringIn0(' \t');

  exports.whitespaces0 = stringIn0(' \t\r\n');

  exports.newlines0 = stringIn0('\r\n');

}).call(this);

/*
//@ sourceMappingURL=util.map
*/
