// Generated by CoffeeScript 1.6.2
(function() {
  var elapsed_time, even, f, fib, odd, start, trampoline, xexports, zero, zero2, _even, _odd,
    __slice = [].slice;

  trampoline = function(f) {
    return function() {
      var args, result;

      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      result = f.apply(null, args);
      while (result instanceof Function) {
        result = result();
      }
      console.log(result);
      return result;
    };
  };

  fib = function(n) {
    var f;

    f = function(n, a, b) {
      if (n > 0) {
        return function() {
          return f(n - 1, b, a + b);
        };
      } else {
        return a;
      }
    };
    return trampoline(f)(n, 0, 1);
  };

  zero = trampoline(f = function(n) {
    if (n === 0) {
      return 0;
    } else {
      return function() {
        return f(n - 1);
      };
    }
  });

  zero2 = function(n) {
    while (1) {
      if (n === 0) {
        return 0;
      } else {
        n = n - 1;
      }
    }
  };

  _odd = function(n) {
    if (n === 0) {
      return false;
    } else {
      return function() {
        return _even(n - 1);
      };
    }
  };

  _even = function(n) {
    if (n === 0) {
      return true;
    } else {
      return function() {
        return _odd(n - 1);
      };
    }
  };

  odd = trampoline(_odd);

  even = trampoline(_even);

  start = process.hrtime();

  elapsed_time = function(note) {
    var elapsed, precision;

    precision = 3;
    elapsed = process.hrtime(start);
    console.log("" + note + " -- " + elapsed[0] + "s" + (elapsed[1] / 1000000) + "ms");
    return start = process.hrtime();
  };

  xexports = {};

  exports.Test = {
    "test tailrecursive": function(test) {
      elapsed_time("start");
      test.equal(fib(100), 354224848179262000000);
      elapsed_time("fib(100)");
      test.equal(zero(100), 0);
      elapsed_time("zero(100)");
      test.equal(zero2(100), 0);
      elapsed_time("zero2(100)");
      test.equal(odd(2), false);
      elapsed_time("odd(2)");
      test.equal(even(2), true);
      elapsed_time("even(2)");
      return test.done();
    }
  };

}).call(this);

/*
//@ sourceMappingURL=trampoline.map
*/
