// Generated by CoffeeScript 1.6.2
(function() {
  var add, andp, assign, begin, core, cut, cutable, eq, fail, findall, funcall, if_, inc, lamda, le, logicvar, macro, not_, notp, orp, print_, solve, solvebase, succeed, unify, vari, xexports, _, _ref;

  _ = require("underscore");

  solve = (core = require('../core')).solve;

  solvebase = require('../solve');

  _ref = require('../util'), begin = _ref.begin, assign = _ref.assign, print_ = _ref.print_, funcall = _ref.funcall, lamda = _ref.lamda, macro = _ref.macro, if_ = _ref.if_, add = _ref.add, eq = _ref.eq, le = _ref.le, inc = _ref.inc, not_ = _ref.not_, logicvar = _ref.logicvar, unify = _ref.unify, succeed = _ref.succeed, fail = _ref.fail, andp = _ref.andp, orp = _ref.orp, notp = _ref.notp, cutable = _ref.cutable, cut = _ref.cut, findall = _ref.findall;

  vari = function(name) {
    return name;
  };

  xexports = {};

  exports.Test = {
    "test succeed fail": function(test) {
      test.equal(solve(succeed), true);
      test.equal(solve(fail), false);
      return test.done();
    },
    "test and print": function(test) {
      test.equal(solve(andp(print_(1), print_(2))), null);
      return test.done();
    },
    "test or print": function(test) {
      test.equal(solve(orp(fail, print_(2), print_(3))), null);
      return test.done();
    },
    "test not succeed fail": function(test) {
      test.equal(solve(notp(succeed)), true);
      test.equal(solve(notp(fail)), false);
      return test.done();
    },
    "test not print": function(test) {
      test.equal(solve(notp(print_(1))), null);
      return test.done();
    },
    "test unify 1 1, 1 2": function(test) {
      test.equal(solve(unify(1, 1)), true);
      test.equal(solve(unify(1, 2)), false);
      return test.done();
    },
    "test unify logicvar": function(test) {
      var $a, a;

      a = vari('a');
      $a = logicvar('a');
      test.equal(solve(unify($a, 1)), true);
      test.equal(solve(andp(assign(a, $a), unify(a, 1), unify(a, 2))), false);
      test.equal(solve(begin(assign(a, $a), orp(andp(unify(a, 1), unify(a, 2)), unify(a, 2)))), true);
      return test.done();
    },
    "test cut": function(test) {
      test.equal(solve(orp(andp(print_(1), fail), print_(2))), null);
      test.equal(solve(orp(andp(print_(1), cut, fail), print_(2))), false);
      test.equal(solve(orp(cutable(orp(andp(print_(1), cut, fail), print_(2))), print_(3))), null);
      return test.done();
    },
    "test findall once": function(test) {
      var $x, result, x;

      $x = logicvar('x');
      x = vari('x');
      result = logicvar('result');
      test.equal(solve(findall(orp(print_(1), print_(2)))), null);
      test.equal(solve(findall(orp(print_(1), print_(2), print_(3)))), null);
      return test.done();
    }
  };

  xexports.Test = {
    "test macro": function(test) {
      var orpm, same;

      same = macro(1, function(x) {
        return x;
      });
      orpm = macro(2, function(x, y) {
        return orp(x, y);
      });
      test.equal(solve(same(1)), 1);
      test.equal(solve(same(print_(1))), null);
      test.equal(solve(orpm(fail, print_(2))), null);
      return test.done();
    },
    "test rule": function(test) {
      var r;

      r = rule(2, function(x, y) {
        return [[x, y], 1, null];
      });
      test.equal(solve(r(1, 1)), 1);
      test.equal(solvebase.status, solvebase.SUCCESS);
      return test.done();
    },
    "test rule2": function(test) {
      var r;

      r = rule(2, function(x, y) {
        return [[1, 2], print_(1), [1, 1], print_(2)];
      });
      test.equal(solve(r(1, 1)), null);
      return test.done();
    }
  };

}).call(this);

/*
//@ sourceMappingURL=test_logic.map
*/
