// Generated by CoffeeScript 1.6.2
(function() {
  var fun, solve, special,
    __slice = [].slice;

  solve = require("../dao");

  fun = solve.fun;

  special = solve.special;

  /* console.log(arguments)
  */


  exports.print_ = special(null, 'eq', function() {
    var args, cont, solver;

    solver = arguments[0], cont = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
    return solver.argsCont(args, function(args, solver) {
      console.log.apply(console, args);
      return cont(null, solver);
    });
  });

  /* x === y
  */


  exports.eq = special(2, 'eq', function(solver, cont, x, y) {
    var xcont, ycont;

    ycont = solver.cont(y, function(v, solver) {
      return cont(x === v, solver);
    });
    xcont = function(v, solver) {
      x = v;
      return ycont(null, solver);
    };
    return solver.cont(x, xcont);
  });

  /* x !== y
  */


  exports.ne = special(2, 'ne', function(solver, cont, x, y) {
    var xcont, ycont;

    ycont = solver.cont(y, function(v, solver) {
      return cont(x !== v, solver);
    });
    xcont = function(v, solver) {
      x = v;
      return ycont(null, solver);
    };
    return solver.cont(x, xcont);
  });

  /* x < y
  */


  exports.lt = special(2, 'lt', function(solver, cont, x, y) {
    var xcont, ycont;

    ycont = solver.cont(y, function(v, solver) {
      return cont(x <= v, solver);
    });
    xcont = function(v, solver) {
      x = v;
      return ycont(null, solver);
    };
    return solver.cont(x, xcont);
  });

  /* x <= y
  */


  exports.le = special(2, 'le', function(solver, cont, x, y) {
    var xcont, ycont;

    ycont = solver.cont(y, function(v, solver) {
      return cont(x <= v, solver);
    });
    xcont = function(v, solver) {
      x = v;
      return ycont(null, solver);
    };
    return solver.cont(x, xcont);
  });

  /*  x > y
  */


  exports.gt = special(2, 'gt', function(solver, cont, x, y) {
    var xcont, ycont;

    ycont = solver.cont(y, function(v, solver) {
      return cont(x > v, solver);
    });
    xcont = function(v, solver) {
      x = v;
      return ycont(null, solver);
    };
    return solver.cont(x, xcont);
  });

  /* x >= y
  */


  exports.ge = special(2, 'ge', function(solver, cont, x, y) {
    var xcont, ycont;

    ycont = solver.cont(y, function(v, solver) {
      return cont(x >= v, solver);
    });
    xcont = function(v, solver) {
      x = v;
      return ycont(null, solver);
    };
    return solver.cont(x, xcont);
  });

  /* x + y
  */


  exports.add = special(2, 'add', function(solver, cont, x, y) {
    var xcont, ycont;

    ycont = solver.cont(y, function(v, solver) {
      return cont(x + v, solver);
    });
    xcont = function(v, solver) {
      x = v;
      return ycont(null, solver);
    };
    return solver.cont(x, xcont);
  });

  /* x - y
  */


  exports.sub = special(2, 'sub', function(solver, cont, x, y) {
    var xcont, ycont;

    ycont = solver.cont(y, function(v, solver) {
      return cont(x - v, solver);
    });
    xcont = function(v, solver) {
      x = v;
      return ycont(null, solver);
    };
    return solver.cont(x, xcont);
  });

  /* x * y
  */


  exports.mul = special(2, 'mul', function(solver, cont, x, y) {
    var xcont, ycont;

    ycont = solver.cont(y, function(v, solver) {
      return cont(x * v, solver);
    });
    xcont = function(v, solver) {
      x = v;
      return ycont(null, solver);
    };
    return solver.cont(x, xcont);
  });

  /* x / y
  */


  exports.div = special(2, 'div', function(solver, cont, x, y) {
    var xcont, ycont;

    ycont = solver.cont(y, function(v, solver) {
      return cont(x / v, solver);
    });
    xcont = function(v, solver) {
      x = v;
      return ycont(null, solver);
    };
    return solver.cont(x, xcont);
  });

  /* x % y
  */


  exports.mod = special(2, 'mod', function(solver, cont, x, y) {
    var xcont, ycont;

    ycont = solver.cont(y, function(v, solver) {
      return cont(x % v, solver);
    });
    xcont = function(v, solver) {
      x = v;
      return ycont(null, solver);
    };
    return solver.cont(x, xcont);
  });

  /* x && y
  */


  exports.and_ = special(2, 'and_', function(solver, cont, x, y) {
    var xcont, ycont;

    ycont = solver.cont(y, function(v, solver) {
      return cont(x && v, solver);
    });
    xcont = function(v, solver) {
      x = v;
      return ycont(null, solver);
    };
    return solver.cont(x, xcont);
  });

  /* x || y
  */


  exports.or_ = special(2, 'or_', function(solver, cont, x, y) {
    var xcont, ycont;

    ycont = solver.cont(y, function(v, solver) {
      return cont(x && v, solver);
    });
    xcont = function(v, solver) {
      x = v;
      return ycont(null, solver);
    };
    return solver.cont(x, xcont);
  });

  /* !x
  */


  exports.not_ = special(1, 'not_', function(solver, cont, x) {
    return solver.cont(x, function(v, solver) {
      return cont(!v, solver);
    });
  });

  /* x << y
  */


  exports.lshift = special(2, 'lshift', function(solver, cont, x, y) {
    var xcont, ycont;

    ycont = solver.cont(y, function(v, solver) {
      return cont(x << v, solver);
    });
    xcont = function(v, solver) {
      x = v;
      return ycont(null, solver);
    };
    return solver.cont(x, xcont);
  });

  /* x >> y
  */


  exports.rshift = special(2, 'rshift', function(solver, cont, x, y) {
    var xcont, ycont;

    ycont = solver.cont(y, function(v, solver) {
      return cont(x >> v, solver);
    });
    xcont = function(v, solver) {
      x = v;
      return ycont(null, solver);
    };
    return solver.cont(x, xcont);
  });

  /* x & y
  */


  exports.bitand = special(2, 'bitand', function(solver, cont, x, y) {
    var xcont, ycont;

    ycont = solver.cont(y, function(v, solver) {
      return cont(x & v, solver);
    });
    xcont = function(v, solver) {
      x = v;
      return ycont(null, solver);
    };
    return solver.cont(x, xcont);
  });

  /* x | y
  */


  exports.bitor = special(2, 'bitor', function(solver, cont, x, y) {
    var xcont, ycont;

    ycont = solver.cont(y, function(v, solver) {
      return cont(x | v, solver);
    });
    xcont = function(v, solver) {
      x = v;
      return ycont(null, solver);
    };
    return solver.cont(x, xcont);
  });

  /* ~x
  */


  exports.bitnot = special(1, 'not_', function(solver, cont, x) {
    return solver.cont(x, function(v, solver) {
      return cont(~v, solver);
    });
  });

  /* Because not using vari.bind, these are not saved in solver.trail and so it can NOT be restored in solver.failcont
     EXCEPT the vari has been in solver.trail in the logic branch before.
     vari.binding ++
  */


  exports.inc = special(1, 'inc', function(solver, cont, vari) {
    return function(v, solver) {
      return cont(++vari.binding, solver);
    };
  });

  /* vari.binding += 2
  */


  exports.inc2 = special(1, 'inc2', function(solver, cont, vari) {
    return function(v, solver) {
      vari.binding++;
      return cont(++vari.binding, solver);
    };
  });

  /* vari.binding --
  */


  exports.dec = special(1, 'dec', function(solver, cont, vari) {
    return function(v, solver) {
      return cont(--vari.binding, solver);
    };
  });

  /* vari.binding -= 2
  */


  exports.dec2 = special(1, 'dec2', function(solver, cont, vari) {
    return function(v, solver) {
      vari.binding--;
      return cont(--vari.binding, solver);
    };
  });

  /* x.getvalue
  */


  exports.getvalue = special(1, 'getvalue', function(solver, cont, x) {
    return solver.cont(x, function(v, solver) {
      return cont(solver.trail.getvalue(v), solver);
    });
  });

  /* x.length
  */


  exports.length = special(1, 'length', function(solver, cont, x) {
    return solver.cont(x, function(v, solver) {
      return cont(v.length, solver);
    });
  });

  /* -x
  */


  exports.neg = special(1, 'neg', function(solver, cont, x) {
    return solver.cont(x, function(v, solver) {
      return cont(-v, solver);
    });
  });

  /* Math.abs(x)
  */


  exports.abs = special(1, 'abs', function(solver, cont, x) {
    return solver.cont(x, function(v, solver) {
      return cont(Math.abs(v), solver);
    });
  });

  /* x[y]
  */


  exports.index = special(2, 'index', function(solver, cont, x, y) {
    var xcont, ycont;

    ycont = solver.cont(y, function(v, solver) {
      return cont(x[y], solver);
    });
    xcont = function(v, solver) {
      x = v;
      return ycont(null, solver);
    };
    return solver.cont(x, xcont);
  });

  /* x[0]
  */


  exports.first = special(1, 'first', function(solver, cont, x) {
    return solver.cont(x, function(v, solver) {
      return cont(v[0], solver);
    });
  });

  /* x[1...]
  */


  exports.left = special(1, 'left', function(solver, cont, x) {
    return solver.cont(x, function(v, solver) {
      return cont(v.slice(1), solver);
    });
  });

  exports.second = special(1, 'second', function(solver, cont, x) {
    return solver.cont(x, function(v, solver) {
      return cont(v[1], solver);
    });
  });

  /* x[2]
  */


  exports.third = special(1, 'third', function(solver, cont, x) {
    return solver.cont(x, function(v, solver) {
      return cont(v[2], solver);
    });
  });

  /* x.concat(y)
  */


  exports.concat = special(2, 'concat', function(solver, cont, x, y) {
    var xcont, ycont;

    ycont = solver.cont(y, function(v, solver) {
      return cont(x.concat(y), solver);
    });
    xcont = function(v, solver) {
      x = v;
      return ycont(null, solver);
    };
    return solver.cont(x, xcont);
  });

  /* list(args...) return an array
  */


  exports.list = special([], 'list', function() {
    var args, cont, solver;

    solver = arguments[0], cont = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
    return solver.argsCont(args, cont);
  });

  /* x.push(y)
  */


  exports.push = special(2, 'push', function(solver, cont, x, y) {
    var xcont, ycont;

    ycont = solver.cont(y, function(v, solver) {
      return cont(x.push(v), solver);
    });
    xcont = function(v, solver) {
      x = v;
      return ycont(null, solver);
    };
    return solver.cont(x, xcont);
  });

  /* x.push(y), when backtracking here, x.pop()
  */


  exports.pushp = special(2, 'pushp', function(solver, cont, x, y) {
    var xcont, ycont;

    ycont = solver.cont(y, function(v, solver) {
      var fc;

      fc = solver.failcont;
      solver.failcont = function(v, solver) {
        x.pop();
        return fc(v, solver);
      };
      return cont(x.push(v), solver);
    });
    xcont = function(v, solver) {
      x = v;
      return ycont(null, solver);
    };
    return solver.cont(x, xcont);
  });

  /* x is a free variable?
    this never fail, which is different from logic.freep
  */


  exports.free = special(1, 'freep', function(solver, cont, x) {
    return function(v, solver) {
      return cont(solver.trail.deref(x) instanceof Var, solver);
    };
  });

}).call(this);

/*
//@ sourceMappingURL=general.map
*/
