// Generated by CoffeeScript 1.6.2
(function() {
  var a, addRecCircles, b, char, cur, memo, memoA, memoB, p, parse1, parse2, parser, setMemoRules, x, xexports, _ref;

  _ref = parser = p = require("../lib/leftrecursive.js"), addRecCircles = _ref.addRecCircles, setMemoRules = _ref.setMemoRules, memo = _ref.memo, char = _ref.char, cur = _ref.cur;

  a = char('a');

  b = char('b');

  x = char('x');

  memoA = memo('A');

  memoB = memo('B');

  parse1 = function(text) {
    var rules;

    rules = {
      A: function(start) {
        var m;

        return (m = memoA(start)) && x(p.cur()) && m + 'x' || m || a(start);
      }
    };
    parser.clear();
    addRecCircles(['A']);
    setMemoRules(rules);
    return parser.parse(text, rules['A']);
  };

  parse2 = function(text) {
    var rules,
      _this = this;

    rules = {
      A: function(start) {
        var m;

        return (m = memoB(start)) && x(p.cur()) && m + 'x' || m || a(start);
      },
      B: function(start) {
        return memoA(start) || b(start);
      }
    };
    addRecCircles(['A', 'B']);
    setMemoRules(rules);
    return parser.parse(text, rules['A']);
  };

  xexports = {};

  exports.Test = {
    "test A: Ax|a": function(test) {
      var parse;

      parse = parse1;
      test.equal(parse('a'), 'a');
      test.equal(parse('ax'), 'ax');
      test.equal(parse('axx'), 'axx');
      test.equal(parse('axxx'), 'axxx');
      return test.done();
    },
    "test A: Bx|a; B:A|b": function(test) {
      var parse;

      parse = parse2;
      test.equal(parse('a'), 'a');
      test.equal(parse('ax'), 'ax');
      test.equal(parse('axx'), 'axx');
      test.equal(parse('axxx'), 'axxx');
      test.equal(parse('b'), 'b');
      test.equal(parse('bx'), 'bx');
      test.equal(parse('bxxx'), 'bxxx');
      test.equal(parse('bxxxg'), 'bxxx');
      test.equal(parse('fg'), void 0);
      test.equal(parse(''), void 0);
      return test.done();
    }
  };

}).call(this);

/*
//@ sourceMappingURL=testLeftRecursive.map
*/
