// Generated by CoffeeScript 1.6.2
(function() {
  ' some basic utilities for solve dao expression.';
  'code for compilation:\n-> alpha convert\n-> cps convert\n-> optimize\n-> tail recursive convert\n-> javascriptize\n-> generate code';
  'I = require \'utils\'\nI.at "solvebase.Solutions compile.compileToJSFile"\nI.use "compilebase: Environment, Compiler"\nI.at "command.element"\nI.use "compilebase: CompileTypeError, VariableNotBound, import_names"\nil = I.from "dao: interlang"';
  var Apply, ArityError, Assign, Atom, BaseCommand, Bindings, Bool, BuiltinFunction, BuiltinFunctionCall, Command, CommandCall, CompileError, CompileTypeError, Compiler, Cons, Const, ConstLamdaVar, ConstMacroVar, DaoError, DaoNotImplemented, DaoStopIteration, DaoSyntaxError, DaoUncaughtThrow, Dict, DirectInterlang, DummyVar, Element, Environment, Exception, ExpressionWithCode, FALSE, Float, Integer, Klass, LamdaVar, List, LogicVar, MAX_EXTEND_CODE_SIZE, Macro, MacroFunction, MacroRules, MacroVar, MultiAssignToConstError, NULL, Nil, NoSolution, PyFunction, RecursiveFunctionVar, RecursiveMacroVar, Solutions, Solver, Special, SpecialCall, String, Symbol, TRUE, Tuple, UnquoteSplice, Var, VariableNotBound, assert, compileToJavascript, cons, cons2tuple, conslist, cps_convert_unify, cps_convert_unify_one_var, cps_convert_unify_two_var, dao, element, evald, il, import_names, interlang, isinstance, len, make_tuple, new_func_name, new_func_name_map, nil, prelude, register_fun, set, solve, special, type_map, utils, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _ref17, _ref18, _ref19, _ref2, _ref20, _ref21, _ref22, _ref23, _ref24, _ref25, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  utils = require("f:/node-utils/src/set");

  set = utils.set;

  isinstance = function(x, klass) {
    return isinstance(x, klass);
  };

  assert = function(arg, message) {
    if (!arg) {
      throw new Error(message || '');
    }
  };

  len = function(obj) {
    return obj.length;
  };

  prelude = '# generated file from compiled daonode expression.\nfrom dao.builtins import *\nfrom dao.command import LogicVar as DaoLogicVar\nfrom dao.command import Var as DaoVar\nfrom dao.solvebase import Solver, NoSolution\nfrom dao.solvebase import deref, get_value, LogicVar, DummyVar\nfrom dao.solvebase import Cons, nil\nfrom dao.solvebase import UnquoteSplice, ExpressionWithCode\nfrom dao.solvebase import Macro, MacroFunction, MacroRules\nfrom dao.solve import eval as eval_exp\nfrom dao.command import BuiltinFunctionCall\nfrom dao import interlang as il';

  exports.dao = dao = {};

  dao.compileToJSFile = function(exp, env) {
    var code, fs;

    code = compileToJavascript(exp, env);
    fs = require("fs");
    return fs.writeSync('..\test\compiled.js', code);
  };

  compileToJavascript = function(exp, env) {
    'assemble steps from dao expression to javascript code';
    var compiler, fun, original_exp, result;

    original_exp = exp;
    compiler = new Compiler();
    exp = element(exp);
    exp = exp.alpha(env, compiler);
    exp = exp.cps(compiler, compiler.cont);
    exp.analyse(compiler);
    env = new Environment();
    exp = exp.optimize(env, compiler);
    fun = compiler.new_var(new il.ConstLocalVar('compiled_dao_fun'));
    exp = new il.Function(fun, [], exp);
    exp = il.begin(exp.javascriptize(env, compiler)[0]);
    if (isinstance(exp, il.Begin)) {
      exp = exp.statements[0];
    }
    exp.body = exp.body.replace_return_with_pyyield();
    result = exp.to_code(compiler);
    return prelude + result;
  };

  solve = function(exp, env) {
    var compiled;

    compileToJSFile(exp, env);
    compiled = require('../bin/compiled');
    return Solutions(exp, compiled.fun());
  };

  evald = function(exp, env) {
    return solve(exp, env).next();
  };

  BaseCommand = (function() {
    function BaseCommand() {}

    return BaseCommand;

  })();

  Exception = (function() {
    function Exception() {}

    return Exception;

  })();

  DaoStopIteration = (function(_super) {
    __extends(DaoStopIteration, _super);

    function DaoStopIteration() {
      _ref = DaoStopIteration.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    return DaoStopIteration;

  })(Exception);

  DaoUncaughtThrow = (function(_super) {
    __extends(DaoUncaughtThrow, _super);

    function DaoUncaughtThrow(tag) {
      this.tag = tag;
    }

    return DaoUncaughtThrow;

  })(Exception);

  DaoSyntaxError = (function(_super) {
    __extends(DaoSyntaxError, _super);

    function DaoSyntaxError() {
      _ref1 = DaoSyntaxError.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    return DaoSyntaxError;

  })(Exception);

  DaoError = (function(_super) {
    __extends(DaoError, _super);

    function DaoError(message) {
      this.message = message;
    }

    DaoError.prototype.toString = function() {
      return this.message;
    };

    return DaoError;

  })(Exception);

  NoSolution = (function() {
    function NoSolution(exp) {
      this.exp = exp;
    }

    NoSolution.prototype.toString = function() {
      return this.exp.toString();
    };

    return NoSolution;

  })();

  Solutions = (function() {
    function Solutions(exp, solutions) {
      this.exp = exp;
      this.solutions = solutions;
    }

    Solutions.prototype.next = function() {
      var StopIteration;

      try {
        return this.solutions.next();
      } catch (_error) {
        StopIteration = _error;
        throw new NoSolution(this.exp);
      }
    };

    return Solutions;

  })();

  Bindings = (function() {
    function Bindings() {}

    Bindings.prototype.getitem = function(variable) {
      var e;

      try {
        return dict.getitem(variable);
      } catch (_error) {
        e = _error;
        return variable;
      }
    };

    Bindings.prototype.setitem = function(variable, value) {
      return dict.setitem(variable, value);
    };

    Bindings.prototype.detitem = function(variable) {
      var e;

      try {
        return dict.detitem(variable);
      } catch (_error) {
        e = _error;
        return KeyError(function() {});
      }
    };

    Bindings.prototype.copy = function() {
      return Bindings(dict.copy());
    };

    Bindings.prototype.deref = function(exp, bindings) {
      var e, exp_deref;

      try {
        exp_deref = exp.deref;
      } catch (_error) {
        e = _error;
        return exp;
      }
      return exp_deref(bindings);
    };

    Bindings.prototype.get_value = function(exp, memo, bindings) {
      var e, exp_getvalue;

      try {
        exp_getvalue = exp.getvalue;
      } catch (_error) {
        e = _error;
        return exp;
      }
      return exp_getvalue(memo, bindings);
    };

    return Bindings;

  })();

  LogicVar = (function() {
    function LogicVar(name) {
      this.name = name;
    }

    LogicVar.prototype.deref = function(bindings) {
      var next, result;

      while (1) {
        next = bindings[this];
        if (!isinstance(next, LogicVar) || next === this) {
          return next;
        } else {
          result = next;
        }
      }
    };

    LogicVar.prototype.getvalue = function(memo, bindings) {
      var e, result, result_getvalue;

      try {
        return memo[this];
      } catch (_error) {
        e = _error;
        result = LogicVar.deref(bindings);
        if (isinstance(result, LogicVar)) {
          memo[this] = result;
          return result;
        }
        try {
          result_getvalue = result.getvalue;
        } catch (_error) {
          e = _error;
          memo[this] = result;
          return result;
        }
        return result_getvalue(memo, bindings);
      }
    };

    LogicVar.prototype.unify = function(x, y, solver) {
      solver.bindings[x] = y;
      return true;
    };

    LogicVar.prototype.__eq__ = function(x, y) {
      return x.__class__ === y.__class__ && x.name === y.name;
    };

    LogicVar.prototype.__hash__ = function() {
      return hash(this.name);
    };

    LogicVar.prototype.toString = function() {
      return "%s" % this.name;
    };

    return LogicVar;

  })();

  DummyVar = (function(_super) {
    __extends(DummyVar, _super);

    function DummyVar() {
      _ref2 = DummyVar.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    DummyVar.prototype.deref = function(bindings) {
      return this;
    };

    return DummyVar;

  })(LogicVar);

  Cons = (function() {
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }

    Cons.prototype.unify = function(other, solver) {
      if (this.__class__ !== other.__class__) {
        return solver.fail_cont.callOn(false);
      }
      if (solver.unify(this.head, other.head)) {
        if (solver.unify(this.tail, other.tail)) {
          return true;
        }
      }
      return solver.fail_cont.callOn(false);
    };

    Cons.prototype.match = function(other) {
      if (this.__class__ !== other.__class__) {
        return false;
      }
      return match(this.head, other.head) && match(this.tail, other.tail);
    };

    Cons.prototype.unify_rule_head = function(other, env, subst) {
      var _, _i, _len, _ref3, _results;

      if (this.__class__ !== other.__class__) {
        return;
      }
      _ref3 = unify_rule_head(this.head, other.head, env, subst);
      _results = [];
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        _ = _ref3[_i];
        _results.push((function() {
          var _j, _len1, _ref4, _results1;

          _ref4 = unify_rule_head(this.tail, other.tail, env, subst);
          _results1 = [];
          for (_j = 0, _len1 = _ref4.length; _j < _len1; _j++) {
            _ = _ref4[_j];
            _results1.push(pyyield(true));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Cons.prototype.copy_rule_head = function(env) {
      var head, tail;

      head = copy_rule_head(this.head, env);
      tail = copy_rule_head(this.tail, env);
      if (head === this.head && tail === this.tail) {
        return this;
      }
      return Cons(head, tail);
    };

    Cons.prototype.getvalue = function(memo, env) {
      var head, tail;

      head = get_value(this.head, memo, env);
      tail = get_value(this.tail, memo, env);
      return Cons(head, tail);
    };

    Cons.prototype.take_value = function(env) {
      var head, tail;

      head = take_value(this.head, env);
      tail = take_value(this.tail, env);
      if (head === this.head && tail === this.tail) {
        return this;
      }
      return Cons(head, tail);
    };

    Cons.prototype.copy = function(memo) {
      return Cons(copy(this.head, memo), copy(this.tail, memo));
    };

    Cons.prototype.closure = function(env) {
      var head, tail;

      head = closure(this.head, env);
      tail = closure(this.tail, env);
      if (head === this.head && tail === this.tail) {
        return this;
      }
      return Cons(head, tail);
    };

    Cons.prototype.__eq__ = function(other) {
      return this.__class__ === other.__class__ && this.head === other.head && this.tail === other.tail;
    };

    Cons.prototype.__iter__ = function() {
      var tail;

      tail = this;
      while (1) {
        pyyield(tail.head);
        if (tail.tail === nil) {
          return;
        } else if (isinstance(tail.tail, Cons)) {
          tail = tail.tail;
        } else {
          pyyield(tail.tail);
          return;
        }
      }
    };

    Cons.prototype.length = function() {
      var e;

      return len([
        (function() {
          var _i, _len, _results;

          _results = [];
          for (_i = 0, _len = this.length; _i < _len; _i++) {
            e = this[_i];
            _results.push(e);
          }
          return _results;
        }).call(this)
      ]);
    };

    Cons.prototype.toString = function() {
      var e;

      return "L(" + (' '.join([
        (function() {
          var _i, _len, _results;

          _results = [];
          for (_i = 0, _len = this.length; _i < _len; _i++) {
            e = this[_i];
            _results.push(repr(e));
          }
          return _results;
        }).call(this)
      ])) + ")";
    };

    return Cons;

  })();

  cons = function(head, tail) {
    return new Cons(head, tail);
  };

  Nil = (function() {
    function Nil() {}

    Nil.prototype.alpha = function(env, compiler) {
      return new il.Nil();
    };

    Nil.prototype.length = function() {
      return 0;
    };

    Nil.prototype.__iter__ = function() {
      if (0) {
        return pyyield;
      }
    };

    Nil.prototype.toString = function() {
      return 'nil';
    };

    return Nil;

  })();

  nil = new Nil();

  conslist = function() {
    var elements, result, term, _i, _len, _ref3;

    elements = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    result = nil;
    _ref3 = reversed(elements);
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      term = _ref3[_i];
      result = new Cons(term, result);
    }
    return result;
  };

  ({
    cons2tuple: function(item) {
      var x;

      if (!isinstance(item, Cons) && !isinstance(item, list) && !isinstance(item, tuple)) {
        return item;
      } else {
        return tuple((function() {
          var _i, _len, _results;

          _results = [];
          for (_i = 0, _len = item.length; _i < _len; _i++) {
            x = item[_i];
            _results.push(cons2tuple(x));
          }
          return _results;
        })());
      }
    }
  });

  UnquoteSplice = (function() {
    function UnquoteSplice(Qitem) {}

    UnquoteSplice.prototype.toString = function() {
      return ',@%s' % this.item;
    };

    return UnquoteSplice;

  })();

  ExpressionWithCode = (function() {
    var __iter__;

    function ExpressionWithCode(exp, fun) {
      this.exp = exp;
      this.fun = fun;
    }

    ExpressionWithCode.prototype.__eq__ = function(x, y) {
      return (x.__class__ === y.__class__ && x.exp === y.exp) || x.exp === y;
    };

    __iter__ = function() {
      return iter(this.exp);
    };

    ExpressionWithCode.prototype.toString = function() {
      return repr(this.exp);
    };

    return ExpressionWithCode;

  })();

  Macro = (function() {
    function Macro() {}

    return Macro;

  })();

  MacroFunction = (function(_super) {
    __extends(MacroFunction, _super);

    function MacroFunction(fun) {
      this.fun = fun;
    }

    MacroFunction.prototype.callOn = function() {
      var args;

      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.fun.apply(this, args);
    };

    return MacroFunction;

  })(Macro);

  MacroRules = (function(_super) {
    __extends(MacroRules, _super);

    function MacroRules(fun) {
      this.fun = fun;
    }

    MacroRules.prototype.callOn = function() {
      var args;

      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.fun.apply(this, args);
    };

    MacroRules.prototype.default_end_cont = function(v) {
      throw new NoSolution(v);
    };

    return MacroRules;

  })(Macro);

  Solver = (function() {
    function Solver() {
      this.bindings = new Bindings();
      this.parse_state = void 0;
      this.catch_cont_map = {};
      this.cut_cont = this.cut_or_cont = this.fail_cont = default_end_cont;
    }

    Solver.prototype.unify = function(x, y) {
      var e, x_unify, y_unify;

      x = deref(x, this.bindings);
      y = deref(y, this.bindings);
      try {
        x_unify = x.unify;
      } catch (_error) {
        e = _error;
        try {
          y_unify = y.unify;
        } catch (_error) {
          e = _error;
          if (x === y) {
            return true;
          }
        }
        return this.fail_cont.callOn(false);
      }
      return y_unify(x, this);
      return x_unify(y, this);
    };

    Solver.prototype.find_catch_cont = function(tag) {
      var cont_stack, e;

      try {
        cont_stack = this.catch_cont_map[tag];
      } catch (_error) {
        e = _error;
        throw new DaoUncaughtThrow(tag);
      }
      return cont_stack.pop();
    };

    return Solver;

  })();

  CompileError = (function(_super) {
    __extends(CompileError, _super);

    function CompileError() {
      _ref3 = CompileError.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    return CompileError;

  })(Exception);

  CompileTypeError = (function(_super) {
    __extends(CompileTypeError, _super);

    function CompileTypeError(exp) {
      this.exp = exp;
    }

    CompileTypeError.prototype.toString = function() {
      return '%s' % repr(this.exp);
    };

    return CompileTypeError;

  })(CompileError);

  ArityError = (function(_super) {
    __extends(ArityError, _super);

    function ArityError() {
      _ref4 = ArityError.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    return ArityError;

  })(CompileError);

  VariableNotBound = (function(_super) {
    __extends(VariableNotBound, _super);

    function VariableNotBound(variable) {
      this.variable = variable;
    }

    VariableNotBound.prototype.toString = function() {
      return '%s' % repr(this.variable);
    };

    return VariableNotBound;

  })(CompileError);

  DaoNotImplemented = (function(_super) {
    __extends(DaoNotImplemented, _super);

    function DaoNotImplemented(message) {
      this.message = message;
    }

    DaoNotImplemented.prototype.toString = function() {
      return this.message;
    };

    return DaoNotImplemented;

  })(CompileError);

  Environment = (function() {
    'environment for compile, especilly for alpha convert, block/exit/continue';    function Environment(outer) {
      this.outer = outer;
      this.bindings = {};
    }

    Environment.prototype.extend = function() {
      return Environment();
    };

    Environment.prototype.getitem = function(variable) {
      var e, result;

      try {
        return this.bindings[variable];
      } catch (_error) {
        e = _error;
        result = this.outer;
        while (result !== void 0) {
          try {
            return this.bindings[variable];
          } catch (_error) {
            e = _error;
            result = this.outer;
          }
        }
        throw new VariableNotBound(variable);
      }
    };

    Environment.prototype.setitem = function(variable, value) {
      return this.bindings[variable] = value;
    };

    Environment.prototype.toString = function() {
      var result, x;

      result = '';
      while (x !== void 0) {
        result += repr(this.bindings);
        x = this.outer;
      }
      return result;
    };

    return Environment;

  })();

  Compiler = (function() {
    function Compiler(env, options) {
      if (env == null) {
        env = new Environment();
      }
      options = options || {};
      this.newvar_map = {};
      this.cont = options.done || new il.Done(this.new_var(new il.ConstLocalVar('v')));
      this.language = options.language || "javascript";
      this.indent_space = options.indent_space || "  ";
      this.block_label_stack = [];
      this.exit_block_cont_map = {};
      this.next_block_cont_map = {};
      this.continue_block_cont_map = {};
      this.protect_cont = this.cont;
      this.ref_count = {};
      this.called_count = {};
      this.occur_count = {};
      this.recursive_call_path = [];
      this.lamda_stack = [];
      this.recusive_variables_stack = [set()];
    }

    Compiler.prototype.new_var = function(variable) {
      var e, suffix;

      try {
        suffix = str(this.newvar_map[variable.name]);
        this.newvar_map[variable.name] += 1;
        return variable.__class__(variable.name + suffix);
      } catch (_error) {
        e = _error;
        this.newvar_map[variable.name] = 1;
        return variable;
      }
    };

    Compiler.prototype.get_inner_block_label = function() {
      if (this.block_label_stack) {
        return this.block_label_stack[-1][1];
      } else {
        throw new make_new(BlockError("should not escape from top level outside of all block."));
      }
    };

    Compiler.prototype.get_block_label = function(old_label) {
      var i, _i, _len, _ref5;

      _ref5 = range(len(this.block_label_stack));
      for (_i = 0, _len = _ref5.length; _i < _len; _i++) {
        i = _ref5[_i];
        if (old_label === this.block_label_stack[-(i + 1)][0]) {
          return this.block_label_stack[-(i + 1)][1];
        }
        throw new BlockError("Block %s is not found." % old_label);
      }
    };

    Compiler.prototype.indent = function(code, level) {
      var line, lines;

      if (level == null) {
        level = 1;
      }
      'javascript\'s famous indent';
      lines = code.split('\n');
      lines = tuple((function() {
        var _i, _len, _results;

        _results = [];
        for (_i = 0, _len = lines.length; _i < _len; _i++) {
          line = lines[_i];
          _results.push(this.indent_space * level + line);
        }
        return _results;
      }).call(this));
      return '\n'.join(lines);
    };

    return Compiler;

  })();

  MAX_EXTEND_CODE_SIZE = 10;

  import_names = [];

  register_fun = function(name, fun) {
    name = new_func_name(name);
    fun.func_name = name;
    globals()[name] = fun;
    import_names.append(name);
    return fun;
  };

  new_func_name_map = {};

  new_func_name = function(name) {
    var e, suffix;

    try {
      suffix = str(new_func_name_map[name]);
      new_func_name_map[name] += 1;
      return name + suffix;
    } catch (_error) {
      e = _error;
      new_func_name_map[name] = 1;
      return name;
    }
  };

  element = function(exp) {
    var e;

    if (isinstance(exp, Element)) {
      return exp;
    } else {
      try {
        return type_map[type(exp)](exp);
      } catch (_error) {
        e = _error;
        throw new make_new(CompileTypeError(exp));
      }
    }
  };

  Element = (function() {
    function Element() {}

    return Element;

  })();

  Atom = (function(_super) {
    __extends(Atom, _super);

    function Atom(item) {
      this.item = item;
    }

    Atom.prototype.alpha = function(env, compiler) {
      return this;
    };

    Atom.prototype.cps = function(compiler, cont) {
      return cont.callOn(this.interlang());
    };

    Atom.prototype.quasiquote = function(compiler, cont) {
      return cont.callOn(this.interlang());
    };

    Atom.prototype.subst = function(bindings) {
      return this;
    };

    Atom.prototype.interlang = function() {
      return new il.Atom(this.item);
    };

    Atom.prototype.__eq__ = function(x, y) {
      return x.__class__ === y.__class__ && x.item === y.item;
    };

    Atom.prototype.to_code = function(compiler) {
      return "" + this.__class__.__name__ + "(" + this.item + ")";
    };

    Atom.prototype.toString = function() {
      return '%s' % this.item;
    };

    return Atom;

  })(Element);

  Integer = (function(_super) {
    __extends(Integer, _super);

    function Integer() {
      _ref5 = Integer.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    Integer.prototype.__eq__ = function(x, y) {
      return Atom.__eq__(x, y) || (isinstance(y, int) && x.item === y);
    };

    Integer.prototype.interlang = function() {
      return new il.Integer(this.item);
    };

    return Integer;

  })(Atom);

  dao.integer = function(value) {
    return new Integer(1);
  };

  Float = (function(_super) {
    __extends(Float, _super);

    function Float() {
      _ref6 = Float.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    Float.prototype.__eq__ = function(x, y) {
      return Atom.__eq__(x, y) || (isinstance(y, float) && x.item === y);
    };

    Float.prototype.interlang = function() {
      return new il.Float(this.item);
    };

    return Float;

  })(Atom);

  String = (function(_super) {
    __extends(String, _super);

    function String() {
      _ref7 = String.__super__.constructor.apply(this, arguments);
      return _ref7;
    }

    String.prototype.__eq__ = function(x, y) {
      return Atom.__eq__(x, y) || (isinstance(y, str) && x.item === y);
    };

    String.prototype.interlang = function() {
      return new il.String(this.item);
    };

    return String;

  })(Atom);

  List = (function(_super) {
    __extends(List, _super);

    function List() {
      _ref8 = List.__super__.constructor.apply(this, arguments);
      return _ref8;
    }

    List.prototype.__eq__ = function(x, y) {
      return Atom.__eq__(x, y) || (isinstance(y, list) && x.item === y);
    };

    List.prototype.interlang = function() {
      return new il.List(this.item);
    };

    return List;

  })(Atom);

  Dict = (function(_super) {
    __extends(Dict, _super);

    function Dict() {
      _ref9 = Dict.__super__.constructor.apply(this, arguments);
      return _ref9;
    }

    Dict.prototype.__eq__ = function(x, y) {
      return Atom.__eq__(x, y) || (isinstance(y, dict) && x.item === y);
    };

    Dict.prototype.interlang = function() {
      return new il.Dict(this.item);
    };

    return Dict;

  })(Atom);

  Bool = (function(_super) {
    __extends(Bool, _super);

    function Bool() {
      _ref10 = Bool.__super__.constructor.apply(this, arguments);
      return _ref10;
    }

    Bool.prototype.__eq__ = function(x, y) {
      return Atom.__eq__(x, y) || (isinstance(y, bool) && x.item === y);
    };

    Bool.prototype.interlang = function() {
      return new il.Bool(this.item);
    };

    return Bool;

  })(Atom);

  Symbol = (function(_super) {
    __extends(Symbol, _super);

    function Symbol() {
      _ref11 = Symbol.__super__.constructor.apply(this, arguments);
      return _ref11;
    }

    Symbol.prototype.__eq__ = function(x, y) {
      return classeq(x, y) && x.item === y.item;
    };

    Symbol.prototype.interlang = function() {
      return new il.Symbol(this.item);
    };

    return Symbol;

  })(Atom);

  Klass = (function(_super) {
    __extends(Klass, _super);

    function Klass() {
      _ref12 = Klass.__super__.constructor.apply(this, arguments);
      return _ref12;
    }

    Klass.prototype.toString = function() {
      return 'Klass(%s)' % this.item;
    };

    Klass.prototype.interlang = function() {
      return new il.Klass(this.item);
    };

    return Klass;

  })(Atom);

  PyFunction = (function(_super) {
    __extends(PyFunction, _super);

    function PyFunction() {
      _ref13 = PyFunction.__super__.constructor.apply(this, arguments);
      return _ref13;
    }

    PyFunction.prototype.toString = function() {
      return 'PyFunction(%s)' % this.item;
    };

    PyFunction.prototype.interlang = function() {
      return new il.PyFunction(this.item);
    };

    return PyFunction;

  })(Atom);

  TRUE = new Bool(true);

  FALSE = new Bool(false);

  NULL = new Atom(null);

  make_tuple = function(value) {
    var x;

    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Tuple, tuple((function() {
      var _i, _len, _results;

      _results = [];
      for (_i = 0, _len = value.length; _i < _len; _i++) {
        x = value[_i];
        _results.push(element(x));
      }
      return _results;
    })()), function(){});
  };

  Tuple = (function(_super) {
    __extends(Tuple, _super);

    function Tuple() {
      var items;

      items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this.item = items;
    }

    Tuple.prototype.interlang = function() {
      var x;

      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(il.Tuple, tuple((function() {
        var _i, _len, _ref14, _results;

        _ref14 = this.item;
        _results = [];
        for (_i = 0, _len = _ref14.length; _i < _len; _i++) {
          x = _ref14[_i];
          _results.push(x.interlang());
        }
        return _results;
      }).call(this)), function(){});
    };

    Tuple.prototype.to_code = function(compiler) {
      var x;

      return "" + this.__class__.__name__ + "(" + (', '.join([
        (function() {
          var _i, _len, _ref14, _results;

          _ref14 = this.item;
          _results = [];
          for (_i = 0, _len = _ref14.length; _i < _len; _i++) {
            x = _ref14[_i];
            _results.push(repr(x));
          }
          return _results;
        }).call(this)
      ])) + ")";
    };

    Tuple.prototype.__iter__ = function() {
      return iter(this.item);
    };

    Tuple.prototype.toString = function() {
      return "" + this.__class__.__name__ + "(" + this.item + ")";
    };

    return Tuple;

  })(Atom);

  Var = (function(_super) {
    __extends(Var, _super);

    function Var(name) {
      this.name = name;
    }

    Var.prototype.callOn = function() {
      var arg, args;

      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return Apply(tuple((function() {
        var _i, _len, _results;

        _results = [];
        for (_i = 0, _len = args.length; _i < _len; _i++) {
          arg = args[_i];
          _results.push(element(arg));
        }
        return _results;
      })()));
    };

    Var.prototype.alpha = function(env, compiler) {
      return env[this];
    };

    Var.prototype.subst = function(bindings) {
      var e;

      try {
        return bindings[this];
      } catch (_error) {
        e = _error;
        return this;
      }
    };

    Var.prototype.cps = function(compiler, cont) {
      return cont.callOn(this.interlang());
    };

    Var.prototype.cps_convert_unify = function(x, y, compiler, cont) {
      var e, x1, y1;

      try {
        y.cps_convert_unify;
      } catch (_error) {
        e = _error;
        x = x.interlang();
        y = y.interlang();
        x1 = compiler.new_var(new ConstLocalVar(x.name));
        return il.begin(new il.Assign(x1, new il.Deref(x)), new il.If(il.IsLogicVar(x1), il.begin(il.SetBinding(x1, y), il.append_failcont.callOn(compiler, new il.DelBinding(x1)), cont.callOn(il.TRUE)), new il.If(il.Eq(x1, y), cont.callOn(il.TRUE), il.failcont.callOn(il.TRUE))));
      }
      x = x.interlang();
      y = y.interlang();
      x1 = compiler.new_var(new ConstLocalVar(x.name));
      y1 = compiler.new_var(new ConstLocalVar(y.name));
      return il.begin(new il.Assign(x1, new il.Deref(x)), new il.Assign(y1, new il.Deref(y)), new il.If(il.IsLogicVar(x1), il.begin(il.SetBinding(x1, y1), il.append_failcont.callOn(compiler, new il.DelBinding(x1)), cont.callOn(il.TRUE)), il.begin(new il.If(il.IsLogicVar(y1), il.begin(il.SetBinding(y1, x1), il.append_failcont.callOn(compiler, new il.DelBinding(y1)), cont.callOn(il.TRUE)), new il.If(il.Eq(x1, y1), cont.callOn(il.TRUE), il.failcont.callOn(il.TRUE))))));
    };

    Var.prototype.cps_call = function(compiler, cont, args) {
      var arg, body, fun, i, item, macro_args1, macro_args2, v, var1, vars, _i, _len, _ref14;

      throw new make_new(CompileTypeError(this));
      fun = compiler.new_var(new ConstLocalVar('fun'));
      vars = tuple((function() {
        var _i, _len, _ref14, _results;

        _ref14 = range(len(args));
        _results = [];
        for (_i = 0, _len = _ref14.length; _i < _len; _i++) {
          i = _ref14[_i];
          _results.push(compiler.new_var(new ConstLocalVar('a' + repr(i))));
        }
        return _results;
      })());
      body = new il.Apply(fun, [cont] + vars);
      _ref14 = reversed(zip(vars, args));
      for (item = _i = 0, _len = _ref14.length; _i < _len; item = ++_i) {
        var1 = _ref14[item];
        body = item.cps(compiler, il.clamda(var1, body));
        v = compiler.new_var(new ConstLocalVar('v'));
        macro_args1 = tuple((function() {
          var _j, _len1, _results;

          _results = [];
          for (_j = 0, _len1 = args.length; _j < _len1; _j++) {
            arg = args[_j];
            _results.push(il.ExpressionWithCode(arg, new il.Lamda([], arg.cps(compiler, il.clamda(v, v)))));
          }
          return _results;
        })());
        macro_args2 = il.macro_args(macro_args1);
      }
      return this.cps(compiler, il.clamda(fun, new il.If(il.IsMacro(fun), new il.If(il.IsMacroRules(fun), new il.Apply(fun, [cont, macro_args2]), new il.Apply(fun, [cont] + macro_args1)), body)));
    };

    Var.prototype.interlang = function() {
      return new il.Var(this.name);
    };

    Var.prototype.free_vars = function() {
      return set([this]);
    };

    Var.prototype.to_code = function(compiler) {
      return "DaoVar('%s')" % this.name;
    };

    Var.prototype.__eq__ = function(x, y) {
      return classeq(x, y) && x.name === y.name;
    };

    Var.prototype.hash = function() {
      return hash(this.name);
    };

    Var.prototype.toString = function() {
      return "" + this.__class__.__name__ + "('" + this.name + "')";
    };

    return Var;

  })(Element);

  Const = (function(_super) {
    __extends(Const, _super);

    function Const() {
      _ref14 = Const.__super__.constructor.apply(this, arguments);
      return _ref14;
    }

    Const.prototype.interlang = function() {
      return new ConstLocalVar(this.name);
    };

    return Const;

  })(Var);

  LamdaVar = (function(_super) {
    __extends(LamdaVar, _super);

    function LamdaVar() {
      _ref15 = LamdaVar.__super__.constructor.apply(this, arguments);
      return _ref15;
    }

    LamdaVar.prototype.cps_call = function(compiler, cont, args) {
      var body, fun, i, item, v, var1, vars, _i, _len, _ref16;

      fun = this.interlang();
      vars = tuple((function() {
        var _i, _len, _ref16, _results;

        _ref16 = range(len(args));
        _results = [];
        for (_i = 0, _len = _ref16.length; _i < _len; _i++) {
          i = _ref16[_i];
          _results.push(compiler.new_var(new ConstLocalVar('a' + repr(i))));
        }
        return _results;
      })());
      body = new il.Apply(fun, [cont] + vars);
      _ref16 = reversed(zip(vars, args));
      for (item = _i = 0, _len = _ref16.length; _i < _len; item = ++_i) {
        var1 = _ref16[item];
        body = item.cps(compiler, il.clamda(var1, body));
      }
      v = compiler.new_var(make_new(ConstLocalVar('v')));
      return this.cps(compiler, il.clamda(fun, body));
    };

    return LamdaVar;

  })(Var);

  MacroVar = (function(_super) {
    __extends(MacroVar, _super);

    function MacroVar() {
      _ref16 = MacroVar.__super__.constructor.apply(this, arguments);
      return _ref16;
    }

    MacroVar.prototype.cps_call = function(compiler, cont, args) {
      var arg, fun, k, macro_args, v;

      fun = this.interlang();
      k = compiler.new_var(new ConstLocalVar('cont'));
      v = compiler.new_var(new ConstLocalVar('v'));
      macro_args = tuple((function() {
        var _i, _len, _results;

        _results = [];
        for (_i = 0, _len = args.length; _i < _len; _i++) {
          arg = args[_i];
          _results.push(il.Lamda([k], arg.cps(compiler, k)));
        }
        return _results;
      })());
      return this.cps(compiler, il.clamda(fun, new il.Apply(fun, [cont] + macro_args)));
    };

    return MacroVar;

  })(Var);

  ConstLamdaVar = (function(_super) {
    __extends(ConstLamdaVar, _super);

    function ConstLamdaVar() {
      _ref17 = ConstLamdaVar.__super__.constructor.apply(this, arguments);
      return _ref17;
    }

    ConstLamdaVar.prototype.interlang = function() {
      return new ConstLocalVar(this.name);
    };

    return ConstLamdaVar;

  })(LamdaVar);

  ConstMacroVar = (function(_super) {
    __extends(ConstMacroVar, _super);

    function ConstMacroVar() {
      _ref18 = ConstMacroVar.__super__.constructor.apply(this, arguments);
      return _ref18;
    }

    ConstMacroVar.prototype.interlang = function() {
      return new ConstLocalVar(this.name);
    };

    return ConstMacroVar;

  })(MacroVar);

  RecursiveFunctionVar = (function(_super) {
    __extends(RecursiveFunctionVar, _super);

    function RecursiveFunctionVar() {
      _ref19 = RecursiveFunctionVar.__super__.constructor.apply(this, arguments);
      return _ref19;
    }

    RecursiveFunctionVar.prototype.interlang = function() {
      return new il.RecursiveVar(this.name);
    };

    return RecursiveFunctionVar;

  })(ConstLamdaVar);

  RecursiveMacroVar = (function(_super) {
    __extends(RecursiveMacroVar, _super);

    function RecursiveMacroVar() {
      _ref20 = RecursiveMacroVar.__super__.constructor.apply(this, arguments);
      return _ref20;
    }

    RecursiveMacroVar.prototype.interlang = function() {
      return new il.RecursiveVar(this.name);
    };

    return RecursiveMacroVar;

  })(ConstMacroVar);

  LogicVar = (function(_super) {
    __extends(LogicVar, _super);

    function LogicVar() {
      _ref21 = LogicVar.__super__.constructor.apply(this, arguments);
      return _ref21;
    }

    LogicVar.prototype.alpha = function(env, compiler) {
      return this;
    };

    LogicVar.prototype.interlang = function() {
      return new il.LogicVar(this.name);
    };

    LogicVar.prototype.cps = function(compiler, cont) {
      return cont.callOn(il.LogicVar(this.name));
    };

    LogicVar.prototype.to_code = function(compiler) {
      return "DaoLogicVar('%s')" % this.name;
    };

    LogicVar.prototype.__eq__ = function(x, y) {
      return classeq(x, y) && x.name === y.name;
    };

    LogicVar.prototype.toString = function() {
      return "DaoLogicVar('%s')" % this.name;
    };

    return LogicVar;

  })(Var);

  DummyVar = (function(_super) {
    __extends(DummyVar, _super);

    function DummyVar() {
      _ref22 = DummyVar.__super__.constructor.apply(this, arguments);
      return _ref22;
    }

    DummyVar.prototype.interlang = function() {
      return new il.DummyVar(this.name);
    };

    DummyVar.prototype.cps = function(compiler, cont) {
      return cont.callOn(il.Deref(il.DummyVar(this.name)));
    };

    DummyVar.prototype.to_code = function(compiler) {
      return "DaoDummyVar('%s')" % this.name;
    };

    DummyVar.prototype.cons = function(head, tail) {
      return Cons(element(head), element(tail));
    };

    return DummyVar;

  })(LogicVar);

  Cons = (function(_super) {
    __extends(Cons, _super);

    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }

    Cons.prototype.alpha = function(env, compiler) {
      return Cons(this.head.alpha(env, compiler), this.tail.alpha(env, compiler));
    };

    Cons.prototype.cps = function(compiler, cont) {
      return cont.callOn(this.interlang());
    };

    Cons.prototype.interlang = function() {
      return new il.Cons(this.head.interlang(), this.tail.interlang());
    };

    Cons.prototype.cps_convert_unify = function(x, y, compiler, cont) {
      return cps_convert_unify(x, y, compiler, cont);
    };

    Cons.prototype.unify_rule_head = function(other, env, subst) {
      var _, _i, _len, _ref23, _results;

      if (this.__class__ !== other.__class__) {
        return;
      }
      _ref23 = unify_rule_head(this.head, other.head, env, subst);
      _results = [];
      for (_i = 0, _len = _ref23.length; _i < _len; _i++) {
        _ = _ref23[_i];
        _results.push((function() {
          var _j, _len1, _ref24, _results1;

          _ref24 = unify_rule_head(this.tail, other.tail, env, subst);
          _results1 = [];
          for (_j = 0, _len1 = _ref24.length; _j < _len1; _j++) {
            _ = _ref24[_j];
            _results1.push(pyield(true));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Cons.prototype.copy_rule_head = function(env) {
      var head, tail;

      head = copy_rule_head(this.head, env);
      tail = copy_rule_head(this.tail, env);
      if (head === this.head && tail === this.tail) {
        return this;
      }
      return Cons(head, tail);
    };

    Cons.prototype.getvalue = function(env) {
      var head, tail;

      head = getvalue(this.head, env);
      tail = getvalue(this.tail, env);
      if (head === this.head && tail === this.tail) {
        return this;
      }
      return Cons(head, tail);
    };

    Cons.prototype.copy = function(memo) {
      return Cons(copy(this.head, memo), copy(this.tail, memo));
    };

    Cons.prototype.__eq__ = function(other) {
      return this.__class__ === other.__class__ && this.head === other.head && this.tail === other.tail;
    };

    Cons.prototype.__iter__ = function() {
      var tail;

      tail = this;
      while (1) {
        pyield(tail.head);
        if (tail.tail === nil) {
          return;
        } else if (isinstance(tail.tail, Cons)) {
          tail = tail.tail;
        } else {
          pyield(tail.tail);
          return;
        }
      }
    };

    Cons.prototype.length = function() {
      var e;

      return len([
        (function() {
          var _i, _len, _results;

          _results = [];
          for (_i = 0, _len = this.length; _i < _len; _i++) {
            e = this[_i];
            _results.push(e);
          }
          return _results;
        }).call(this)
      ]);
    };

    Cons.prototype.toString = function() {
      var e;

      return "L(" + (' '.join([
        (function() {
          var _i, _len, _results;

          _results = [];
          for (_i = 0, _len = this.length; _i < _len; _i++) {
            e = this[_i];
            _results.push(repr(e));
          }
          return _results;
        }).call(this)
      ])) + ")";
    };

    return Cons;

  })(Element);

  Nil = (function(_super) {
    __extends(Nil, _super);

    function Nil() {
      _ref23 = Nil.__super__.constructor.apply(this, arguments);
      return _ref23;
    }

    Nil.prototype.alpha = function(env, compiler) {
      return this;
    };

    Nil.prototype.interlang = function() {
      return il.nil;
    };

    Nil.prototype.length = function() {
      return 0;
    };

    Nil.prototype.__iter__ = function() {
      if (0) {
        return pyield;
      }
    };

    Nil.prototype.toString = function() {
      return 'nil';
    };

    return Nil;

  })(Element);

  nil = new Nil();

  conslist = function() {
    var elements, result, term, _i, _len, _ref24;

    elements = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    result = nil;
    _ref24 = reversed(elements);
    for (_i = 0, _len = _ref24.length; _i < _len; _i++) {
      term = _ref24[_i];
      result = Cons(element(term), result);
    }
    return result;
  };

  cons2tuple = function(item) {
    var x;

    if (!isinstance(item, Cons) && !isinstance(item, list) && !isinstance(item, tuple)) {
      return item;
    }
    return tuple((function() {
      var _i, _len, _results;

      _results = [];
      for (_i = 0, _len = item.length; _i < _len; _i++) {
        x = item[_i];
        _results.push(cons2tuple(x));
      }
      return _results;
    })());
  };

  cps_convert_unify_two_var = function(x, y, compiler, cont) {
    var x1, y1;

    x = x.interlang();
    y = y.interlang();
    x1 = compiler.new_var(new ConstLocalVar(x.name));
    y1 = compiler.new_var(new ConstLocalVar(y.name));
    return il.begin(new il.Assign(x1, new il.Deref(x)), new il.Assign(y1, new il.Deref(y)), new il.If(il.IsLogicVar(x1), il.begin(il.SetBinding(x1, y1), il.append_failcont.callOn(compiler, new il.DelBinding(x1)), cont.callOn(il.TRUE)), il.begin(il.If(il.IsLogicVar(y1), il.begin(il.SetBinding(y1, x1), il.append_failcont.callOn(compiler, new il.DelBinding(y1)), cont.callOn(il.TRUE)), new il.If(il.Unify(x1, y1), cont.callOn(il.TRUE), il.failcont.callOn(il.TRUE))))));
  };

  cps_convert_unify_one_var = function(x, y, compiler, cont) {
    var x1;

    x = x.interlang();
    y = y.interlang();
    x1 = compiler.new_var(new ConstLocalVar(x.name));
    return il.begin(new il.Assign(x1, new il.Deref(x)), new il.If(il.IsLogicVar(x1), il.begin(il.SetBinding(x1, y), il.append_failcont.callOn(compiler, new il.DelBinding(x1)), cont.callOn(il.TRUE)), new il.If(new il.Unify(x1, y), cont.callOn(il.TRUE), il.failcont.callOn(il.TRUE))));
  };

  cps_convert_unify = function(x, y, compiler, cont) {
    var v;

    if (isinstance(x, Var)) {
      if (isinstance(y, Var)) {
        return cps_convert_unify_two_var(x, y, compiler, cont);
      } else {
        return cps_convert_unify_one_var(x, y, compiler, cont);
      }
    } else {
      if (isinstance(y, Var)) {
        return cps_convert_unify_two_var(y, x, compiler, cont);
      } else {
        if (isinstance(x, Cons) && isinstance(y, Cons)) {
          v = compiler.new_var(new ConstLocalVar('v'));
          return cps_convert_unify(x.head, y.head, compiler, il.clamda(v, cps_convert_unify(x.tail, y.tail, compiler, cont)));
        } else {
          if (x === y) {
            return cont.callOn(il.TRUE);
          } else {
            return il.failcont.callOn(il.FALSE);
          }
        }
      }
    }
  };

  Apply = (function(_super) {
    __extends(Apply, _super);

    function Apply(caller, args) {
      this.caller = caller;
      this.args = args;
    }

    Apply.prototype.alpha = function(env, compiler) {
      var arg;

      return this.__class__(this.caller.alpha(env, compiler), tuple((function() {
        var _i, _len, _ref24, _results;

        _ref24 = this.args;
        _results = [];
        for (_i = 0, _len = _ref24.length; _i < _len; _i++) {
          arg = _ref24[_i];
          _results.push(arg.alpha(env, compiler));
        }
        return _results;
      }).call(this)));
    };

    Apply.prototype.cps = function(compiler, cont) {
      return this.caller.cps_call(compiler, cont, this.args);
    };

    Apply.prototype.subst = function(bindings) {
      var arg;

      return this.__class__(this.caller.subst(bindings), tuple((function() {
        var _i, _len, _ref24, _results;

        _ref24 = this.args;
        _results = [];
        for (_i = 0, _len = _ref24.length; _i < _len; _i++) {
          arg = _ref24[_i];
          _results.push(arg.subst(bindings));
        }
        return _results;
      }).call(this)));
    };

    Apply.prototype.toString = function() {
      var x;

      return "" + this.caller + "(" + (', '.join([
        (function() {
          var _i, _len, _ref24, _results;

          _ref24 = this.args;
          _results = [];
          for (_i = 0, _len = _ref24.length; _i < _len; _i++) {
            x = _ref24[_i];
            _results.push(repr(x));
          }
          return _results;
        }).call(this)
      ])) + ")";
    };

    return Apply;

  })(Element);

  Command = (function(_super) {
    __extends(Command, _super);

    function Command() {
      _ref24 = Command.__super__.constructor.apply(this, arguments);
      return _ref24;
    }

    return Command;

  })(Element);

  CommandCall = (function(_super) {
    __extends(CommandCall, _super);

    function CommandCall(fun, args) {
      this.fun = fun;
      this.args = args;
    }

    CommandCall.prototype.subst = function(bindings) {
      var arg;

      return this.__class__(this.fun, tuple((function() {
        var _i, _len, _ref25, _results;

        _ref25 = this.args;
        _results = [];
        for (_i = 0, _len = _ref25.length; _i < _len; _i++) {
          arg = _ref25[_i];
          _results.push(arg.subst(bindings));
        }
        return _results;
      }).call(this)));
    };

    CommandCall.prototype.quasiquote = function(compiler, cont) {
      var arg, body, fun, i, result, t, var1, vars, _i, _len, _ref25;

      result = compiler.new_var(il.LocalVar('result'));
      vars = tuple((function() {
        var _i, _len, _ref25, _results;

        _ref25 = range(len(this.args));
        _results = [];
        for (_i = 0, _len = _ref25.length; _i < _len; _i++) {
          i = _ref25[_i];
          _results.push(compiler.new_var(new ConstLocalVar('a' + repr(i))));
        }
        return _results;
      }).call(this));
      t = tuple((function() {
        var _i, _len, _ref25, _results;

        _ref25 = vars + [cont.callOn(il.Call(il.Klass(this.__class__.__name__), new il.QuoteItem(this.fun), new il.MakeTuple(result)))];
        _results = [];
        for (_i = 0, _len = _ref25.length; _i < _len; _i++) {
          var1 = _ref25[_i];
          _results.push(new il.If(il.Isinstance(var1, new il.Klass('UnquoteSplice')), new il.AddAssign(result, new il.Call(il.Symbol('list'), new il.Attr(var1, new il.Symbol('item')))), new il.ListAppend(result, var1)));
        }
        return _results;
      }).call(this), body = [il.Assign(result, il.empty_list)] + t);
      fun = il.begin.apply(il, body);
      _ref25 = reversed(zip(vars, this.args));
      for (arg = _i = 0, _len = _ref25.length; _i < _len; arg = ++_i) {
        var1 = _ref25[arg];
        fun = arg.quasiquote(compiler, il.clamda(var1, fun));
      }
      return fun;
    };

    CommandCall.prototype.__eq__ = function(x, y) {
      return classeq(x, y) && x.fun === y.fun && x.args === y.args;
    };

    CommandCall.prototype.toString = function() {
      var x;

      return "" + this.fun + "(" + (', '.join([
        (function() {
          var _i, _len, _ref25, _results;

          _ref25 = this.args;
          _results = [];
          for (_i = 0, _len = _ref25.length; _i < _len; _i++) {
            x = _ref25[_i];
            _results.push(repr(x));
          }
          return _results;
        }).call(this)
      ])) + ")";
    };

    return CommandCall;

  })(Element);

  Special = (function(_super) {
    __extends(Special, _super);

    function Special(fun) {
      this.fun = fun;
    }

    Special.prototype.callOn = function() {
      var arg, args;

      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      args = tuple((function() {
        var _i, _len, _results;

        _results = [];
        for (_i = 0, _len = args.length; _i < _len; _i++) {
          arg = args[_i];
          _results.push(element(arg));
        }
        return _results;
      })());
      return SpecialCall(args);
    };

    Special.prototype.toString = function() {
      return this.fun.__name__;
    };

    return Special;

  })(Command);

  special = Special;

  ({
    quasiquote_args: function(args) {
      var e, x, y, _i, _j, _len, _len1, _ref25, _ref26, _results, _results1;

      if (!args) {
        return pyield([]);
      } else if (len(args) === 1) {
        _ref25 = this.quasiquote(args[0]);
        _results = [];
        for (_i = 0, _len = _ref25.length; _i < _len; _i++) {
          x = _ref25[_i];
          try {
            _results.push(pyield(x.unquote_splice));
          } catch (_error) {
            e = _error;
            _results.push(pyield([x]));
          }
        }
        return _results;
      } else {
        _ref26 = this.quasiquote(args[0]);
        _results1 = [];
        for (_j = 0, _len1 = _ref26.length; _j < _len1; _j++) {
          x = _ref26[_j];
          _results1.push((function() {
            var _k, _len2, _ref27, _results2;

            _ref27 = this.quasiquote_args(args.slice(1));
            _results2 = [];
            for (_k = 0, _len2 = _ref27.length; _k < _len2; _k++) {
              y = _ref27[_k];
              try {
                x = x.unquote_splice;
              } catch (_error) {
                e = _error;
                x = [x];
              }
              _results2.push(pyield(x + y));
            }
            return _results2;
          }).call(this));
        }
        return _results1;
      }
    }
  });

  SpecialCall = (function(_super) {
    __extends(SpecialCall, _super);

    function SpecialCall(command, args) {
      this.command = command;
      this.args = args;
      this.fun = command.fun;
    }

    SpecialCall.prototype.alpha = function(env, compiler) {
      var arg;

      return this.__class__(this.command, tuple((function() {
        var _i, _len, _ref25, _results;

        _ref25 = this.args;
        _results = [];
        for (_i = 0, _len = _ref25.length; _i < _len; _i++) {
          arg = _ref25[_i];
          _results.push(arg.alpha(env, compiler));
        }
        return _results;
      }).call(this)));
    };

    SpecialCall.prototype.cps = function(compiler, cont) {
      return this.fun.apply(this, [compiler, cont].concat(__slice.call(this.args)));
    };

    SpecialCall.prototype.to_code = function(compiler) {
      var x;

      return "" + this.fun.__name__ + "(" + (', '.join([
        (function() {
          var _i, _len, _ref25, _results;

          _ref25 = this.args;
          _results = [];
          for (_i = 0, _len = _ref25.length; _i < _len; _i++) {
            x = _ref25[_i];
            _results.push(x.to_code(compiler));
          }
          return _results;
        }).call(this)
      ])) + ")";
    };

    SpecialCall.prototype.free_vars = function() {
      var arg, result, _i, _len, _ref25;

      result = set();
      _ref25 = this.args;
      for (_i = 0, _len = _ref25.length; _i < _len; _i++) {
        arg = _ref25[_i];
        result |= arg.free_vars();
      }
      return result;
    };

    SpecialCall.prototype.toString = function() {
      var x;

      return "" + this.fun.__name__ + "(" + (', '.join(tuple((function() {
        var _i, _len, _ref25, _results;

        _ref25 = this.args;
        _results = [];
        for (_i = 0, _len = _ref25.length; _i < _len; _i++) {
          x = _ref25[_i];
          _results.push(repr(x));
        }
        return _results;
      }).call(this)))) + ")";
    };

    return SpecialCall;

  })(CommandCall);

  BuiltinFunction = (function(_super) {
    __extends(BuiltinFunction, _super);

    function BuiltinFunction(name, fun) {
      this.name = name;
      this.fun = fun;
    }

    BuiltinFunction.prototype.callOn = function() {
      var arg, args;

      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      args = tuple((function() {
        var _i, _len, _results;

        _results = [];
        for (_i = 0, _len = args.length; _i < _len; _i++) {
          arg = args[_i];
          _results.push(element(arg));
        }
        return _results;
      })());
      return BuiltinFunctionCall(args);
    };

    BuiltinFunction.prototype.cps = function(compiler, cont) {
      var _ref25;

      return new il.Lamda(params, (_ref25 = this.fun).fun.apply(_ref25, params));
    };

    BuiltinFunction.prototype.analyse = function(compiler) {
      return this;
    };

    BuiltinFunction.prototype.subst = function(bindings) {
      return this;
    };

    BuiltinFunction.prototype.optimize = function(env, compiler) {
      return this;
    };

    BuiltinFunction.prototype.javascriptize = function(env, compiler) {
      return [];
    };

    BuiltinFunction.prototype.toString = function() {
      return this.name;
    };

    return BuiltinFunction;

  })(Command);

  BuiltinFunctionCall = (function(_super) {
    __extends(BuiltinFunctionCall, _super);

    function BuiltinFunctionCall() {
      _ref25 = BuiltinFunctionCall.__super__.constructor.apply(this, arguments);
      return _ref25;
    }

    BuiltinFunctionCall.prototype.alpha = function(env, compiler) {
      var arg;

      return this.__class__(this.fun, tuple((function() {
        var _i, _len, _ref26, _results;

        _ref26 = this.args;
        _results = [];
        for (_i = 0, _len = _ref26.length; _i < _len; _i++) {
          arg = _ref26[_i];
          _results.push(arg.alpha(env, compiler));
        }
        return _results;
      }).call(this)));
    };

    BuiltinFunctionCall.prototype.cps = function(compiler, cont) {
      var arg, args, fun, i, var1, vars, _i, _len, _ref26, _ref27;

      args = this.args;
      vars = tuple((function() {
        var _i, _len, _ref26, _results;

        _ref26 = range(len(args));
        _results = [];
        for (_i = 0, _len = _ref26.length; _i < _len; _i++) {
          i = _ref26[_i];
          _results.push(compiler.new_var(new ConstLocalVar('a' + repr(i))));
        }
        return _results;
      })());
      fun = cont.callOn((_ref26 = this.fun).fun.apply(_ref26, vars));
      _ref27 = reversed(zip(vars, args));
      for (arg = _i = 0, _len = _ref27.length; _i < _len; arg = ++_i) {
        var1 = _ref27[arg];
        fun = arg.cps(compiler, new il.Clamda(var1, fun));
      }
      return fun;
    };

    BuiltinFunctionCall.prototype.analyse = function(compiler) {};

    BuiltinFunctionCall.prototype.optimize = function(env, compiler) {
      return this;
    };

    BuiltinFunctionCall.prototype.interlang = function() {
      return this;
    };

    BuiltinFunctionCall.prototype.free_vars = function() {
      var arg, result, _i, _len, _ref26;

      result = set();
      _ref26 = this.args;
      for (_i = 0, _len = _ref26.length; _i < _len; _i++) {
        arg = _ref26[_i];
        result |= arg.free_vars();
      }
      return result;
    };

    BuiltinFunctionCall.prototype.javascriptize = function(env, compiler) {
      return [this];
    };

    BuiltinFunctionCall.prototype.to_code = function(compiler) {
      var x;

      return "" + this.fun.name + "(" + (', '.join([
        (function() {
          var _i, _len, _ref26, _results;

          _ref26 = this.args;
          _results = [];
          for (_i = 0, _len = _ref26.length; _i < _len; _i++) {
            x = _ref26[_i];
            _results.push(x.to_code(compiler));
          }
          return _results;
        }).call(this)
      ])) + ")";
    };

    BuiltinFunctionCall.prototype.toString = function() {
      var x;

      return "" + this.fun.name + "(" + (', '.join([
        (function() {
          var _i, _len, _ref26, _results;

          _ref26 = this.args;
          _results = [];
          for (_i = 0, _len = _ref26.length; _i < _len; _i++) {
            x = _ref26[_i];
            _results.push(x.to_code(compiler));
          }
          return _results;
        }).call(this)
      ])) + ")";
    };

    BuiltinFunctionCall.prototype.assign = function(var1, exp) {
      return Assign(var1, element(exp));
    };

    return BuiltinFunctionCall;

  })(CommandCall);

  MultiAssignToConstError = (function() {
    function MultiAssignToConstError(_const) {
      this["const"] = _const;
    }

    MultiAssignToConstError.prototype.toString = function() {
      return repr(this["const"]);
    };

    return MultiAssignToConstError;

  })();

  Assign = (function(_super) {
    __extends(Assign, _super);

    function Assign(var1, exp) {
      this.var1 = var1;
      this.exp = exp;
    }

    Assign.prototype.subst = function(bindings) {
      return Assign(this.var1, this.exp.subst(bindings));
    };

    Assign.prototype.alpha = function(env, compiler) {
      var var1;

      try {
        var1 = env[this.var1];
      } catch (_error) {
        VariableNotBound = _error;
        env[this.var1] = var1 = compiler.new_var(this.var1);
        if (isinstance(var1, Const)) {
          var1.assigned = true;
          return Assign(var1, this.exp.alpha(env, compiler));
        }
      }
      if (isinstance(var1, Const) && var1.assigned) {
        throw new make_new(MultiAssignToConstError(var1));
        return Assign(var1, this.exp.alpha(env, compiler));
      }
    };

    Assign.prototype.cps = function(compiler, cont) {
      var v;

      v = compiler.new_var(new ConstLocalVar('v'));
      return this.exp.cps(compiler, il.clamda(v, new il.Assign(this.var1.interlang(), v), cont.callOn(v)));
    };

    Assign.prototype.__eq__ = function(x, y) {
      return classeq(x, y) && x.var1 === y.var1 && x.exp === y.exp;
    };

    Assign.prototype.to_code = function(compiler) {
      return repr(this);
    };

    Assign.prototype.toString = function() {
      return "assign" + this.var1 + ", " + this.exp + ")";
    };

    Assign.prototype.direct_interlang = function() {
      var exps;

      exps = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return DirectInterlang(il.begin.apply(il, exps));
    };

    return Assign;

  })(CommandCall);

  DirectInterlang = (function(_super) {
    __extends(DirectInterlang, _super);

    function DirectInterlang(body) {
      this.body = body;
    }

    DirectInterlang.prototype.alpha = function(env, compiler) {
      return this;
    };

    DirectInterlang.prototype.cps = function(compiler, cont) {
      return cont.callOn(this.body);
    };

    DirectInterlang.prototype.expression_with_code = function(compiler, cont, exp) {
      var v;

      v = compiler.new_var(new ConstLocalVar('v'));
      return cont.callOn(il.ExpressionWithCode(exp, new il.Lamda([], exp.cps(compiler, il.clamda(v, v)))));
    };

    return DirectInterlang;

  })(Element);

  type_map = {
    int: Integer,
    float: Float,
    str: String,
    unicode: String({
      tuple: make_tuple,
      list: List,
      dict: Dict,
      bool: Bool
    })
  };

  il = interlang = {};

  (function() {
    var AttrCall_to_code, Call_to_code, Concat_to_code, Format_to_code, QuoteItem_to_code, SetBindings, SetCutCont, SetParseState, append_failcont, catch_cont_map, cfunction, clamda, continue_, empty_dict, empty_list, for_, if_, javascriptize_args, no_side_effects, optimize_args, vop, vop2, _ref26, _ref27, _ref28, _ref29, _ref30, _ref31, _ref32, _ref33, _ref34, _ref35, _ref36, _ref37, _ref38, _ref39, _ref40, _ref41, _ref42, _ref43, _ref44, _ref45, _ref46, _ref47, _ref48;

    il.unknown = -1;
    il.element = function(exp) {
      var e;

      if (isinstance(exp, il.Element)) {
        return exp;
      } else {
        try {
          return type_map[type(exp)](exp);
        } catch (_error) {
          e = _error;
          throw new make_new(CompileTypeError(exp));
        }
      }
    };
    no_side_effects = function(exp) {
      ({
        fun: function() {
          return false;
        }
      });
      exp.side_effects = fun;
      return exp;
    };
    optimize_args = function(args, env, compiler) {
      var arg, result, _i, _len;

      result = [];
      for (_i = 0, _len = args.length; _i < _len; _i++) {
        arg = args[_i];
        arg = arg.optimize(env, compiler);
        if (arg !== void 0) {
          result.append(arg);
        }
      }
      return tuple(result);
    };
    javascriptize_args = function(args, env, compiler) {
      var arg, exps, exps2, result_args, _i, _len;

      result_args = [];
      exps = [];
      for (_i = 0, _len = args.length; _i < _len; _i++) {
        arg = args[_i];
        exps2 = arg.javascriptize(env, compiler);
        result_args.append(exps2[-1]);
        exps += exps2.slice(0);
        return [exps, result_arg];
      }
    };
    il.Element = (function() {
      function Element() {}

      Element.prototype.tail_recursive_convert = function() {
        return this;
      };

      Element.prototype.find_assign_lefts = function() {
        return set();
      };

      Element.prototype.replace_return_with_yield = function() {
        return this;
      };

      Element.prototype.interlang = function() {
        return this;
      };

      Element.prototype.__eq__ = function(x, y) {
        return classeq(x, y);
      };

      Element.prototype.toString = function() {
        return this.__class__.__name__;
      };

      return Element;

    })();
    il.Atom = (function(_super) {
      __extends(Atom, _super);

      function Atom(item) {
        this.item = item;
      }

      Atom.prototype.find_assign_lefts = function() {
        return set();
      };

      Atom.prototype.analyse = function(compiler) {};

      Atom.prototype.side_effects = function() {
        return false;
      };

      Atom.prototype.subst = function(bindings) {
        return this;
      };

      Atom.prototype.optimize = function(env, compiler) {
        return this;
      };

      Atom.prototype.replace_assign = function(compiler) {
        return this;
      };

      Atom.prototype.tail_recursive_convert = function() {
        return this;
      };

      Atom.prototype.insert_return_statement = function() {
        return Return(this);
      };

      Atom.prototype.replace_return_with_yield = function() {
        return this;
      };

      Atom.prototype.javascriptize = function(env, compiler) {
        return [this];
      };

      Atom.prototype.code_size = function() {
        return 1;
      };

      Atom.prototype.to_code = function(compiler) {
        return repr(this.item);
      };

      Atom.prototype.free_vars = function() {
        return set();
      };

      Atom.prototype.bool = function() {
        if (this.item) {
          return true;
        } else {
          return false;
        }
      };

      Atom.prototype.__eq__ = function(x, y) {
        return classeq(x, y) && x.item === y.item;
      };

      Atom.prototype.__hash__ = function() {
        return hash(this.item);
      };

      Atom.prototype.toString = function() {
        return '%s' % this.item;
      };

      return Atom;

    })(il.Element);
    il.ConstAtom = (function(_super) {
      __extends(ConstAtom, _super);

      function ConstAtom() {
        _ref26 = ConstAtom.__super__.constructor.apply(this, arguments);
        return _ref26;
      }

      return ConstAtom;

    })(il.Atom);
    il.Integer = (function(_super) {
      __extends(Integer, _super);

      function Integer() {
        _ref27 = Integer.__super__.constructor.apply(this, arguments);
        return _ref27;
      }

      Integer.prototype.__eq__ = function(x, y) {
        return ConstAtom.__eq__(x, y) || (isinstance(y, int) && x.item === y);
      };

      return Integer;

    })(il.ConstAtom);
    il.Float = (function(_super) {
      __extends(Float, _super);

      function Float() {
        _ref28 = Float.__super__.constructor.apply(this, arguments);
        return _ref28;
      }

      Float.prototype.__eq__ = function(x, y) {
        return ConstAtom.__eq__(x, y) || (isinstance(y, float) && x.item === y);
      };

      return Float;

    })(il.ConstAtom);
    il.String = (function(_super) {
      __extends(String, _super);

      function String() {
        _ref29 = String.__super__.constructor.apply(this, arguments);
        return _ref29;
      }

      String.prototype.__eq__ = function(x, y) {
        return ConstAtom.__eq__(x, y) || (isinstance(y, str) && x.item === y);
      };

      return String;

    })(il.ConstAtom);
    il.Bool = (function(_super) {
      __extends(Bool, _super);

      function Bool() {
        _ref30 = Bool.__super__.constructor.apply(this, arguments);
        return _ref30;
      }

      Bool.prototype.__eq__ = function(x, y) {
        return ConstAtom.__eq__(x, y) || (isinstance(y, bool) && x.item === y);
      };

      return Bool;

    })(il.ConstAtom);
    il.Symbol = (function(_super) {
      __extends(Symbol, _super);

      function Symbol() {
        _ref31 = Symbol.__super__.constructor.apply(this, arguments);
        return _ref31;
      }

      Symbol.prototype.to_code = function(compiler) {
        return this.item;
      };

      return Symbol;

    })(il.ConstAtom);
    il.Klass = (function(_super) {
      __extends(Klass, _super);

      function Klass() {
        _ref32 = Klass.__super__.constructor.apply(this, arguments);
        return _ref32;
      }

      Klass.prototype.to_code = function(compiler) {
        return this.item;
      };

      Klass.prototype.toString = function() {
        return 'il.Klass(%s)' % this.item;
      };

      return Klass;

    })(il.ConstAtom);
    il.PyFunction = (function(_super) {
      __extends(PyFunction, _super);

      function PyFunction() {
        _ref33 = PyFunction.__super__.constructor.apply(this, arguments);
        return _ref33;
      }

      PyFunction.prototype.to_code = function(compiler) {
        return this.item.func_name;
      };

      PyFunction.prototype.toString = function() {
        return 'il.PyFunction(%s)' % this.item;
      };

      return PyFunction;

    })(il.ConstAtom);
    il.TRUE = new il.Bool(true);
    il.FALSE = new il.Bool(false);
    il.NULL = new il.Atom(null);
    make_tuple = function(item) {
      var x;

      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(il.Tuple, tuple((function() {
        var _i, _len, _results;

        _results = [];
        for (_i = 0, _len = item.length; _i < _len; _i++) {
          x = item[_i];
          _results.push(element(x));
        }
        return _results;
      })()), function(){});
    };
    il.Tuple = (function(_super) {
      __extends(Tuple, _super);

      function Tuple() {
        var item;

        item = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        this.item = item;
      }

      Tuple.prototype.find_assign_lefts = function() {
        return set();
      };

      Tuple.prototype.analyse = function(compiler) {
        var x, _i, _len, _ref34, _results;

        _ref34 = this.item;
        _results = [];
        for (_i = 0, _len = _ref34.length; _i < _len; _i++) {
          x = _ref34[_i];
          _results.push(x.analyse(compiler));
        }
        return _results;
      };

      Tuple.prototype.side_effects = function() {
        return false;
      };

      Tuple.prototype.subst = function(bindings) {
        var x;

        return Tuple.apply(null, tuple((function() {
          var _i, _len, _ref34, _results;

          _ref34 = this.item;
          _results = [];
          for (_i = 0, _len = _ref34.length; _i < _len; _i++) {
            x = _ref34[_i];
            _results.push(x.subst(bindings));
          }
          return _results;
        }).call(this)));
      };

      Tuple.prototype.code_size = function() {
        var x;

        return sum([
          (function() {
            var _i, _len, _ref34, _results;

            _ref34 = this.item;
            _results = [];
            for (_i = 0, _len = _ref34.length; _i < _len; _i++) {
              x = _ref34[_i];
              _results.push(x.code_size());
            }
            return _results;
          }).call(this)
        ]);
      };

      Tuple.prototype.optimize = function(env, compiler) {
        var x;

        return Tuple.apply(null, tuple((function() {
          var _i, _len, _ref34, _results;

          _ref34 = this.item;
          _results = [];
          for (_i = 0, _len = _ref34.length; _i < _len; _i++) {
            x = _ref34[_i];
            _results.push(x.optimize(env, compiler));
          }
          return _results;
        }).call(this)));
      };

      Tuple.prototype.to_code = function(compiler) {
        var x;

        if (len(this.item) !== 1) {
          return "(" + (', '.join([
            (function() {
              var _i, _len, _ref34, _results;

              _ref34 = this.item;
              _results = [];
              for (_i = 0, _len = _ref34.length; _i < _len; _i++) {
                x = _ref34[_i];
                _results.push(x.to_code(compiler));
              }
              return _results;
            }).call(this)
          ])) + ")";
        } else {
          return "(" + (this.item[0].to_code(compiler)) + ", )";
        }
      };

      Tuple.prototype.__eq__ = function(x, y) {
        return classeq(x, y) && x.item === y.item;
      };

      Tuple.prototype.toString = function() {
        return "il." + this.__class__.__name__ + "(" + this.item + ")";
      };

      return Tuple;

    })(il.ConstAtom);
    il.MutableAtom = (function(_super) {
      __extends(MutableAtom, _super);

      function MutableAtom() {
        _ref34 = MutableAtom.__super__.constructor.apply(this, arguments);
        return _ref34;
      }

      return MutableAtom;

    })(il.Atom);
    il.List = (function(_super) {
      __extends(List, _super);

      function List() {
        _ref35 = List.__super__.constructor.apply(this, arguments);
        return _ref35;
      }

      List.prototype.__eq__ = function(x, y) {
        return (classeq(x, y) && x.item === y.item) || (isinstance(y, list) && x.item === y);
      };

      return List;

    })(il.MutableAtom);
    il.Dict = (function(_super) {
      __extends(Dict, _super);

      function Dict() {
        _ref36 = Dict.__super__.constructor.apply(this, arguments);
        return _ref36;
      }

      Dict.prototype.__eq__ = function(x, y) {
        return Atom.__eq__(x, y) || (isinstance(y, dict) && x.item === y);
      };

      Dict.prototype.macro_args = function(item) {
        return MacroArgs(item);
      };

      return Dict;

    })(il.MutableAtom);
    il.MacroArgs = (function(_super) {
      __extends(MacroArgs, _super);

      function MacroArgs(item) {
        this.item = item;
      }

      MacroArgs.prototype.find_assign_lefts = function() {
        return set();
      };

      MacroArgs.prototype.analyse = function(compiler) {
        var x, _i, _len, _ref37, _results;

        _ref37 = this.item;
        _results = [];
        for (_i = 0, _len = _ref37.length; _i < _len; _i++) {
          x = _ref37[_i];
          _results.push(x.analyse(compiler));
        }
        return _results;
      };

      MacroArgs.prototype.optimize = function(env, compiler) {
        return MacroArgs(optimize_args(this.item, env, compiler));
      };

      MacroArgs.prototype.side_effects = function() {
        return false;
      };

      MacroArgs.prototype.free_vars = function() {
        var result, x, _i, _len, _ref37;

        result = set();
        _ref37 = this.item;
        for (_i = 0, _len = _ref37.length; _i < _len; _i++) {
          x = _ref37[_i];
          result |= x.free_vars();
        }
        return result;
      };

      MacroArgs.prototype.subst = function(bindings) {
        var x;

        return MacroArgs(tuple((function() {
          var _i, _len, _ref37, _results;

          _ref37 = this.item;
          _results = [];
          for (_i = 0, _len = _ref37.length; _i < _len; _i++) {
            x = _ref37[_i];
            _results.push(x.subst(bindings));
          }
          return _results;
        }).call(this)));
      };

      MacroArgs.prototype.javascriptize = function(env, compiler) {
        var arg, args, exps, exps1, _i, _len, _ref37;

        exps = [];
        args = [];
        _ref37 = this.item;
        for (_i = 0, _len = _ref37.length; _i < _len; _i++) {
          arg = _ref37[_i];
          exps1 = arg.javascriptize(env, compiler);
          exps += exps1.slice(0);
          args.append(exps1[-1]);
          exps.append(MacroArgs(tuple(args)));
        }
        return tuple(exps);
      };

      MacroArgs.prototype.code_size = function() {
        var x;

        return sum([
          (function() {
            var _i, _len, _ref37, _results;

            _ref37 = this.item;
            _results = [];
            for (_i = 0, _len = _ref37.length; _i < _len; _i++) {
              x = _ref37[_i];
              _results.push(x.code_size());
            }
            return _results;
          }).call(this)
        ]);
      };

      MacroArgs.prototype.to_code = function(compiler) {
        var x;

        if (len(this.item) !== 1) {
          return '(%s)' % ', '.join([
            (function() {
              var _i, _len, _ref37, _results;

              _ref37 = this.item;
              _results = [];
              for (_i = 0, _len = _ref37.length; _i < _len; _i++) {
                x = _ref37[_i];
                _results.push(x.to_code(compiler));
              }
              return _results;
            }).call(this)
          ]);
        } else {
          return '(%s, )' % this.item[0].to_code(compiler);
        }
      };

      MacroArgs.prototype.__eq__ = function(x, y) {
        return classeq(x, y) && x.item === y.item;
      };

      MacroArgs.prototype.toString = function() {
        return "il." + this.__class__.__name__ + "(" + this.item + ")";
      };

      return MacroArgs;

    })(il.Element);
    il.Return = (function(_super) {
      __extends(Return, _super);

      function Return() {
        var args;

        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        this.args = args;
      }

      Return.prototype.analyse = function(compiler) {
        var arg, _i, _len, _ref37, _results;

        _ref37 = this.args;
        _results = [];
        for (_i = 0, _len = _ref37.length; _i < _len; _i++) {
          arg = _ref37[_i];
          _results.push(arg.analyse(compiler));
        }
        return _results;
      };

      Return.prototype.code_size = function() {
        var x;

        return sum([
          (function() {
            var _i, _len, _ref37, _results;

            _ref37 = this.args;
            _results = [];
            for (_i = 0, _len = _ref37.length; _i < _len; _i++) {
              x = _ref37[_i];
              _results.push(code_size(x));
            }
            return _results;
          }).call(this)
        ]);
      };

      Return.prototype.side_effects = function() {
        return false;
      };

      Return.prototype.free_vars = function() {
        var result, x, _i, _len, _ref37;

        result = set();
        _ref37 = this.args;
        for (_i = 0, _len = _ref37.length; _i < _len; _i++) {
          x = _ref37[_i];
          result |= x.free_vars();
        }
        return result;
      };

      Return.prototype.subst = function(bindings) {
        var arg;

        return this.__class__.apply(this, tuple((function() {
          var _i, _len, _ref37, _results;

          _ref37 = this.args;
          _results = [];
          for (_i = 0, _len = _ref37.length; _i < _len; _i++) {
            arg = _ref37[_i];
            _results.push(arg.subst(bindings));
          }
          return _results;
        }).call(this)));
      };

      Return.prototype.optimize = function(env, compiler) {
        var arg, _i, _len, _ref37;

        if (len(this.args) === 1 && isinstance(this.args[0], Return)) {
          return this.__class__.apply(this, this.args[0].args);
        } else {
          _ref37 = this.args;
          for (_i = 0, _len = _ref37.length; _i < _len; _i++) {
            arg = _ref37[_i];
            if (isinstance(arg, Return)) {
              throw new make_new(CompileError);
            }
          }
          return this.__class__.apply(this, optimize_args(this.args, env, compiler));
        }
      };

      Return.prototype.javascriptize = function(env, compiler) {
        var args, exps, _ref37;

        if (len(this.args) === 1 && isinstance(this.args[0], Begin)) {
          return Begin(this.args[0].statements.slice(0) + [Return(this.args[0].statements[-1])]).javascriptize(env, compiler);
        } else if (len(this.args) === 1 && isinstance(this.args[0], If)) {
          return If(this.args[0].test, Return(this.args[0].then), Return(this.args[0].else_)).javascriptize(env, compiler);
        }
        _ref37 = javascriptize_args(this.args, env, compiler), exps = _ref37[0], args = _ref37[1];
        return [exps + [this.__class__.apply(this, args)], true];
      };

      Return.prototype.to_code = function(compiler) {
        var x;

        return "return " + (', '.join([
          (function() {
            var _i, _len, _ref37, _results;

            _ref37 = this.args;
            _results = [];
            for (_i = 0, _len = _ref37.length; _i < _len; _i++) {
              x = _ref37[_i];
              _results.push(x.to_code(compiler));
            }
            return _results;
          }).call(this)
        ]));
      };

      Return.prototype.insert_return_statement = function() {
        return Return.apply(null, this.args);
      };

      Return.prototype.replace_return_with_yield = function() {
        return Begin([Yield.apply(null, this.args), Return()]);
      };

      Return.prototype.__eq__ = function(x, y) {
        return classeq(x, y) && x.args === y.args;
      };

      Return.prototype.toString = function() {
        var x;

        return "il.Return(" + (','.join([
          (function() {
            var _i, _len, _ref37, _results;

            _ref37 = this.args;
            _results = [];
            for (_i = 0, _len = _ref37.length; _i < _len; _i++) {
              x = _ref37[_i];
              _results.push(repr(x));
            }
            return _results;
          }).call(this)
        ])) + ")";
      };

      return Return;

    })(il.Element);
    il.Yield = (function(_super) {
      __extends(Yield, _super);

      function Yield() {
        _ref37 = Yield.__super__.constructor.apply(this, arguments);
        return _ref37;
      }

      Yield.prototype.to_code = function(compiler) {
        var x;

        return "pyield " + (', '.join([
          (function() {
            var _i, _len, _ref38, _results;

            _ref38 = this.args;
            _results = [];
            for (_i = 0, _len = _ref38.length; _i < _len; _i++) {
              x = _ref38[_i];
              _results.push(x.to_code(compiler));
            }
            return _results;
          }).call(this)
        ]));
      };

      Yield.prototype.insert_return_statement = function() {
        return this;
      };

      Yield.prototype.toString = function() {
        var x;

        return "il.Yield(" + (', '.join([
          (function() {
            var _i, _len, _ref38, _results;

            _ref38 = this.args;
            _results = [];
            for (_i = 0, _len = _ref38.length; _i < _len; _i++) {
              x = _ref38[_i];
              _results.push(repr(x));
            }
            return _results;
          }).call(this)
        ])) + ")";
      };

      return Yield;

    })(il.Return);
    il.Try = (function(_super) {
      __extends(Try, _super);

      function Try(test, body) {
        this.test = test;
        this.body = body;
      }

      Try.prototype.find_assign_lefts = function() {
        return this.body.find_assign_lefts();
      };

      Try.prototype.analyse = function(compiler) {
        this.test.analyse(compiler);
        return this.body.analyse(compiler);
      };

      Try.prototype.code_size = function() {
        return 3 + this.test.code_size() + this.body.code_size();
      };

      Try.prototype.side_effects = function() {
        return !this.test.side_effects() && !this.body.side_effects();
      };

      Try.prototype.subst = function(bindings) {
        return Try(this.test.subst(bindings), this.body.subst(bindings));
      };

      Try.prototype.optimize = function(env, compiler) {
        return Try(this.test.optimize(env, compiler), this.body.optimize(env, compiler));
      };

      Try.prototype.insert_return_statement = function() {
        return Try(this.test, this.body.insert_return_statement());
      };

      Try.prototype.replace_return_with_yield = function() {
        return Try(this.test, this.body.replace_return_with_yield());
      };

      Try.prototype.javascriptize = function(env, compiler) {
        var body, test;

        test = this.test.javascriptize(env, compiler);
        body = this.body.javascriptize(env, compiler);
        return test.slice(0) + [Try(test[-1], begin.apply(null, body))];
      };

      Try.prototype.to_code = function(compiler) {
        return "try\n" + (compiler.indent(this.test.to_code(compiler))) + "\ncatch e\n" + (compiler.indent(this.body.to_code(compiler))) + "\n";
      };

      Try.prototype.__eq__ = function(x, y) {
        return classeq(x, y) && x.test === y.test && x.body === y.body;
      };

      Try.prototype.toString = function() {
        return "il.Try(" + this.test + ", " + this.body + ")";
      };

      return Try;

    })(il.Element);
    il.begin = function() {
      var e, exps, i, length, result, _i, _len, _results;

      exps = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      result = [];
      length = exps.length;
      _results = [];
      for (i = _i = 0, _len = exps.length; _i < _len; i = ++_i) {
        e = exps[i];
        if (isinstance(e, il.Begin)) {
          result += e.statements;
        } else if (_.isArray(e) && e.length === 0) {
          continue;
        } else {
          if (e === NULL && i !== length - 1) {
            continue;
          } else {
            result.push(e);
          }
        }
        if (result.length === 0) {
          _results.push(return_statement);
        } else if (result.length === 1) {
          _results.push(result[0]);
        } else {
          _results.push(il.Begin(result));
        }
      }
      return _results;
    };
    il.Begin = (function(_super) {
      __extends(Begin, _super);

      function Begin(statements) {
        this.statements = statements;
      }

      Begin.prototype.find_assign_lefts = function() {
        var exp, result, _i, _len, _ref38;

        result = set();
        _ref38 = this.statements;
        for (_i = 0, _len = _ref38.length; _i < _len; _i++) {
          exp = _ref38[_i];
          result |= exp.find_assign_lefts();
        }
        return result;
      };

      Begin.prototype.side_effects = function() {
        return true;
      };

      Begin.prototype.subst = function(bindings) {
        var x;

        return Begin(tuple((function() {
          var _i, _len, _ref38, _results;

          _ref38 = this.statements;
          _results = [];
          for (_i = 0, _len = _ref38.length; _i < _len; _i++) {
            x = _ref38[_i];
            _results.push(x.subst(bindings));
          }
          return _results;
        }).call(this)));
      };

      Begin.prototype.free_vars = function() {
        var exp, result, _i, _len, _ref38;

        result = set();
        _ref38 = this.statements;
        for (_i = 0, _len = _ref38.length; _i < _len; _i++) {
          exp = _ref38[_i];
          result |= exp.free_vars();
        }
        return result;
      };

      Begin.prototype.code_size = function() {
        return 1;
      };

      Begin.prototype.analyse = function(compiler) {
        var x, _i, _len, _ref38, _results;

        _ref38 = this.statements;
        _results = [];
        for (_i = 0, _len = _ref38.length; _i < _len; _i++) {
          x = _ref38[_i];
          _results.push(x.analyse(compiler));
        }
        return _results;
      };

      Begin.prototype.optimize = function(env, compiler) {
        var arg, arg1, result, x, _i, _len, _ref38;

        result = [];
        _ref38 = this.statements;
        for (_i = 0, _len = _ref38.length; _i < _len; _i++) {
          arg = _ref38[_i];
          arg1 = arg.optimize(env, compiler);
          if (arg1 !== void 0) {
            result.append(arg1);
          }
          if (result) {
            return begin.apply(null, ((function() {
              var _j, _len1, _ref39, _results;

              if (!isinstance(x, Atom)) {
                _ref39 = result.slice(0);
                _results = [];
                for (_j = 0, _len1 = _ref39.length; _j < _len1; _j++) {
                  x = _ref39[_j];
                  _results.push(x);
                }
                return _results;
              }
            })()) + [result[-1]]);
          } else {
            return_statement;
          }
        }
      };

      Begin.prototype.remove = function(exp) {
        var i, stmt, _i, _len, _ref38;

        _ref38 = enumerate(this.statements);
        for (stmt = _i = 0, _len = _ref38.length; _i < _len; stmt = ++_i) {
          i = _ref38[stmt];
          if (stmt === exp) {
            break;
          } else {
            return this;
          }
        }
        return begin.apply(null, this.statements.slice(0, +i + 1 || 9e9) + this.statements.slice(i + 1));
      };

      Begin.prototype.insert_return_statement = function() {
        var inserted;

        inserted = this.statements[-1].insert_return_statement();
        return begin.apply(null, this.statements.slice(0) + [inserted]);
      };

      Begin.prototype.replace_return_with_yield = function() {
        var exp;

        return Begin(tuple((function() {
          var _i, _len, _ref38, _results;

          _ref38 = this.statements;
          _results = [];
          for (_i = 0, _len = _ref38.length; _i < _len; _i++) {
            exp = _ref38[_i];
            _results.push(exp.replace_return_with_yield());
          }
          return _results;
        }).call(this)));
      };

      Begin.prototype.javascriptize = function(env, compiler) {
        var exp, exps2, result, _i, _len, _ref38;

        result = [];
        _ref38 = this.statements;
        for (_i = 0, _len = _ref38.length; _i < _len; _i++) {
          exp = _ref38[_i];
          exps2 = exp.javascriptize(env, compiler);
          result += exps2;
        }
        return result;
      };

      Begin.prototype.to_code = function(compiler) {
        var x;

        return '\n'.join([
          (function() {
            var _i, _len, _ref38, _results;

            _ref38 = this.statements;
            _results = [];
            for (_i = 0, _len = _ref38.length; _i < _len; _i++) {
              x = _ref38[_i];
              _results.push(x.to_code(compiler));
            }
            return _results;
          }).call(this)
        ]);
      };

      Begin.prototype.__eq__ = function(x, y) {
        return classeq(x, y) && x.statements === y.statements;
      };

      Begin.prototype.toString = function() {
        var x;

        return 'il.begin(%s)' % '\n '.join([
          (function() {
            var _i, _len, _ref38, _results;

            _ref38 = this.statements;
            _results = [];
            for (_i = 0, _len = _ref38.length; _i < _len; _i++) {
              x = _ref38[_i];
              _results.push(repr(x));
            }
            return _results;
          }).call(this)
        ]);
      };

      return Begin;

    })(il.Element);
    il.PassStatement = (function(_super) {
      __extends(PassStatement, _super);

      function PassStatement() {}

      PassStatement.prototype.code_size = function() {
        return 0;
      };

      PassStatement.prototype.side_effects = function() {
        return false;
      };

      PassStatement.prototype.analyse = function(compiler) {};

      PassStatement.prototype.optimize = function(env, compiler) {
        return this;
      };

      PassStatement.prototype.javascriptize = function(env, compiler) {
        return [this];
      };

      PassStatement.prototype.insert_return_statement = function() {
        return this;
      };

      PassStatement.prototype.replace_return_with_yield = function() {
        return this;
      };

      PassStatement.prototype.subst = function(bindings) {
        return this;
      };

      PassStatement.prototype.__eq__ = function(x, y) {
        return classeq(x, y);
      };

      PassStatement.prototype.to_code = function(compiler) {
        return 'pass';
      };

      PassStatement.prototype.toString = function() {
        return 'il.pass_statement';
      };

      return PassStatement;

    })(il.Element);
    il.pass_statement = new il.PassStatement();
    il.Nil = (function(_super) {
      __extends(Nil, _super);

      function Nil() {}

      Nil.prototype.code_size = function() {
        return 0;
      };

      Nil.prototype.side_effects = function() {
        return false;
      };

      Nil.prototype.analyse = function(compiler) {};

      Nil.prototype.optimize = function(env, compiler) {
        return nil;
      };

      Nil.prototype.javascriptize = function(env, compiler) {
        return [this];
      };

      Nil.prototype.insert_return_statement = function() {
        return this;
      };

      Nil.prototype.replace_return_with_yield = function() {
        return this;
      };

      Nil.prototype.subst = function(bindings) {
        return this;
      };

      Nil.prototype.__eq__ = function(x, y) {
        return classeq(x, y);
      };

      Nil.prototype.to_code = function(compiler) {
        return 'nil';
      };

      Nil.prototype.toString = function() {
        return 'il.nil';
      };

      return Nil;

    })(il.Element);
    il.nil = new Nil();
    type_map = {
      int: il.Integer,
      float: il.Float,
      str: il.String,
      unicode: il.String({
        tuple: make_tuple,
        list: il.List,
        dict: il.Dict,
        bool: il.Bool
      })
    };
    type_map[typeof void 0] = il.Atom;
    il.lamda = function() {
      var body, params;

      params = arguments[0], body = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return new il.Lamda(params, begin.apply(null, body));
    };
    il.Lamda = (function(_super) {
      __extends(Lamda, _super);

      function Lamda(params, body) {
        this.params = params;
        this.body = body;
        this.has_javascriptized = false;
      }

      Lamda.prototype.make_new = function(params, body) {
        return this.__class__(params, body);
      };

      Lamda.prototype.callOn = function() {
        var args;

        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return Apply(args);
      };

      Lamda.prototype.find_assign_lefts = function() {
        return this.body.find_assign_lefts();
      };

      Lamda.prototype.analyse = function(compiler) {
        compiler.lamda_stack.append(this);
        this.body.analyse(compiler);
        return compiler.lamda_stack.pop();
      };

      Lamda.prototype.code_size = function() {
        return this.body.code_size() + len(this.params) + 2;
      };

      Lamda.prototype.side_effects = function() {
        return false;
      };

      Lamda.prototype.subst = function(bindings) {
        var result;

        result = this.make_new(this.params, this.body.subst(bindings));
        return result;
      };

      Lamda.prototype.optimize = function(env, compiler) {
        var body, result;

        env = env.extend();
        body = this.body.optimize(env, compiler);
        result = this.make_new(this.params, body);
        return result;
      };

      Lamda.prototype.optimize_apply = function(env, compiler, args) {
        var arg, bindings, i, new_args, new_params, p, ref_count, _i, _len, _ref38, _ref39;

        if (len(this.params) === 0) {
          return this.body.optimize(env, compiler);
        }
        bindings = {};
        _ref38 = [[], []], new_params = _ref38[0], new_args = _ref38[1];
        _ref39 = enumerate(this.params);
        for (p = _i = 0, _len = _ref39.length; _i < _len; p = ++_i) {
          i = _ref39[p];
          arg = args[i];
          if (arg.side_effects()) {
            new_params += [p];
            new_args += [arg];
            continue;
          } else {
            ref_count = compiler.ref_count.get(p, 0);
          }
          if (ref_count === 0) {
            continue;
          } else if (ref_count === 1) {
            bindings[p] = arg;
          } else {
            if (arg.code_size() * ref_count > MAX_EXTEND_CODE_SIZE) {
              new_params += [p];
              new_args += [arg];
            } else {
              bindings[p] = arg;
            }
          }
        }
        if (new_params) {
          if (bindings) {
            return Apply(this.make_new(new_params, this.body.subst(bindings).optimize(env, compiler)), tuple((function() {
              var _j, _len1, _results;

              _results = [];
              for (_j = 0, _len1 = new_args.length; _j < _len1; _j++) {
                arg = new_args[_j];
                _results.push(arg.optimize(env, compiler));
              }
              return _results;
            })()));
          } else {
            if (len(new_params) !== len(this.params)) {
              return Apply(this.make_new(new_params, this.body.subst(bindings).optimize(env, compiler)), tuple((function() {
                var _j, _len1, _results;

                _results = [];
                for (_j = 0, _len1 = new_args.length; _j < _len1; _j++) {
                  arg = new_args[_j];
                  _results.push(arg.optimize(env, compiler));
                }
                return _results;
              })()));
            } else {
              return Apply(this.make_new(new_params, this.body.optimize(env, compiler)), optimize_args(new_args, env, compiler));
            }
          }
        } else {
          if (bindings) {
            return this.body.subst(bindings).optimize(env, compiler);
          } else {
            return this.body.optimize(env, compiler);
          }
        }
      };

      Lamda.prototype.insert_return_statement = function() {
        return Return(this);
      };

      Lamda.prototype.javascriptize = function(env, compiler) {
        var body_exps, global_vars, x;

        if (this.has_javascriptized) {
          return [this.name];
        }
        body_exps = this.body.javascriptize(env, compiler);
        global_vars = il.begin.apply(il, body_exps).find_assign_lefts() - set(this.params);
        global_vars = set((function() {
          var _i, _len, _results;

          _results = [];
          for (_i = 0, _len = global_vars.length; _i < _len; _i++) {
            x = global_vars[_i];
            if (isinstance(x, Var) && !isinstance(x, LocalVar) && !isinstance(x, SolverVar)) {
              _results.push(x);
            }
          }
          return _results;
        })());
        if (global_vars) {
          body_exps = [GlobalDecl(global_vars)] + body_exps;
          return [this.make_new(this.params, begin.apply(null, body_exps))];
        }
      };

      Lamda.prototype.to_code = function(compiler) {
        var x;

        return ("lambda " + (', '.join(tuple((function() {
          var _i, _len, _ref38, _results;

          _ref38 = this.params;
          _results = [];
          for (_i = 0, _len = _ref38.length; _i < _len; _i++) {
            x = _ref38[_i];
            _results.push(x.to_code(compiler));
          }
          return _results;
        }).call(this)))) + ": ") + '%s' % this.body.to_code(compiler);
      };

      Lamda.prototype.free_vars = function() {
        return this.body.free_vars() - set(this.params);
      };

      Lamda.prototype.bool = function() {
        return true;
      };

      Lamda.prototype.__eq__ = function(x, y) {
        return classeq(x, y) && x.params === y.params && x.body === y.body;
      };

      Lamda.prototype.__hash__ = function() {
        return hash(id(this));
      };

      Lamda.prototype.toString = function() {
        var x;

        return "il.Lamda((" + (', '.join([
          (function() {
            var _i, _len, _ref38, _results;

            _ref38 = this.params;
            _results = [];
            for (_i = 0, _len = _ref38.length; _i < _len; _i++) {
              x = _ref38[_i];
              _results.push(repr(x));
            }
            return _results;
          }).call(this)
        ])) + "), \n" + (repr(this.body)) + ")";
      };

      return Lamda;

    })(il.Element);
    il.RulesLamda = (function(_super) {
      __extends(RulesLamda, _super);

      function RulesLamda(params, body) {
        this.params = params;
        this.body = body;
        this.has_javascriptized = false;
      }

      RulesLamda.prototype.callOn = function() {
        var args, x;

        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return Apply(tuple((function() {
          var _i, _len, _results;

          _results = [];
          for (_i = 0, _len = args.length; _i < _len; _i++) {
            x = args[_i];
            _results.push(element(x));
          }
          return _results;
        })()));
      };

      RulesLamda.prototype.optimize_apply = function(env, compiler, args) {
        return Lamda.optimize_apply(env, compiler, args);
      };

      RulesLamda.prototype.to_code = function(compiler) {
        return ("lambda " + (this.params[0].to_code(compiler)) + ", " + (this.params[1].to_code(compiler)) + ": ") + this.body.to_code(compiler);
      };

      return RulesLamda;

    })(il.Lamda);
    clamda = function() {
      var body, v;

      v = arguments[0], body = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return new il.Clamda(v, begin.apply(null, body));
    };
    il.Clamda = (function(_super) {
      __extends(Clamda, _super);

      function Clamda(v, body) {
        this.body = body;
        this.has_javascriptized = false;
        this.params = [v];
        this.name = void 0;
      }

      Clamda.prototype.make_new = function(params, body) {
        return this.__class__(params[0], body);
      };

      Clamda.prototype.optimize_apply = function(env, compiler, args) {
        var arg, body, param, ref_count, _ref38;

        _ref38 = [this.params[0], args[0]], param = _ref38[0], arg = _ref38[1];
        if (!arg.side_effects()) {
          body = this.body.subst({
            param: arg
          }).optimize(env, compiler);
          return body;
        } else {
          ref_count = compiler.ref_count.get(param, 0);
          if (ref_count === 0) {
            return begin(arg, this.body).optimize(env, compiler);
          } else {
            return begin(Assign(param, arg), this.body).optimize(env, compiler);
          }
        }
      };

      Clamda.prototype.callOn = function(arg) {
        var bindings;

        if (arg.side_effects()) {
          return begin(Assign(this.params[0], arg), this.body);
        } else {
          bindings = {};
          bindings[this.params[0]] = arg;
          return this.body.subst(bindings);
        }
      };

      Clamda.prototype.toString = function() {
        return "il.Clamda(" + this.params[0] + ", \n" + (repr(this.body)) + ")";
      };

      return Clamda;

    })(il.Lamda);
    il.EqualCont = (function() {
      function EqualCont() {}

      EqualCont.prototype.callOn = function(body) {
        return body;
      };

      EqualCont.prototype.subst = function(bindings) {
        return this;
      };

      EqualCont.prototype.analyse = function(compiler) {};

      EqualCont.prototype.code_size = function() {
        return 1;
      };

      EqualCont.prototype.side_effects = function() {
        return false;
      };

      EqualCont.prototype.optimize = function(env, compiler) {
        return this;
      };

      EqualCont.prototype.javascriptize = function(env, compiler) {
        return [this];
      };

      EqualCont.prototype.to_code = function(compiler) {
        return 'lambda v:v';
      };

      EqualCont.prototype.toString = function() {
        return 'EqualCont';
      };

      return EqualCont;

    })();
    il.equal_cont = new il.EqualCont();
    il.Done = (function(_super) {
      __extends(Done, _super);

      function Done(param) {
        this.has_javascriptized = false;
        this.params = [param];
        this.body = param;
      }

      Done.prototype.make_new = function(params, body) {
        return this.__class__(this.params[0]);
      };

      Done.prototype.callOn = function() {
        var args, bindings;

        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        bindings = {};
        bindings[this.params[0]] = args[0];
        return this.body.subst(bindings);
      };

      Done.prototype.replace_assign = function(bindings) {
        return this;
      };

      Done.prototype.toString = function() {
        return "il.Done(" + this.params[0] + ", " + (repr(this.body)) + ")";
      };

      return Done;

    })(il.Clamda);
    il.Function = (function(_super) {
      __extends(Function, _super);

      function Function(name, params, body) {
        this.name = name;
        this.params = params;
        this.body = body;
      }

      return Function;

    })(il.Lamda);
    il.Lamda = (function() {
      function Lamda(params, body) {
        this.name = name;
      }

      Lamda.prototype.make_new = function(params, body) {
        return this.__class__(this.name, params, body);
      };

      Lamda.prototype.optimize = function(env, compiler) {
        var body, result;

        env = env.extend();
        body = this.body.optimize(env, compiler);
        result = this.make_new(this.params, body);
        return result;
      };

      Lamda.prototype.optimize_apply = function(env, compiler, args) {
        var result;

        result = Lamda.optimize_apply(env, compiler, args);
        return result;
      };

      Lamda.prototype.javascriptize = function(env, compiler) {
        var body_exps, global_vars, x;

        if (this.has_javascriptized) {
          return [this.name];
        }
        this.has_javascriptized = true;
        body_exps = this.body.javascriptize(env, compiler);
        global_vars = this.find_assign_lefts() - set(this.params);
        global_vars = set((function() {
          var _i, _len, _results;

          _results = [];
          for (_i = 0, _len = global_vars.length; _i < _len; _i++) {
            x = global_vars[_i];
            if (isinstance(x, Var) && !isinstance(x, LocalVar) && !isinstance(x, SolverVar)) {
              _results.push(x);
            }
          }
          return _results;
        })());
        if (global_vars) {
          body_exps = [GlobalDecl(global_vars)] + body_exps;
        }
        body_exps = body_exps.slice(0) + [body_exps[-1].insert_return_statement()];
        return [this.make_new(this.params, begin.apply(null, body_exps)), this.name];
      };

      Lamda.prototype.to_code = function(compiler) {
        var x;

        return ("  " + this.name + "(" + (', '.join(tuple((function() {
          var _i, _len, _ref38, _results;

          _ref38 = this.params;
          _results = [];
          for (_i = 0, _len = _ref38.length; _i < _len; _i++) {
            x = _ref38[_i];
            _results.push(x.to_code(compiler));
          }
          return _results;
        }).call(this)))) + "):\n") + compiler.indent(this.body.to_code(compiler));
      };

      Lamda.prototype.toString = function() {
        var x;

        return "il.Function(" + this.name + ", " + (', '.join([
          (function() {
            var _i, _len, _ref38, _results;

            _ref38 = this.params;
            _results = [];
            for (_i = 0, _len = _ref38.length; _i < _len; _i++) {
              x = _ref38[_i];
              _results.push(repr(x));
            }
            return _results;
          }).call(this)
        ])) + ")\n, " + (repr(this.body)) + ")";
      };

      return Lamda;

    })();
    cfunction = function() {
      var body, name, v;

      name = arguments[0], v = arguments[1], body = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      return CFunction(name, v, begin.apply(null, body));
    };
    il.CFunction = (function(_super) {
      __extends(CFunction, _super);

      CFunction.prototype.is_fun = true;

      function CFunction(name, v, body) {}

      CFunction.prototype.make_new = function(params, body) {
        return this.__class__(this.name, params[0], body);
      };

      CFunction.prototype.optimize_apply = function(env, compiler, args) {
        var bindings, body, new_env, result;

        new_env = env.extend();
        bindings = {};
        bindings[this.params[0]] = args[0];
        body = this.body.subst(bindings);
        body = body.optimize(new_env, compiler);
        result = CFunction(this.name, this.params[0], body)(NULL);
        return result;
      };

      CFunction.prototype.toString = function() {
        return "il.CFunction(" + this.name + ", " + this.params[0] + ", \n" + (repr(this.body)) + ")";
      };

      return CFunction;

    })(il.Function);
    il.RulesDict = (function(_super) {
      __extends(RulesDict, _super);

      function RulesDict(arity_body_map) {
        this.arity_body_map = arity_body_map;
        this.to_coded = false;
      }

      RulesDict.prototype.analyse = function(compiler) {
        var arity, body, e, _i, _len, _ref38, _results;

        try {
          this.seen;
        } catch (_error) {
          e = _error;
          this.seen = true;
        }
        compiler.occur_count[this] = compiler.occur_count.setdefault(0) + 1;
        _ref38 = this.arity_body_map.items();
        _results = [];
        for (body = _i = 0, _len = _ref38.length; _i < _len; body = ++_i) {
          arity = _ref38[body];
          _results.push(body.analyse(compiler));
        }
        return _results;
      };

      RulesDict.prototype.subst = function(bindings) {
        var arity, body;

        this.arity_body_maparity_body_map = {
          arity: (function() {
            var _i, _len, _ref38, _results;

            _ref38 = this.arity_body_map.items();
            _results = [];
            for (body = _i = 0, _len = _ref38.length; _i < _len; body = ++_i) {
              arity = _ref38[body];
              _results.push(body.subst(bindings));
            }
            return _results;
          }).call(this)
        };
        return this;
      };

      RulesDict.prototype.side_effects = function() {
        return false;
      };

      RulesDict.prototype.free_vars = function() {
        var arity, body, result, _i, _len, _ref38;

        result = set();
        _ref38 = this.arity_body_map.items();
        for (body = _i = 0, _len = _ref38.length; _i < _len; body = ++_i) {
          arity = _ref38[body];
          result |= body.free_vars();
        }
        return result;
      };

      RulesDict.prototype.optimize = function(env, compiler) {
        return this;
      };

      RulesDict.prototype.javascriptize = function(env, compiler) {
        return [this];
      };

      RulesDict.prototype.bool = function() {
        return true;
      };

      RulesDict.prototype.to_code = function(compiler) {
        var arity, funcname, ss, _i, _len, _ref38;

        if (this.to_coded) {
          return this.name.to_code(compiler);
        } else {
          this.to_coded = true;
          _ref38 = this.arity_body_map.items();
          for (funcname = _i = 0, _len = _ref38.length; _i < _len; funcname = ++_i) {
            arity = _ref38[funcname];
            ss = "" + arity + ": " + (funcname.to_code(compiler));
          }
          return "{" + (', '.join(ss)) + "}";
        }
      };

      RulesDict.prototype.toString = function() {
        return 'RulesDict(%s)' % this.arity_body_map;
      };

      return RulesDict;

    })(il.Element);
    il.Macro = (function() {
      function Macro() {}

      return Macro;

    })();
    il.MacroLamda = (function(_super) {
      __extends(MacroLamda, _super);

      function MacroLamda() {
        _ref38 = MacroLamda.__super__.constructor.apply(this, arguments);
        return _ref38;
      }

      MacroLamda.prototype.optimize_apply = function(env, compiler, args) {
        var result;

        result = Lamda.optimize_apply(env, compiler, args);
        return result;
      };

      MacroLamda.prototype.javascriptize = function(env, compiler) {
        var body_exps, global_vars, x;

        body_exps = this.body.javascriptize(env, compiler);
        global_vars = this.find_assign_lefts() - set(this.params);
        global_vars = set((function() {
          var _i, _len, _results;

          _results = [];
          for (_i = 0, _len = global_vars.length; _i < _len; _i++) {
            x = global_vars[_i];
            if (isinstance(x, Var) && !isinstance(x, LocalVar) && !isinstance(x, SolverVar)) {
              _results.push(x);
            }
          }
          return _results;
        })());
        if (global_vars) {
          body_exps = [GlobalDecl(global_vars)] + body_exps;
          return [MacroFunction(Lamda(this.params, begin.apply(null, body_exps)))];
        }
      };

      MacroLamda.prototype.toString = function() {
        var x;

        return "il.MacroLamda((" + (', '.join([
          (function() {
            var _i, _len, _ref39, _results;

            _ref39 = this.params;
            _results = [];
            for (_i = 0, _len = _ref39.length; _i < _len; _i++) {
              x = _ref39[_i];
              _results.push(repr(x));
            }
            return _results;
          }).call(this)
        ])) + "), \n" + (repr(this.body)) + ")";
      };

      return MacroLamda;

    })(il.Lamda);
    il.MacroRules = (function(_super) {
      __extends(MacroRules, _super);

      function MacroRules() {
        _ref39 = MacroRules.__super__.constructor.apply(this, arguments);
        return _ref39;
      }

      MacroRules.prototype.optimize_apply = function(env, compiler, args) {
        var result;

        result = Lamda.optimize_apply(env, compiler, args);
        return result;
      };

      MacroRules.prototype.javascriptize = function(env, compiler) {
        var body, body_exps, global_vars, name, x, _i, _len;

        body_exps = this.body.javascriptize(env, compiler);
        global_vars = this.find_assign_lefts() - set(this.params);
        global_vars = set();
        for (_i = 0, _len = global_vars.length; _i < _len; _i++) {
          x = global_vars[_i];
          if (isinstance(x, Var) && !isinstance(x, LocalVar) && !isinstance(x, SolverVar)) {
            global_vars.add(x);
          }
        }
        if (global_vars) {
          body_exps = [GlobalDecl(global_vars)] + body_exps;
        }
        if (!body_has_any_statemen) {
          return [MacroRulesFunction(this.make_new(this.params, begin.apply(null, body_exps)))];
        } else {

        }
        name = compiler.new_var(LocalVar('fun'));
        body = begin.apply(null, body_exps).insert_return_statement();
        return [new il.Function(name, this.params, body), MacroRulesFunction(name)];
      };

      return MacroRules;

    })(il.Lamda);
    il.MacroFunction = (function(_super) {
      __extends(MacroFunction, _super);

      function MacroFunction(fun) {
        this.fun = fun;
      }

      MacroFunction.prototype.to_code = function(compiler) {
        return 'MacroFunction(%s)' % this.fun.to_code(compiler);
      };

      MacroFunction.prototype.toString = function() {
        return 'MacroFunction(%s)' % this.fun;
      };

      return MacroFunction;

    })(il.Element);
    il.MacroRulesFunction = (function(_super) {
      __extends(MacroRulesFunction, _super);

      function MacroRulesFunction(fun) {
        this.fun = fun;
      }

      MacroRulesFunction.prototype.to_code = function(compiler) {
        return 'MacroRules(%s)' % this.fun;
      };

      MacroRulesFunction.prototype.toString = function() {
        return 'MacroRulesFunction(%s)' % this.fun;
      };

      return MacroRulesFunction;

    })(il.Element);
    il.GlobalDecl = (function(_super) {
      __extends(GlobalDecl, _super);

      function GlobalDecl(args) {
        this.args = args;
      }

      GlobalDecl.prototype.side_effects = function() {
        return false;
      };

      GlobalDecl.prototype.to_code = function(compiler) {
        var x;

        return "global %s" % (', '.join([
          (function() {
            var _i, _len, _ref40, _results;

            _ref40 = this.args;
            _results = [];
            for (_i = 0, _len = _ref40.length; _i < _len; _i++) {
              x = _ref40[_i];
              _results.push(x.to_code(compiler));
            }
            return _results;
          }).call(this)
        ]));
      };

      GlobalDecl.prototype.toString = function() {
        return 'GlobalDecl(%s)' % this.args;
      };

      return GlobalDecl;

    })(il.Element);
    il.Apply = (function(_super) {
      __extends(Apply, _super);

      function Apply(caller, args) {
        this.caller = caller;
        this.args = args;
      }

      Apply.prototype.find_assign_lefts = function(exp) {
        return set();
      };

      Apply.prototype.analyse = function(compiler) {
        var arg, _i, _len, _ref40, _results;

        compiler.called_count[this.caller] = compiler.called_count.setdefault(this.caller, 0) + 1;
        this.caller.analyse(compiler);
        _ref40 = this.args;
        _results = [];
        for (_i = 0, _len = _ref40.length; _i < _len; _i++) {
          arg = _ref40[_i];
          _results.push(arg.analyse(compiler));
        }
        return _results;
      };

      Apply.prototype.code_size = function() {
        var x;

        return this.caller.code_size() + sum([
          (function() {
            var _i, _len, _ref40, _results;

            _ref40 = this.args;
            _results = [];
            for (_i = 0, _len = _ref40.length; _i < _len; _i++) {
              x = _ref40[_i];
              _results.push(x.code_size());
            }
            return _results;
          }).call(this)
        ]);
      };

      Apply.prototype.side_effects = function() {
        if (isinstance(this.caller, Lamda)) {
          if (this.caller.body.side_effects()) {
            return true;
          } else if (isinstance(this.caller, Var)) {
            return true;
          } else if (this.caller.has_side_effects()) {
            return true;
          } else {
            return false;
          }
        }
      };

      Apply.prototype.subst = function(bindings) {
        var arg;

        return this.__class__(this.caller.subst(bindings), tuple((function() {
          var _i, _len, _ref40, _results;

          _ref40 = this.args;
          _results = [];
          for (_i = 0, _len = _ref40.length; _i < _len; _i++) {
            arg = _ref40[_i];
            _results.push(arg.subst(bindings));
          }
          return _results;
        }).call(this)));
      };

      Apply.prototype.free_vars = function() {
        var exp, result, _i, _len, _ref40;

        result = this.caller.free_vars();
        _ref40 = this.args;
        for (_i = 0, _len = _ref40.length; _i < _len; _i++) {
          exp = _ref40[_i];
          result |= exp.free_vars();
        }
        return result;
      };

      Apply.prototype.optimize = function(env, compiler) {
        var args, caller, result, _ref40;

        args = optimize_args(this.args, env, compiler);
        if (isinstance(this.caller, Var)) {
          if (_ref40 = this.caller, __indexOf.call(compiler.recursive_call_path, _ref40) < 0) {
            caller = this.caller.optimize(env, compiler);
            if (isinstance(caller, Lamda)) {
              compiler.recursive_call_path.append(this.caller);
              result = caller.optimize_apply(env, compiler, args);
              compiler.recursive_call_path.pop();
              return result;
            } else {
              return this.__class__(caller, args);
            }
          } else {
            return this.__class__(this.caller, args);
          }
        } else if (isinstance(this.caller, Lamda)) {
          return this.caller.optimize_apply(env, compiler, args);
        } else {
          caller = this.caller.optimize(env, compiler);
          if (isinstance(caller, Lamda)) {
            return caller.optimize_apply(env, compiler, args);
          } else {
            return this.__class__(caller, args);
          }
        }
      };

      Apply.prototype.insert_return_statement = function() {
        return Return(this);
      };

      Apply.prototype.replace_return_with_yield = function() {
        return this;
      };

      Apply.prototype.javascriptize = function(env, compiler) {
        var caller, exps, exps2;

        exps = this.caller.javascriptize(env, compiler);
        caller = exps[-1];
        exps = exps.slice(0);
        exps2 = javascriptize_args(this.args, env, compiler);
        return exps + exps2 + [this.__class__(caller, args)];
      };

      Apply.prototype.to_code = function(compiler) {
        var x;

        if (isinstance(this.caller, Lamda)) {
          return "(%s)" % this.caller.to_code(compiler) + '(%s)' % ', '.join([
            (function() {
              var _i, _len, _ref40, _results;

              _ref40 = this.args;
              _results = [];
              for (_i = 0, _len = _ref40.length; _i < _len; _i++) {
                x = _ref40[_i];
                _results.push(x.to_code(compiler));
              }
              return _results;
            }).call(this)
          ]);
        } else {
          return this.caller.to_code(compiler) + '(%s)' % ', '.join([
            (function() {
              var _i, _len, _ref40, _results;

              _ref40 = this.args;
              _results = [];
              for (_i = 0, _len = _ref40.length; _i < _len; _i++) {
                x = _ref40[_i];
                _results.push(x.to_code(compiler));
              }
              return _results;
            }).call(this)
          ]);
        }
      };

      Apply.prototype.bool = function() {
        return unknown;
      };

      Apply.prototype.__eq__ = function(x, y) {
        return classeq(x, y) && x.caller === y.caller && x.args === y.args;
      };

      Apply.prototype.toString = function() {
        var x;

        return "" + this.caller + "(" + (', '.join([
          (function() {
            var _i, _len, _ref40, _results;

            _ref40 = this.args;
            _results = [];
            for (_i = 0, _len = _ref40.length; _i < _len; _i++) {
              x = _ref40[_i];
              _results.push(repr(x));
            }
            return _results;
          }).call(this)
        ])) + ")";
      };

      return Apply;

    })(il.Element);
    il.ExpressionWithCode = (function(_super) {
      __extends(ExpressionWithCode, _super);

      function ExpressionWithCode(exp, fun) {
        this.exp = exp;
        this.fun = fun;
      }

      ExpressionWithCode.prototype.analyse = function(compiler) {
        return this.fun.analyse(compiler);
      };

      ExpressionWithCode.prototype.side_effects = function() {
        return false;
      };

      ExpressionWithCode.prototype.subst = function(bindings) {
        return ExpressionWithCode(this.exp, this.fun.subst(bindings));
      };

      ExpressionWithCode.prototype.code_size = function() {
        return 1;
      };

      ExpressionWithCode.prototype.free_vars = function() {
        return this.fun.free_vars();
      };

      ExpressionWithCode.prototype.optimize = function(env, compiler) {
        return ExpressionWithCode(this.exp, this.fun.optimize(env, compiler));
      };

      ExpressionWithCode.prototype.javascriptize = function(env, compiler) {
        var exps;

        exps = this.fun.javascriptize(env, compiler);
        return [ExpressionWithCode(this.exp, exps[0])];
      };

      ExpressionWithCode.prototype.__eq__ = function(x, y) {
        return classeq(x, y) && x.exp === y.exp;
      };

      ExpressionWithCode.prototype.to_code = function(compiler) {
        return "ExpressionWithCode((" + (this.exp.to_code(compiler)) + "), (" + (this.fun.to_code(compiler)) + "))";
      };

      ExpressionWithCode.prototype.toString = function() {
        return "ExpressionWithCode(" + this.exp + ", " + this.fun + ")";
      };

      return ExpressionWithCode;

    })(il.Element);
    il.Var = (function(_super) {
      __extends(Var, _super);

      function Var(name) {
        this.name = name;
      }

      Var.prototype.find_assign_lefts = function() {
        return set();
      };

      Var.prototype.analyse = function(compiler) {
        return compiler.ref_count[this] = compiler.ref_count.setdefault(0) + 1;
      };

      Var.prototype.code_size = function() {
        return 1;
      };

      Var.prototype.side_effects = function() {
        return false;
      };

      Var.prototype.subst = function(bindings) {
        var e;

        try {
          return bindings[this];
        } catch (_error) {
          e = _error;
          return this;
        }
      };

      Var.prototype.optimize = function(env, compiler) {
        var e;

        try {
          return env[this];
        } catch (_error) {
          e = _error;
          return this;
        }
      };

      Var.prototype.replace_assign = function(compiler) {
        var e;

        try {
          return env[this];
        } catch (_error) {
          e = _error;
          return this;
        }
      };

      Var.prototype.insert_return_statement = function() {
        return Return(this);
      };

      Var.prototype.replace_return_with_yield = function() {
        return this;
      };

      Var.prototype.javascriptize = function(env, compiler) {
        return [this];
      };

      Var.prototype.to_code = function(compiler) {
        return this.name;
      };

      Var.prototype.__eq__ = function(x, y) {
        return classeq(x, y) && x.name === y.name;
      };

      Var.prototype.callOn = function() {
        var args;

        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return Apply(args);
      };

      Var.prototype.free_vars = function() {
        return set([this]);
      };

      Var.prototype.bool = function() {
        return unknown;
      };

      Var.prototype.__hash__ = function() {
        return hash(this.name);
      };

      Var.prototype.toString = function() {
        return this.name;
      };

      return Var;

    })(il.Element);
    il.RecursiveVar = (function(_super) {
      __extends(RecursiveVar, _super);

      function RecursiveVar() {
        _ref40 = RecursiveVar.__super__.constructor.apply(this, arguments);
        return _ref40;
      }

      return RecursiveVar;

    })(il.Var);
    il.LocalVar = (function(_super) {
      __extends(LocalVar, _super);

      function LocalVar() {
        _ref41 = LocalVar.__super__.constructor.apply(this, arguments);
        return _ref41;
      }

      return LocalVar;

    })(il.Var);
    il.ConstLocalVar = (function(_super) {
      __extends(ConstLocalVar, _super);

      function ConstLocalVar() {
        _ref42 = ConstLocalVar.__super__.constructor.apply(this, arguments);
        return _ref42;
      }

      return ConstLocalVar;

    })(il.LocalVar);
    il.SolverVar = (function(_super) {
      __extends(SolverVar, _super);

      function SolverVar(name) {
        this.name = 'solver.' + name;
      }

      SolverVar.prototype.toString = function() {
        return 'il.%s' % this.name.split('.')[1];
      };

      return SolverVar;

    })(il.Var);
    il.LogicVar = (function(_super) {
      __extends(LogicVar, _super);

      function LogicVar(name) {
        this.name = name;
      }

      LogicVar.prototype.find_assign_lefts = function(exp) {
        return set();
      };

      LogicVar.prototype.analyse = function(compiler) {};

      LogicVar.prototype.subst = function(bindings) {
        return this;
      };

      LogicVar.prototype.free_vars = function() {
        return set();
      };

      LogicVar.prototype.side_effects = function() {
        return false;
      };

      LogicVar.prototype.optimize = function(env, compiler) {
        return this;
      };

      LogicVar.prototype.replace_assign = function(compiler) {
        return this;
      };

      LogicVar.prototype.insert_return_statement = function() {
        return Return(this);
      };

      LogicVar.prototype.replace_return_with_yield = function() {
        return this;
      };

      LogicVar.prototype.javascriptize = function(env, compiler) {
        return [this];
      };

      LogicVar.prototype.deref = function(bindings) {
        var next, self;

        self = this;
        while (1) {
          next = bindings[self];
          if (!isinstance(next, LogicVar) || next === self) {
            return next;
          } else {
            self = next;
          }
        }
      };

      LogicVar.prototype.to_code = function(compiler) {
        return "LogicVar('%s')" % this.name;
      };

      LogicVar.prototype.toString = function() {
        return "LogicVar(%s)" % this.name;
      };

      return LogicVar;

    })(il.Element);
    il.DummyVar = (function(_super) {
      __extends(DummyVar, _super);

      function DummyVar() {
        _ref43 = DummyVar.__super__.constructor.apply(this, arguments);
        return _ref43;
      }

      DummyVar.prototype.to_code = function(compiler) {
        return "DummyVar('%s')" % this.name;
      };

      return DummyVar;

    })(il.LogicVar);
    il.Assign = (function(_super) {
      __extends(Assign, _super);

      function Assign(var1, exp) {
        this.var1 = var1;
        this.exp = exp;
      }

      Assign.prototype.find_assign_lefts = function() {
        return set([this.var1]);
      };

      Assign.prototype.analyse = function(compiler) {
        return this.exp.analyse(compiler);
      };

      Assign.prototype.insert_return_statement = function() {
        return begin(Return(this.var1));
      };

      Assign.prototype.code_size = function() {
        return code_size(this.exp) + 2;
      };

      Assign.prototype.side_effects = function() {
        return true;
      };

      Assign.prototype.subst = function(bindings) {
        return Assign(this.var1, this.exp.subst(bindings));
      };

      Assign.prototype.free_vars = function() {
        return this.exp.free_vars();
      };

      Assign.prototype.right_value = function() {
        return this.exp;
      };

      Assign.prototype.optimize = function(env, compiler) {
        var exp, result;

        exp = this.exp.optimize(env, compiler);
        result = Assign(this.var1, exp);
        if (isinstance(this.var1, ConstLocalVar)) {
          if (isinstance(exp, ConstAtom) || isinstance(exp, Cons) || isinstance(exp, ExpressionWithCode) || isinstance(exp, Lamda)) {
            env[this.var1] = exp;
            return None;
          } else if (isinstance(exp, RulesDict)) {
            env[this.var1] = exp;
            exp.name = this.var1;
            return result;
          }
        }
        return result;
      };

      Assign.prototype.javascriptize = function(env, compiler) {
        var exps, fun, result;

        if (!this.var1.name.startswith('solver.')) {
          if (isinstance(this.exp, Function)) {
            this.exp.name = this.var1;
          }
          fun = this.exp;
        } else if (isinstance(this.exp, Lamda) && !isinstance(this.exp, MacroLamda)) {
          fun = Function(this.var1, this.exp.params, this.exp.body);
        } else {
          fun = None;
        }
        if (fun !== None) {
          result = fun.javascriptize(env, compiler);
          if (isinstance(result[0][-1], Var)) {
            result = [result[0].slice(0), result[1]];
          }
          return result;
        }
        exps = this.exp.javascriptize(env, compiler);
        return [exps.slice(0) + [Assign(this.var1, exps[-1])], true];
      };

      Assign.prototype.to_code = function(compiler) {
        if (isinstance(this.exp, RulesDict) && this.exp.to_coded) {
          return '';
        } else {
          return "" + (this.var1.to_code(compiler)) + " = " + (this.exp.to_code(compiler));
        }
      };

      Assign.prototype.__eq__ = function(x, y) {
        return classeq(x, y) && x.var1 === y.var1 && x.exp === y.exp;
      };

      Assign.prototype.toString = function() {
        return "#il.Assign(" + this.var1 + ", " + this.exp + ")";
      };

      return Assign;

    })(il.Element);
    il.AssignFromList = (function(_super) {
      __extends(AssignFromList, _super);

      function AssignFromList() {
        var args;

        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        this.vars = args.slice(0);
        this.value = args[-1];
      }

      AssignFromList.prototype.side_effects = function() {
        return true;
      };

      AssignFromList.prototype.analyse = function(compiler) {
        var var1, _i, _len, _ref44;

        _ref44 = this.vars;
        for (_i = 0, _len = _ref44.length; _i < _len; _i++) {
          var1 = _ref44[_i];
          var1.analyse(compiler);
        }
        return this.value.analyse(compiler);
      };

      AssignFromList.prototype.subst = function(bindings) {
        var var1;

        return AssignFromList.apply(null, tuple((function() {
          var _i, _len, _ref44, _results;

          _ref44 = this.vars;
          _results = [];
          for (_i = 0, _len = _ref44.length; _i < _len; _i++) {
            var1 = _ref44[_i];
            _results.push(var1.subst(bindings));
          }
          return _results;
        }).call(this)) + [this.value.subst(bindings)]);
      };

      AssignFromList.prototype.code_size = function() {
        return 1;
      };

      AssignFromList.prototype.free_vars = function() {
        var result;

        result = set(this.vars);
        result |= this.value.free_vars();
        return result;
      };

      AssignFromList.prototype.optimize = function(env, compiler) {
        var v, value, var1, _i, _len, _ref44;

        value = this.value.optimize(env, compiler);
        if (isinstance(value, Tuple) || isinstance(value, List)) {
          if (len(value.item) !== len(this.vars)) {
            throw new make_new(DaoCompileError);
          } else {
            _ref44 = zip(this.vars, value.item);
            for (v = _i = 0, _len = _ref44.length; _i < _len; v = ++_i) {
              var1 = _ref44[v];
              if (isinstance(var1, ConstLocalVar)) {
                env[var1] = v;
              } else {
                assigns.append(Assign(var1, v));
              }
            }
            if (assigns) {
              return begin.apply(null, tuple(Assign(var1, v)));
            } else {
              return None;
            }
          }
          return AssignFromList.apply(null, this.vars + [value]);
        }
      };

      AssignFromList.prototype.find_assign_lefts = function() {
        return set(this.vars);
      };

      AssignFromList.prototype.javascriptize = function(env, compiler) {
        var value_exps;

        value_exps = this.value.javascriptize(env, compiler);
        return value_exps.slice(0) + [AssignFromList.apply(null, this.vars + [value_exps[-1]])];
      };

      AssignFromList.prototype.insert_return_statement = function() {
        return Return(this);
      };

      AssignFromList.prototype.replace_return_with_yield = function() {
        return this;
      };

      AssignFromList.prototype.bool = function() {
        return false;
      };

      AssignFromList.prototype.to_code = function(compiler) {
        var x;

        return "" + (', '.join([
          (function() {
            var _i, _len, _ref44, _results;

            _ref44 = this.vars;
            _results = [];
            for (_i = 0, _len = _ref44.length; _i < _len; _i++) {
              x = _ref44[_i];
              _results.push(x.to_code(compiler));
            }
            return _results;
          }).call(this)
        ])) + " = " + (this.value.to_code(compiler));
      };

      AssignFromList.prototype.toString = function() {
        return "il.AssignFromList(" + this.vars + ", " + this.value + ")";
      };

      return AssignFromList;

    })(il.Element);
    if_ = function(test, then_, else_) {
      return new il.If(element(test), element(then_), element(else_));
    };
    il.If = (function(_super) {
      __extends(If, _super);

      function If(test, then_, else_) {
        this.test = test;
        this.then_ = then_;
        this.else_ = else_;
      }

      If.prototype.find_assign_lefts = function() {
        return this.then_.find_assign_lefts() | this.else_.find_assign_lefts();
      };

      If.prototype.analyse = function(compiler) {
        this.test.analyse(compiler);
        this.then_.analyse(compiler);
        return this.else_.analyse(compiler);
      };

      If.prototype.code_size = function() {
        return 3 + this.test.code_size() + this.then_.code_size() + this.else_.code_size();
      };

      If.prototype.side_effects = function() {
        return !(this.test.side_effects() || this.then_.side_effects() || this.else_.side_effects());
      };

      If.prototype.subst = function(bindings) {
        return new If(this.test.subst(bindings), this.then_.subst(bindings), this.else_.subst(bindings));
      };

      If.prototype.free_vars = function() {
        var result;

        result = set();
        result |= this.test.free_vars();
        result |= this.then_.free_vars();
        result |= this.else_.free_vars();
        return result;
      };

      If.prototype.optimize = function(env, compiler) {
        var else_, test, test_bool, then_;

        test = this.test.optimize(env, compiler);
        test_bool = test.bool();
        if (test_bool === true) {
          then_ = this.then_.optimize(env, compiler);
        }
        if (isinstance(then_, If) && then_.test === test) {
          then_ = then_.then_;
          return then_;
        } else if (test_bool === false) {
          else_ = this.else_.optimize(env, compiler);
        }
        if (isinstance(else_, If) && else_.test === test) {
          else_ = else_.else_;
          return else_;
        }
        then_ = this.then_.optimize(env, compiler);
        else_ = this.else_.optimize(env, compiler);
        if (isinstance(then_, If) && then_.test === test) {
          then_ = then_.then_;
        }
        if (isinstance(else_, If) && else_.test === test) {
          else_ = else_.else_;
          return If(test, then_, else_);
        }
      };

      If.prototype.insert_return_statement = function() {
        return If(this.test, this.then_.insert_return_statement()(this.else_.insert_return_statement()));
      };

      If.prototype.replace_return_with_yield = function() {
        return If(this.test, this.then_.replace_return_with_yield(), this.else_.replace_return_with_yield());
      };

      If.prototype.javascriptize = function(env, compiler) {
        var else_, test, then_;

        test = this.test.javascriptize(env, compiler);
        then_ = this.then_.javascriptize(env, compiler);
        else_ = this.else_.javascriptize(env, compiler);
        if_ = If(test[-1], begin.apply(null, then_), begin.apply(null, else_));
        return test.slice(0) + [if_];
      };

      If.prototype.to_code = function(compiler) {
        var result;

        if (this.is_statement) {
          result = "if " + (this.test.to_code(compiler)) + ": \n" + (compiler.indent(this.then_.to_code(compiler))) + "\n";
        }
        if (this.else_ !== pseudo_else) {
          result += 'else\n%s\n' % compiler.indent(this.else_.to_code(compiler));
          return result;
        } else {
          return "(" + (this.then_.to_code(compiler)) + " if " + (this.test.to_code(compiler)) + " \nelse " + (this.else_.to_code(compiler)) + ")";
        }
      };

      If.prototype.__eq__ = function(x, y) {
        return classeq(x, y) && x.test === y.test && x.then === y.then && x.else_ === y.else_;
      };

      If.prototype.toString = function() {
        if (this.else_ !== pseudo_else) {
          return "il.If(" + this.test + ", \n" + this.then_ + ", \n" + else_ + ")";
        } else {
          return "il.If(" + this.test + ", \n" + this.then_ + ")";
        }
      };

      return If;

    })(il.Element);
    il.if2 = function(test, then_) {
      return new il.If(test, then_, pseudo_else);
    };
    il.PseudoElse = (function(_super) {
      __extends(PseudoElse, _super);

      function PseudoElse() {}

      PseudoElse.prototype.code_size = function() {
        return 0;
      };

      PseudoElse.prototype.insert_return_statement = function() {
        return this;
      };

      PseudoElse.prototype.replace_return_with_yield = function() {
        return this;
      };

      PseudoElse.prototype.to_code = function(compiler) {
        return '';
      };

      PseudoElse.prototype.__eq__ = function(x, y) {
        return classeq(x, y);
      };

      PseudoElse.prototype.toString = function() {
        return 'il.pseudo_else';
      };

      return PseudoElse;

    })(il.ConstAtom);
    il.pseudo_else = new il.PseudoElse();
    il.Cons = (function(_super) {
      __extends(Cons, _super);

      function Cons(head, tail) {
        this.head = head;
        this.tail = tail;
      }

      Cons.prototype.code_size = function() {
        return 1;
      };

      Cons.prototype.insert_return_statement = function() {
        return this;
      };

      Cons.prototype.replace_return_with_yield = function() {
        return this;
      };

      Cons.prototype.to_code = function(compiler) {
        return "Cons(" + (this.head.to_code(compiler)) + ", " + (this.tail.to_code(compiler)) + ")";
      };

      Cons.prototype.__eq__ = function(x, y) {
        return classeq(x, y) && x.head === y.head && x.tail === y.tail;
      };

      Cons.prototype.toString = function() {
        return "il.Cons(" + this.head + ", " + this.tail + ")";
      };

      return Cons;

    })(il.ConstAtom);
    il.while_ = function() {
      var exps, test, x;

      test = arguments[0], exps = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return new il.While(test, begin.apply(null, [
        (function() {
          var _i, _len, _results;

          _results = [];
          for (_i = 0, _len = exps.length; _i < _len; _i++) {
            x = exps[_i];
            _results.push(x);
          }
          return _results;
        })()
      ]));
    };
    il.While = (function(_super) {
      __extends(While, _super);

      function While(test, body) {
        this.test = test;
        this.body = body;
      }

      While.prototype.find_assign_lefts = function() {
        return this.body.find_assign_lefts();
      };

      While.prototype.analyse = function(compiler) {
        this.test.analyse(compiler);
        return this.body.analyse(compiler);
      };

      While.prototype.free_vars = function() {
        return this.test.free_vars() | this.body.free_vars();
      };

      While.prototype.code_size = function() {
        return 3 + this.test.code_size()(+this.body.code_size());
      };

      While.prototype.side_effects = function() {
        return !this.test.side_effects() && !this.body.side_effects();
      };

      While.prototype.subst = function(bindings) {
        return While(this.test.subst(bindings), this.body.subst(bindings));
      };

      While.prototype.optimize = function(env, compiler) {
        var body, free_vars, result, test;

        free_vars = this.free_vars();
        test = this.test.optimize(env, compiler);
        body = this.body.optimize(env, compiler);
        result = While(test, body);
        return result;
      };

      While.prototype.insert_return_statement = function() {
        return While(this.test, this.body.insert_return_statement());
      };

      While.prototype.replace_return_with_yield = function() {
        return While(this.test(this.body.replace_return_with_yield()));
      };

      While.prototype.javascriptize = function(env, compiler) {
        var body, test;

        test = this.test.javascriptize(env, compiler);
        body = this.body.javascriptize(env, compiler);
        return test.slice(0) + [While(test[-1], begin.apply(null, body))];
      };

      While.prototype.to_code = function(compiler) {
        return "while " + (this.test.to_code(compiler)) + ":\n" + (compiler.indent(this.body.to_code(compiler))) + "\n";
      };

      While.prototype.__eq__ = function(x, y) {
        return classeq(x, y) && x.test === y.test && x.body === y.body;
      };

      While.prototype.toString = function() {
        return "il.While(" + this.test + ", \n" + this.body + ")";
      };

      return While;

    })(il.Element);
    for_ = function() {
      var exps, range, var1, x;

      var1 = arguments[0], range = arguments[1], exps = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      return new il.For(element(var1), element(range), begin.apply(null, [
        (function() {
          var _i, _len, _results;

          _results = [];
          for (_i = 0, _len = exps.length; _i < _len; _i++) {
            x = exps[_i];
            _results.push(x);
          }
          return _results;
        })()
      ]));
    };
    il.For = (function(_super) {
      __extends(For, _super);

      function For(var1, range, body) {
        this.var1 = var1;
        this.range = range;
        this.body = body;
      }

      For.prototype.find_assign_lefts = function() {
        return this.body.find_assign_lefts();
      };

      For.prototype.analyse = function(compiler) {
        this.var1.analyse(compiler);
        this.range.analyse(compiler);
        return this.body.analyse(compiler);
      };

      For.prototype.code_size = function() {
        return 3 + this.var1.code_size() + this.range.code_size() + this.body.code_size();
      };

      For.prototype.side_effects = function() {
        return !this.var1.side_effects() && !this.range.side_effects() && !this.body.side_effects();
      };

      For.prototype.subst = function(bindings) {
        return For(this.var1.subst(bindings), this.range.subst(bindings), this.body.subst(bindings));
      };

      For.prototype.free_vars = function() {
        return this.var1.free_vars() | this.range.free_vars() | this.body.free_vars();
      };

      For.prototype.optimize = function(env, compiler) {
        var assigns, free_vars, value, var1, _i, _len;

        free_vars = this.free_vars();
        assigns = [];
        for (_i = 0, _len = free_vars.length; _i < _len; _i++) {
          var1 = free_vars[_i];
          value = env[var1];
          if (value === void 0) {
            continue;
          }
          assigns.append(Assign(var1, value));
          del(env[var1]);
        }
        return begin.apply(null, tuple(assigns) + [For(this.var1, this.range.optimize(env, compiler), this.body.optimize(env, compiler))]);
      };

      For.prototype.insert_return_statement = function() {
        return For(this.var1, this.range, this.body.insert_return_statement());
      };

      For.prototype.replace_return_with_yield = function() {
        return For(this.var1, this.range, this.body.replace_return_with_yield());
      };

      For.prototype.javascriptize = function(env, compiler) {
        var body, range, var1;

        var1 = this.var1.javascriptize(env, compiler);
        range = this.range.javascriptize(env, compiler);
        body = this.body.javascriptize(env, compiler);
        return [For(var1[-1], range[-1], begin.apply(null, body))];
      };

      For.prototype.to_code = function(compiler) {
        return "for " + (this.var1.to_code(compiler)) + " in " + (this.range.to_code(compiler)) + ":\n" + (compiler.indent(this.body.to_code(compiler))) + "\n";
      };

      For.prototype.__eq__ = function(x, y) {
        return classeq(x, y) && x.var1 === y.var1 && x.range === y.range && x.body === y.body;
      };

      For.prototype.toString = function() {
        return "il.For(" + this.var1 + ", " + this.range + ", " + this.body + ")";
      };

      return For;

    })(il.Element);
    il.BinaryOperation = (function(_super) {
      __extends(BinaryOperation, _super);

      function BinaryOperation(name, operator, operator_fun, has_side_effects) {
        this.name = name;
        this.operator = operator;
        this.operator_fun = operator_fun;
        this.has_side_effects = has_side_effects != null ? has_side_effects : true;
      }

      BinaryOperation.prototype.analyse = function(compiler) {
        return this;
      };

      BinaryOperation.prototype.subst = function(bindings) {
        return this;
      };

      BinaryOperation.prototype.optimize = function(env, compiler) {
        return this;
      };

      BinaryOperation.prototype.code_size = function() {
        return 1;
      };

      BinaryOperation.prototype.javascriptize = function(env, compiler) {
        return [this];
      };

      BinaryOperation.prototype.to_code = function(compiler) {
        return this.operator;
      };

      BinaryOperation.prototype.callOn = function() {
        var args;

        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return BinaryOperationApply(args);
      };

      BinaryOperation.prototype.__eq__ = function(x, y) {
        return classeq(x, y) && x.operator === y.operator;
      };

      BinaryOperation.prototype.__hash__ = function() {
        return hash(this.operator);
      };

      BinaryOperation.prototype.toString = function() {
        return "il." + this.name;
      };

      return BinaryOperation;

    })(il.Element);
    il.and_ = function() {
      var exps;

      exps = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (len(exps) === 2) {
        return And.apply(null, exps);
      } else {
        return And(exps[0], and_.apply(null, exps.slice(1)));
      }
    };
    il.or_ = function() {
      var exps;

      exps = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (len(exps) === 2) {
        return Or.apply(null, exps);
      } else {
        return Or(exps[0], or_(exps.slice(1)));
      }
    };
    il.BinaryOperationApply = (function(_super) {
      __extends(BinaryOperationApply, _super);

      function BinaryOperationApply(caller, args) {
        this.caller = caller;
        this.args = args;
      }

      BinaryOperationApply.prototype.analyse = function(compiler) {
        var arg, _i, _len, _ref44, _results;

        compiler.called_count[this.caller] = compiler.called_count.setdefault(this.caller, 0) + 1;
        this.caller.analyse(compiler);
        _ref44 = this.args;
        _results = [];
        for (_i = 0, _len = _ref44.length; _i < _len; _i++) {
          arg = _ref44[_i];
          _results.push(arg.analyse(compiler));
        }
        return _results;
      };

      BinaryOperationApply.prototype.code_size = function() {
        var x;

        return this.caller.code_size() + sum([
          (function() {
            var _i, _len, _ref44, _results;

            _ref44 = this.args;
            _results = [];
            for (_i = 0, _len = _ref44.length; _i < _len; _i++) {
              x = _ref44[_i];
              _results.push(x.code_size());
            }
            return _results;
          }).call(this)
        ]);
      };

      BinaryOperationApply.prototype.side_effects = function() {
        if (isinstance(this.caller, Var)) {
          return true;
        } else if (this.caller.has_side_effects) {
          return true;
        } else {
          return false;
        }
      };

      BinaryOperationApply.prototype.subst = function(bindings) {
        var arg;

        return this.__class__(this.caller.subst(bindings), tuple((function() {
          var _i, _len, _ref44, _results;

          _ref44 = this.args;
          _results = [];
          for (_i = 0, _len = _ref44.length; _i < _len; _i++) {
            arg = _ref44[_i];
            _results.push(arg.subst(bindings));
          }
          return _results;
        }).call(this)));
      };

      BinaryOperationApply.prototype.optimize = function(env, compiler) {
        var arg, args, caller, _i, _len;

        caller = this.caller;
        args = optimize_args(this.args, env, compiler);
        for (_i = 0, _len = args.length; _i < _len; _i++) {
          arg = args[_i];
          if (!isinstance(arg, Atom)) {
            break;
          } else {
            element.apply(null, caller.operator_fun(tuple((function() {
              var _j, _len1, _results;

              _results = [];
              for (_j = 0, _len1 = args.length; _j < _len1; _j++) {
                arg = args[_j];
                _results.push(arg.item);
              }
              return _results;
            })())));
          }
        }
        return this.__class__(caller, args);
      };

      BinaryOperationApply.prototype.insert_return_statement = function() {
        return Return(this);
      };

      BinaryOperationApply.prototype.javascriptize = function(env, compiler) {
        var args, exps, _ref44;

        _ref44 = javascriptize_args(this.args, env, compiler), exps = _ref44[0], args = _ref44[1];
        return exps + [this.__class__(this.caller, args)];
      };

      BinaryOperationApply.prototype.free_vars = function() {
        var arg, result, _i, _len, _ref44;

        result = set();
        _ref44 = this.args;
        for (_i = 0, _len = _ref44.length; _i < _len; _i++) {
          arg = _ref44[_i];
          result |= arg.free_vars();
        }
        return result;
      };

      BinaryOperationApply.prototype.to_code = function(compiler) {
        if (!this.caller.operator[0].isalpha()) {
          return "(" + (this.args[0].to_code(compiler)) + ")" + (this.caller.to_code(compiler)) + "(" + (this.args[1].to_code(compiler)) + ")";
        } else {
          return "(" + (this.args[0].to_code(compiler)) + ") " + (this.caller.to_code(compiler)) + " (" + (this.args[1].to_code(compiler)) + ")";
        }
      };

      BinaryOperationApply.prototype.toString = function() {
        var arg;

        return "" + this.caller + "(" + (', '.join([
          (function() {
            var _i, _len, _ref44, _results;

            _ref44 = this.args;
            _results = [];
            for (_i = 0, _len = _ref44.length; _i < _len; _i++) {
              arg = _ref44[_i];
              _results.push(repr(arg));
            }
            return _results;
          }).call(this)
        ])) + ")";
      };

      return BinaryOperationApply;

    })(il.Apply);
    il.VirtualOperation = (function(_super) {
      __extends(VirtualOperation, _super);

      function VirtualOperation() {
        var args;

        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (this.arity >= 0) {
          assert(args.length === this.arity, "" + this.name + " should have " + this.arity + " arguments.");
        }
        this.args = args;
      }

      VirtualOperation.prototype.callOn = function() {
        var args;

        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return Apply(args);
      };

      VirtualOperation.prototype.find_assign_lefts = function() {
        return set();
      };

      VirtualOperation.prototype.side_effects = function() {
        return true;
      };

      VirtualOperation.prototype.analyse = function(compiler) {
        var arg, _i, _len, _ref44, _results;

        _ref44 = this.args;
        _results = [];
        for (_i = 0, _len = _ref44.length; _i < _len; _i++) {
          arg = _ref44[_i];
          _results.push(arg.analyse(compiler));
        }
        return _results;
      };

      VirtualOperation.prototype.subst = function(bindings) {
        var x;

        return this.__class__.apply(this, tuple((function() {
          var _i, _len, _ref44, _results;

          _ref44 = this.args;
          _results = [];
          for (_i = 0, _len = _ref44.length; _i < _len; _i++) {
            x = _ref44[_i];
            _results.push(x.subst(bindings));
          }
          return _results;
        }).call(this)));
      };

      VirtualOperation.prototype.code_size = function() {
        return 1;
      };

      VirtualOperation.prototype.optimize = function(env, compiler) {
        var arg, args, assign, e, free_vars, result, var1, _i, _j, _len, _len1;

        if (this.has_side_effects) {
          this.__class__.apply(this, optimize_args(this.args, env, compiler));
        }
        args = optimize_args(this.args, env, compiler);
        free_vars = set();
        for (_i = 0, _len = args.length; _i < _len; _i++) {
          arg = args[_i];
          free_vars |= arg.free_vars();
        }
        for (_j = 0, _len1 = free_vars.length; _j < _len1; _j++) {
          var1 = free_vars[_j];
          try {
            assign = env[var1];
          } catch (_error) {
            e = _error;
            if (assign !== void 0) {
              assign.dont_remove();
            }
            result = this.__class__.apply(this, args);
          }
        }
        return result;
      };

      VirtualOperation.prototype.bool = function() {
        return unknown;
      };

      VirtualOperation.prototype.insert_return_statement = function() {
        return Return(this);
      };

      VirtualOperation.prototype.replace_return_with_yield = function() {
        return this;
      };

      VirtualOperation.prototype.javascriptize = function(env, compiler) {
        var args, exps, _ref44;

        _ref44 = javascriptize_args(this.args, env, compiler), exps = _ref44[0], args = _ref44[1];
        return exps + this.__class__.apply(this, args);
      };

      VirtualOperation.prototype.to_code = function(compiler) {
        var x;

        if (isinstance(this.__class__.code_format, str)) {
          if (this.__class__.arity === 0) {
            return this.__class__.code_format;
          } else if (this.__class__.arity !== -1) {
            return this.__class__.code_format % tuple((function() {
              var _i, _len, _ref44, _results;

              _ref44 = this.args;
              _results = [];
              for (_i = 0, _len = _ref44.length; _i < _len; _i++) {
                x = _ref44[_i];
                _results.push(x.to_code(compiler));
              }
              return _results;
            }).call(this));
          } else {
            return this.__class__.code_format % (', '.join([
              (function() {
                var _i, _len, _ref44, _results;

                _ref44 = this.args;
                _results = [];
                for (_i = 0, _len = _ref44.length; _i < _len; _i++) {
                  x = _ref44[_i];
                  _results.push(x.to_code(compiler));
                }
                return _results;
              }).call(this)
            ]));
          }
        } else {
          return this.__class__.code_format(compiler);
        }
      };

      VirtualOperation.prototype.__eq__ = function(x, y) {
        return classeq(x, y) && x.args === y.args;
      };

      VirtualOperation.prototype.__hash__ = function() {
        return hash(this.__class__.__name__);
      };

      VirtualOperation.prototype.free_vars = function() {
        var arg, result, _i, _len, _ref44;

        result = set();
        _ref44 = this.args;
        for (_i = 0, _len = _ref44.length; _i < _len; _i++) {
          arg = _ref44[_i];
          result |= arg.free_vars();
        }
        return result;
      };

      VirtualOperation.prototype.toString = function() {
        var e, x;

        try {
          if (this.arity === 0) {
            return "il." + this.__class__.__name__;
          }
        } catch (_error) {
          e = _error;
          return "il." + this.__class__.__name__ + "(" + (', '.join([
            (function() {
              var _i, _len, _ref44, _results;

              _ref44 = this.args;
              _results = [];
              for (_i = 0, _len = _ref44.length; _i < _len; _i++) {
                x = _ref44[_i];
                _results.push(repr(x));
              }
              return _results;
            }).call(this)
          ])) + ")";
        }
      };

      return VirtualOperation;

    })(il.Element);
    il.Deref = (function(_super) {
      __extends(Deref, _super);

      function Deref(item) {
        this.item = item;
      }

      Deref.prototype.side_effects = function() {
        return false;
      };

      Deref.prototype.analyse = function(compiler) {
        return this.item.analyse(compiler);
      };

      Deref.prototype.subst = function(bindings) {
        return Deref(this.item.subst(bindings));
      };

      Deref.prototype.code_size = function() {
        return 1;
      };

      Deref.prototype.free_vars = function() {
        return this.item.free_vars();
      };

      Deref.prototype.optimize = function(env, compiler) {
        var item;

        item = this.item.optimize(env, compiler);
        if (isinstance(item, Atom) || isinstance(item, Lamda)) {
          item;
        }
        if (isinstance(item, Deref)) {
          return item;
        }
        return Deref(item);
      };

      Deref.prototype.javascriptize = function(env, compiler) {
        var exps;

        exps = this.item.javascriptize(env, compiler);
        return exps.slice(0) + [this.__class__(exps[-1])];
      };

      Deref.prototype.insert_return_statement = function() {
        return Return(this);
      };

      Deref.prototype.replace_return_with_yield = function() {
        return this;
      };

      Deref.prototype.to_code = function(compiler) {
        return "deref(" + (this.item.to_code(compiler)) + ", solver.bindings)";
      };

      Deref.prototype.toString = function() {
        return "il.Deref(" + this.item + ")";
      };

      return Deref;

    })(il.Element);
    il.EvalExpressionWithCode = (function(_super) {
      __extends(EvalExpressionWithCode, _super);

      function EvalExpressionWithCode(item) {
        this.item = item;
      }

      EvalExpressionWithCode.prototype.side_effects = function() {
        return true;
      };

      EvalExpressionWithCode.prototype.analyse = function(compiler) {
        return this.item.analyse(compiler);
      };

      EvalExpressionWithCode.prototype.subst = function(bindings) {
        return EvalExpressionWithCode(this.item.subst(bindings));
      };

      EvalExpressionWithCode.prototype.code_size = function() {
        return 1;
      };

      EvalExpressionWithCode.prototype.free_vars = function() {
        return this.item.free_vars();
      };

      EvalExpressionWithCode.prototype.optimize = function(env, compiler) {
        var item;

        item = this.item.optimize(env, compiler);
        if (isinstance(item, Var)) {
          return EvalExpressionWithCode(item);
        } else if (isinstance(item, ExpressionWithCode)) {
          return item.fun.body.optimize(env, compiler);
        } else {
          return item;
        }
      };

      EvalExpressionWithCode.prototype.javascriptize = function(env, compiler) {
        var exps;

        exps = this.item.javascriptize(env, compiler);
        return exps.slice(0) + [this.__class__(exps[-1])];
      };

      EvalExpressionWithCode.prototype.insert_return_statement = function() {
        return Return(this);
      };

      EvalExpressionWithCode.prototype.replace_return_with_yield = function() {
        return this;
      };

      EvalExpressionWithCode.prototype.to_code = function(compiler) {
        return "(" + (this.item.to_code(compiler)) + ").fun()";
      };

      EvalExpressionWithCode.prototype.toString = function() {
        return "il.EvalExpressionWithCode(" + this.item + ")";
      };

      return EvalExpressionWithCode;

    })(il.Element);
    il.Len = (function(_super) {
      __extends(Len, _super);

      function Len(item) {
        this.item = item;
      }

      Len.prototype.side_effects = function() {
        return false;
      };

      Len.prototype.analyse = function(compiler) {
        return this.item.analyse(compiler);
      };

      Len.prototype.subst = function(bindings) {
        return Len(this.item.subst(bindings));
      };

      Len.prototype.code_size = function() {
        return 1;
      };

      Len.prototype.free_vars = function() {
        return this.item.free_vars();
      };

      Len.prototype.optimize = function(env, compiler) {
        var item;

        item = this.item.optimize(env, compiler);
        if (isinstance(item, Atom) || isinstance(item, MacroArgs)) {
          return Integer(len(item.item));
        }
        return Len(item);
      };

      Len.prototype.javascriptize = function(env, compiler) {
        var exps;

        exps = this.item.javascriptize(env, compiler);
        return exps.slice(0) + [Len(exps[-1])];
      };

      Len.prototype.insert_return_statement = function() {
        return Return(this);
      };

      Len.prototype.replace_return_with_yield = function() {
        return this;
      };

      Len.prototype.to_code = function(compiler) {
        return 'len(%s)' % this.item.to_code(compiler);
      };

      Len.prototype.toString = function() {
        return 'il.Len(%s)' % this.item;
      };

      return Len;

    })(il.Element);
    il.In = (function(_super) {
      __extends(In, _super);

      function In(item, container) {
        this.item = item;
        this.container = container;
      }

      In.prototype.side_effects = function() {
        return false;
      };

      In.prototype.analyse = function(compiler) {
        this.item.analyse(compiler);
        return this.container.analyse(compiler);
      };

      In.prototype.subst = function(bindings) {
        return In(this.item.subst(bindings), this.container.subst(bindings));
      };

      In.prototype.code_size = function() {
        return 1;
      };

      In.prototype.free_vars = function() {
        var result;

        result = set();
        result |= this.item.free_vars();
        result |= this.container.free_vars();
        return result;
      };

      In.prototype.optimize = function(env, compiler) {
        var container, item, _ref44, _ref45;

        item = this.item.optimize(env, compiler);
        container = this.container.optimize(env, compiler);
        if (isinstance(item, Atom)) {
          if (isinstance(container, Atom)) {
            return Bool((_ref44 = item.value, __indexOf.call(container.value, _ref44) >= 0));
          } else if (isinstance(container, RulesDict)) {
            return Bool((_ref45 = item.item, __indexOf.call(container.arity_body_map, _ref45) >= 0));
          }
        }
        return In(item, container);
      };

      In.prototype.javascriptize = function(env, compiler) {
        var exps1, exps2;

        exps1 = this.item.javascriptize(env, compiler);
        exps2 = this.container.javascriptize(env, compiler);
        return exps1.slice(0) + exps2.slice(0) + [In(exps1[-1], exps2[-1])];
      };

      In.prototype.insert_return_statement = function() {
        return Return(this);
      };

      In.prototype.replace_return_with_yield = function() {
        return this;
      };

      In.prototype.bool = function() {
        var _ref44;

        if (isinstance(this.item, Atom)) {
          if (isinstance(this.container, Atom)) {
            return _ref44 = this.item.value, __indexOf.call(this.container.value, _ref44) >= 0;
          } else if (isinstance(this.container, RulesDict)) {
            return [this.item.value, this.container.arity_body_map];
          }
        }
        return unknown;
      };

      In.prototype.to_code = function(compiler) {
        return "(" + (this.item.to_code(compiler)) + ") in (" + (this.container.to_code(compiler)) + ")";
      };

      In.prototype.toString = function() {
        return "il.In(" + this.item + ", " + this.container + ")";
      };

      return In;

    })(il.Element);
    il.GetItem = (function(_super) {
      __extends(GetItem, _super);

      function GetItem(container, index) {
        this.container = container;
        this.index = index;
      }

      GetItem.prototype.side_effects = function() {
        return false;
      };

      GetItem.prototype.analyse = function(compiler) {
        this.index.analyse(compiler);
        return this.container.analyse(compiler);
      };

      GetItem.prototype.subst = function(bindings) {
        return GetItem(this.container.subst(bindings), this.index.subst(bindings));
      };

      GetItem.prototype.code_size = function() {
        return 1;
      };

      GetItem.prototype.free_vars = function() {
        var result;

        result = set();
        result |= this.index.free_vars();
        result |= this.container.free_vars();
        return result;
      };

      GetItem.prototype.optimize = function(env, compiler) {
        var container, index;

        index = this.index.optimize(env, compiler);
        container = this.container.optimize(env, compiler);
        if (isinstance(index, Atom)) {
          if (isinstance(container, Atom)) {
            return element(container.item[index.item]);
          }
        } else if (isinstance(container, RulesDict)) {
          return element(container.arity_body_map[index.item]);
        } else if (isinstance(container, MacroArgs)) {
          return container.item[index.item];
        }
        return GetItem(container, index);
      };

      GetItem.prototype.javascriptize = function(env, compiler) {
        var container_exps, index_exps;

        container_exps = this.container.javascriptize(env, compiler);
        index_exps = this.index.javascriptize(env, compiler);
        return container_exps.slice(0) + index_exps.slice(0) + [GetItem(container_exps[-1], index_exps[-1])];
      };

      GetItem.prototype.insert_return_statement = function() {
        return Return(this);
      };

      GetItem.prototype.replace_return_with_yield = function() {
        return this;
      };

      GetItem.prototype.bool = function() {
        if (isinstance(this.index, Atom)) {
          if (isinstance(this.container, Atom)) {
            return Bool(bool(this.container.value[this.index.value]));
          }
        } else if (isinstance(this.container, RulesDict)) {
          return Bool(bool(this.container.arity_body_map[this.index.value]));
        }
        return unknown;
      };

      GetItem.prototype.to_code = function(compiler) {
        return "(" + (this.container.to_code(compiler)) + ")[" + (this.index.to_code(compiler)) + "]";
      };

      GetItem.prototype.toString = function() {
        return "il.GetItem(" + this.container + ", " + this.index + ")";
      };

      return GetItem;

    })(il.Element);
    il.ListAppend = (function(_super) {
      __extends(ListAppend, _super);

      function ListAppend(container, value) {
        this.container = container;
        this.value = value;
      }

      ListAppend.prototype.side_effects = function() {
        return true;
      };

      ListAppend.prototype.analyse = function(compiler) {
        this.value.analyse(compiler);
        return this.container.analyse(compiler);
      };

      ListAppend.prototype.subst = function(bindings) {
        return ListAppend(this.container.subst(bindings), this.value.subst(bindings));
      };

      ListAppend.prototype.code_size = function() {
        return 1;
      };

      ListAppend.prototype.free_vars = function() {
        var result;

        result = set();
        result |= this.value.free_vars();
        result |= this.container.free_vars();
        return result;
      };

      ListAppend.prototype.optimize = function(env, compiler) {
        var value;

        value = this.value.optimize(env, compiler);
        return ListAppend(this.container, value);
      };

      ListAppend.prototype.find_assign_lefts = function() {
        if (isinstance(this.container, Var)) {
          return set([this.container]);
        } else {
          return set();
        }
      };

      ListAppend.prototype.javascriptize = function(env, compiler) {
        var container_exps, value_exps;

        container_exps = this.container.javascriptize(env, compiler);
        value_exps = this.value.javascriptize(env, compiler);
        return container_exps.slice(0) + value_exps.slice(0) + [ListAppend(container_exps[-1], value_exps[-1])];
      };

      ListAppend.prototype.insert_return_statement = function() {
        return Return(this);
      };

      ListAppend.prototype.replace_return_with_yield = function() {
        return this;
      };

      ListAppend.prototype.bool = function() {
        return false;
      };

      ListAppend.prototype.to_code = function(compiler) {
        return "" + (this.container.to_code(compiler)) + ".append(" + (this.value.to_code(compiler)) + ")";
      };

      ListAppend.prototype.toString = function() {
        return "il.ListAppend(" + this.container + ", " + this.value + ")";
      };

      return ListAppend;

    })(il.Element);
    catch_cont_map = new il.SolverVar('catch_cont_map');
    il.PushCatchCont = (function(_super) {
      __extends(PushCatchCont, _super);

      function PushCatchCont(tag, cont) {
        this.tag = tag;
        this.cont = cont;
      }

      PushCatchCont.prototype.side_effects = function() {
        return true;
      };

      PushCatchCont.prototype.analyse = function(compiler) {
        this.tag.analyse(compiler);
        return this.cont.analyse(compiler);
      };

      PushCatchCont.prototype.subst = function(bindings) {
        return PushCatchCont(this.tag.subst(bindings), this.cont.subst(bindings));
      };

      PushCatchCont.prototype.code_size = function() {
        return 1;
      };

      PushCatchCont.prototype.free_vars = function() {
        var result;

        result = set([catch_cont_map]);
        result |= this.tag.free_vars();
        result |= this.cont.free_vars();
        return result;
      };

      PushCatchCont.prototype.optimize = function(env, compiler) {
        var cont, tag;

        tag = this.tag.optimize(env, compiler);
        cont = this.cont.optimize(env, compiler);
        return PushCatchCont(tag, cont);
      };

      PushCatchCont.prototype.javascriptize = function(env, compiler) {
        var cont_exps, tag_exps;

        tag_exps = this.tag.javascriptize(env, compiler);
        cont_exps = this.cont.javascriptize(env, compiler);
        return [tag_exps.slice(0) + cont_exps.slice(0) + [PushCatchCont(tag_exps[-1], cont_exps[-1])], true];
      };

      PushCatchCont.prototype.insert_return_statement = function() {
        return Return(this);
      };

      PushCatchCont.prototype.replace_return_with_yield = function() {
        return this;
      };

      PushCatchCont.prototype.bool = function() {
        return false;
      };

      PushCatchCont.prototype.to_code = function(compiler) {
        return "solver.catch_cont_map.setdefault(" + this.tag + ", []).append(" + this.cont + ")";
      };

      PushCatchCont.prototype.toString = function() {
        return "il.PushCatchCont(" + this.tag + ", " + this.cont + ")";
      };

      return PushCatchCont;

    })(il.Element);
    il.SetBinding = (function(_super) {
      __extends(SetBinding, _super);

      function SetBinding(var1, value) {
        this.var1 = var1;
        this.value = value;
      }

      SetBinding.prototype.side_effects = function() {
        return true;
      };

      SetBinding.prototype.analyse = function(compiler) {
        this.var1.analyse(compiler);
        return this.value.analyse(compiler);
      };

      SetBinding.prototype.subst = function(bindings) {
        return SetBinding(this.var1.subst(bindings), this.value.subst(bindings));
      };

      SetBinding.prototype.code_size = function() {
        return 1;
      };

      SetBinding.prototype.free_vars = function() {
        return this.value.free_vars();
      };

      SetBinding.prototype.optimize = function(env, compiler) {
        var value;

        value = this.value.optimize(env, compiler);
        return SetBinding(this.var1, value);
      };

      SetBinding.prototype.javascriptize = function(env, compiler) {
        var value_exps, var1, var_exps;

        var1 = this.var1.item(isinstance(this.var1, Deref) ? void 0 : this.var1);
        var_exps = [var1];
        value_exps = this.value.javascriptize(env, compiler);
        return var_exps.slice(0) + value_exps.slice(0) + [SetBinding(var_exps[-1], value_exps[-1])];
      };

      SetBinding.prototype.insert_return_statement = function() {
        return Return(this);
      };

      SetBinding.prototype.replace_return_with_yield = function() {
        return this;
      };

      SetBinding.prototype.bool = function() {
        return false;
      };

      SetBinding.prototype.to_code = function(compiler) {
        return "solver.bindings[" + (this.var1.to_code(compiler)) + "] = " + (this.value.to_code(compiler));
      };

      SetBinding.prototype.toString = function() {
        return "il.SetBinding(" + this.var1 + ", " + this.value + ")";
      };

      return SetBinding;

    })(il.Element);
    il.FindCatchCont = (function(_super) {
      __extends(FindCatchCont, _super);

      function FindCatchCont(tag) {
        this.tag = tag;
      }

      FindCatchCont.prototype.side_effects = function() {
        return true;
      };

      FindCatchCont.prototype.callOn = function(value) {
        return Apply([value]);
      };

      FindCatchCont.prototype.analyse = function(compiler) {
        return this.tag.analyse(compiler);
      };

      FindCatchCont.prototype.subst = function(bindings) {
        return FindCatchCont(this.tag.subst(bindings));
      };

      FindCatchCont.prototype.code_size = function() {
        return 1;
      };

      FindCatchCont.prototype.free_vars = function() {
        var result;

        result = set([catch_cont_map]);
        result |= this.tag.free_vars();
        return result;
      };

      FindCatchCont.prototype.optimize = function(env, compiler) {
        var tag;

        tag = this.tag.optimize(env, compiler);
        return FindCatchCont(tag);
      };

      FindCatchCont.prototype.javascriptize = function(env, compiler) {
        var tag_exps;

        tag_exps = this.tag.javascriptize(env, compiler);
        return tag_exps.slice(0) + [FindCatchCont(tag_exps[-1])];
      };

      FindCatchCont.prototype.insert_return_statement = function() {
        return Return(this);
      };

      FindCatchCont.prototype.replace_return_with_yield = function() {
        return this;
      };

      FindCatchCont.prototype.bool = function() {
        return false;
      };

      FindCatchCont.prototype.to_code = function(compiler) {
        return "solver.find_catch_cont.callOn(" + this.tag + ")";
      };

      FindCatchCont.prototype.toString = function() {
        return "il.FindCatchCont(" + this.tag + ")";
      };

      FindCatchCont.prototype.AddAssign = function(var1, value) {
        return Assign(var1, BinaryOperationApply(add, [var1, value]));
      };

      return FindCatchCont;

    })(il.Element);
    il.IsMacro = (function(_super) {
      __extends(IsMacro, _super);

      function IsMacro(item) {
        this.item = item;
      }

      IsMacro.prototype.side_effects = function() {
        return false;
      };

      IsMacro.prototype.free_vars = function() {
        return this.item.free_vars();
      };

      IsMacro.prototype.analyse = function(compiler) {
        return this.item.analyse(compiler);
      };

      IsMacro.prototype.subst = function(bindings) {
        return this.__class__(this.item.subst(bindings));
      };

      IsMacro.prototype.code_size = function() {
        return 1;
      };

      IsMacro.prototype.optimize = function(env, compiler) {
        return this.__class__(this.item.optimize(env, compiler));
      };

      IsMacro.prototype.javascriptize = function(env, compiler) {
        var exps;

        exps = this.item.javascriptize(env, compiler);
        return exps.slice(0) + [this.__class__(exps[-1])];
      };

      IsMacro.prototype.insert_return_statement = function() {
        return Return(this);
      };

      IsMacro.prototype.replace_return_with_yield = function() {
        return this;
      };

      IsMacro.prototype.bool = function() {
        if (isinstance(this.item, Macro)) {
          return true;
        } else if (isinstance(this.item, Lamda)) {
          return false;
        } else {
          return thenn(unknown);
        }
      };

      IsMacro.prototype.to_code = function(compiler) {
        return ("isinstance(" + (this.item.to_code(compiler)) + ", Macro)") % {
          toString: function() {
            return "il.IsMacro(" + this.item + ")";
          }
        };
      };

      return IsMacro;

    })(il.Element);
    il.IsMacroRules = (function(_super) {
      __extends(IsMacroRules, _super);

      function IsMacroRules() {
        _ref44 = IsMacroRules.__super__.constructor.apply(this, arguments);
        return _ref44;
      }

      IsMacroRules.prototype.bool = function() {
        if (isinstance(this.item, MacroRules)) {
          return true;
        } else if (isinstance(this.item, Lamda)) {
          return false;
        } else {
          return unknown;
        }
      };

      IsMacroRules.prototype.to_code = function(compiler) {
        return "isinstance(" + (item.to_code(compiler)) + ", MacroRules)";
      };

      IsMacroRules.prototype.toString = function() {
        return "il.IsMacroRules(" + this.item + ")";
      };

      return IsMacroRules;

    })(il.IsMacro);
    il.vop = vop = function(name, arity, code_format, has_side_effects) {
      var Vop, _ref45;

      Vop = (function(_super) {
        __extends(Vop, _super);

        function Vop() {
          _ref45 = Vop.__super__.constructor.apply(this, arguments);
          return _ref45;
        }

        Vop.prototype.name = name;

        Vop.prototype.__name__ = name;

        Vop.prototype.arity = arity;

        Vop.prototype.code_format = code_format;

        Vop.prototype.has_side_effects = has_side_effects;

        return Vop;

      })(il.VirtualOperation);
      return Vop;
    };
    il.VirtualOperation2 = (function(_super) {
      __extends(VirtualOperation2, _super);

      function VirtualOperation2() {
        _ref45 = VirtualOperation2.__super__.constructor.apply(this, arguments);
        return _ref45;
      }

      VirtualOperation2.prototype.insert_return_statement = function() {
        return Begin(Return());
      };

      VirtualOperation2.prototype.replace_return_with_yield = function() {
        return this;
      };

      return VirtualOperation2;

    })(il.VirtualOperation);
    il.vop2 = vop2 = function(name, arity, code_format, has_side_effects) {
      var Vop, _ref46;

      Vop = (function(_super) {
        __extends(Vop, _super);

        function Vop() {
          _ref46 = Vop.__super__.constructor.apply(this, arguments);
          return _ref46;
        }

        Vop.prototype.__name__ = name;

        Vop.prototype.name = name;

        Vop.prototype.arity = arity;

        Vop.prototype.code_format = code_format;

        Vop.prototype.has_side_effects = has_side_effects;

        return Vop;

      })(il.VirtualOperation2);
      return Vop;
    };
    il.LogicOperation = (function(_super) {
      __extends(LogicOperation, _super);

      function LogicOperation() {
        _ref46 = LogicOperation.__super__.constructor.apply(this, arguments);
        return _ref46;
      }

      return LogicOperation;

    })(il.VirtualOperation);
    il.BinaryLogicOperation = (function(_super) {
      __extends(BinaryLogicOperation, _super);

      function BinaryLogicOperation() {
        _ref47 = BinaryLogicOperation.__super__.constructor.apply(this, arguments);
        return _ref47;
      }

      return BinaryLogicOperation;

    })(il.VirtualOperation);
    il.UnaryLogicOperation = (function(_super) {
      __extends(UnaryLogicOperation, _super);

      function UnaryLogicOperation() {
        _ref48 = UnaryLogicOperation.__super__.constructor.apply(this, arguments);
        return _ref48;
      }

      return UnaryLogicOperation;

    })(il.VirtualOperation);
    Call_to_code = function(compiler) {
      var x;

      return "(" + (this.args[0].to_code(compiler)) + ")(" + (', '.join([
        (function() {
          var _i, _len, _ref49, _results;

          _ref49 = this.args.slice(1);
          _results = [];
          for (_i = 0, _len = _ref49.length; _i < _len; _i++) {
            x = _ref49[_i];
            _results.push(x.to_code(compiler));
          }
          return _results;
        }).call(this)
      ])) + ")";
    };
    il.Call = vop('Call', -1, Call_to_code, true);
    il.Attr = vop('Attr', 2, '%s.%s', false);
    AttrCall_to_code = function(compiler) {
      var x;

      return "" + (this.args[0].to_code(compiler)) + "(" + (', '.join([
        (function() {
          var _i, _len, _ref49, _results;

          _ref49 = this.args.slice(1);
          _results = [];
          for (_i = 0, _len = _ref49.length; _i < _len; _i++) {
            x = _ref49[_i];
            _results.push(x.to_code(compiler));
          }
          return _results;
        }).call(this)
      ])) + ")";
    };
    il.AttrCall = vop('AttrCall', -1, AttrCall_to_code, true);
    il.SetItem = vop2('SetItem', 3, '(%s)[%s] = %s', true);
    il.Slice2 = vop('Slice2', 2, '%s:%s', false);
    il.Not = vop('Not', 1, "not %s", false);
    il.Isinstance = vop('Isinstance', 2, "isinstance(%s, %s)", false);
    empty_list = new il.List([]);
    empty_dict = new il.Dict({});
    il.RaiseTypeError = vop2('RaiseTypeError', 1, 'throw new make_new %s', true);
    il.RaiseException = vop2('RaiseException', 1, 'throw new make_new %s', true);
    QuoteItem_to_code = function(compiler) {
      return '%s' % repr(this.args[0]);
    };
    il.QuoteItem = vop('QuoteItem', 1, QuoteItem_to_code, false);
    il.UnquoteSplice = vop('UnquoteSplice', 1, "UnquoteSplice(%s)", false);
    il.MakeTuple = vop('MakeTuple', 1, 'tuple(%s)', false);
    il.Cle = vop('Cle', 3, '(%s) <= (%s) <= (%s)', false);
    il.Cge = vop('Cge', 3, '(%s) >= (%s) >= (%s)', false);
    il.failcont = new il.SolverVar('fail_cont');
    il.SetFailCont = function(cont) {
      return new il.Assign(failcont, cont);
    };
    append_failcont = function() {
      var compiler, exps, fc, v;

      compiler = arguments[0], exps = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      v = compiler.new_var(ConstLocalVar('v'));
      fc = compiler.new_var(ConstLocalVar('fc'));
      return Begin(Assign(fc, failcont), SetFailCont(clamda(v, SetFailCont(fc), begin.apply(null, exps), fc(v))));
    };
    il.cut_cont = new il.SolverVar('cut_cont');
    SetCutCont = function(cont) {
      return new il.Assign(cut_cont, cont);
    };
    il.cut_or_cont = new il.SolverVar('cut_or_cont');
    il.SetCutOrCont = function(cont) {
      return new il.Assign(cut_or_cont, cont);
    };
    il.IsLogicVar = vop('IsLogicVar', 1, 'isinstance(%s, LogicVar)', false);
    il.DelBinding = vop2('DelBinding', 1, 'del solver.bindings[%s]', true);
    il.DelItem = vop2('DelItem', 2, 'del %s[%s]', true);
    il.GetValue = vop('GetValue', 1, 'get_value(%s, {}, solver.bindings)', false);
    il.parse_state = new il.SolverVar('parse_state');
    SetParseState = function(state) {
      return new il.Assign(parse_state, state);
    };
    il.Unify = vop('Unify', 2, 'solver.unify(%s, %s)', false);
    il.Nil = vop('Nil', 0, 'nil', false);
    il.nil = new il.Nil();
    il.bindings = new il.SolverVar('bindings');
    SetBindings = function(bindings1) {
      return new il.Assign(bindings, bindings1);
    };
    il.ConsHead = vop('ConsHead', 1, '(%s).head', false);
    il.ConsTail = vop('ConsTail', 1, '(%s).tail', false);
    il.Optargs = vop('Optargs', 1, '*%s', false);
    il.Continue = vop('Continue', 0, "continue\n", false);
    continue_ = new il.Continue();
    il.Prin = vop2('Prin', 1, "print %s,", true);
    il.PrintLn = vop2('PrintLn', 1, "print %s", true);
    il.DelListItem = vop2('DelListItem', 2, 'del %s[%s]', true);
    il.MakeList = vop('MakeList', 1, '[%s]', false);
    il.Copy = vop('Copy', 1, '(%s).copy()', false);
    il.Assert = vop('Assert', 1, 'assert %s', false);
    il.Int = new il.Symbol('int');
    Format_to_code = function(compiler) {
      var x;

      return "" + (this.args[0].to_code(compiler)) + "%" + (', '.join((function() {
        var _i, _len, _ref49, _results;

        _ref49 = this.args.slice(1);
        _results = [];
        for (_i = 0, _len = _ref49.length; _i < _len; _i++) {
          x = _ref49[_i];
          _results.push(x.to_code(compiler));
        }
        return _results;
      }).call(this)));
    };
    il.Format = vop('Format', -1, Format_to_code, false);
    Concat_to_code = function(compiler) {
      var arg;

      return '%s' % ''.join([
        (function() {
          var _i, _len, _ref49, _results;

          _ref49 = this.args;
          _results = [];
          for (_i = 0, _len = _ref49.length; _i < _len; _i++) {
            arg = _ref49[_i];
            _results.push(arg.to_code(compiler));
          }
          return _results;
        }).call(this)
      ]);
    };
    il.Concat = vop('Concat', -1, Concat_to_code, false);
    Format_to_code = function(compiler) {
      var x;

      return "file(" + (this.args[0].to_code(compiler)) + ", " + (', '.join((function() {
        var _i, _len, _ref49, _results;

        _ref49 = this.args.slice(1);
        _results = [];
        for (_i = 0, _len = _ref49.length; _i < _len; _i++) {
          x = _ref49[_i];
          _results.push(x.to_code(compiler));
        }
        return _results;
      }).call(this))) + ")";
    };
    il.OpenFile = vop('OpenFile', -1, Format_to_code, true);
    il.CloseFile = vop('CloseFile', 1, "%s.close()", true);
    il.ReadFile = vop('ReadFile', 1, '%s.read()', true);
    il.Readline = vop('ReadLine', 1, '%s.readline()', true);
    il.Readlines = vop('Readlines', 1, '%s.readlines()', true);
    return il.WriteFile = vop('WriteFile', 2, '%s.write(%s)', true);
  })();

}).call(this);

/*
//@ sourceMappingURL=solve.map
*/
