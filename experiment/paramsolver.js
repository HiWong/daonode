// Generated by CoffeeScript 1.6.2
(function() {
  var __slice = [].slice;

  exports.orp = function() {
    var args;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return function(cont) {
      return function(failcont) {
        switch (args.length) {
          case 1:
            return args[0](cont)(failcont);
          case 2:
            return args[0](cont)(args[1](cont)(failcont));
          default:
            return args[0](cont)(orp.apply(null, args.slice(1))(cont)(failcont));
        }
      };
    };
  };

  exports.andp = function() {
    var args;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return function(cont) {
      switch (args.length) {
        case 1:
          return args[0];
        case 2:
          return args[0](args[1](cont));
        default:
          return args[0](andp.apply(null, args.slice(1))(cont));
      }
    };
  };

  exports.succeed = function(cont) {
    return cont;
  };

  exports.fail = function(cont) {
    return function(failcont) {
      return failcont;
    };
  };

  exports.notp = function(goal) {
    return function(cont) {
      return function(failcont) {
        return goal(failcont)(cont);
      };
    };
  };

  exports.cutable = function(goal) {
    return function(cont) {
      return function(failcont) {
        return function(cutcont) {
          return goal(cont(failcont(failcont)));
        };
      };
    };
  };

  exports.cut = function(cont) {
    return function(failcont) {
      return function(cutcont) {
        return cont(cutcont)(cutcont);
      };
    };
  };

  exports.repeat = function(cont) {
    return function(failcont) {
      return cont(cont);
    };
  };

  exports.findall = function(goal) {
    return function(cont) {
      return function(failcont) {
        return goal(failcont)(cont(fc(function() {
          return failcont();
        })));
      };
    };
  };

  exports.may = function(goal) {
    return function(cont) {
      return function(failcont) {
        return goal(function(fc) {
          return cont(failcont(fc));
        })(function(cc) {
          return cont(failcont)(cc);
        });
      };
    };
  };

  exports.lazymay = function(goal) {
    return function(cont) {
      return function(failcont) {
        return cont(goal(cont(failcont)));
      };
    };
  };

  exports.char = function(x) {
    return function(cont) {
      return function(failcont) {
        return function(cutcont) {
          return function(bindings) {
            return function(text) {
              return function(cursor) {
                return function(value) {
                  if (cursor >= text.length) {
                    failcont(cutcont(bindings(text(cursor(value)))));
                  }
                  return cont(failcont(cutcont(bindings(text((cursor + 1)(text[cursor]))))));
                };
              };
            };
          };
        };
      };
    };
  };

  exports.digit = function(cont) {
    return function(failcont) {
      return function(cutcont) {
        return function(bindings) {
          return function(text) {
            return function(cursor) {
              return function(value) {
                var _ref;

                if (cursor >= text.length) {
                  failcont(cutcont(bindings(text(cursor(value)))));
                }
                if (('0' <= (_ref = text[cursor]) && _ref <= '9')) {
                  return cont(failcont(cutcont(bindings(text((cursor + 1)(text[cursor]))))));
                } else {
                  return failcont(cutcont(bindings(text(cursor(value)))));
                }
              };
            };
          };
        };
      };
    };
  };

}).call(this);

/*
//@ sourceMappingURL=paramsolver.map
*/
