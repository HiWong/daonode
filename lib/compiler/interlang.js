// Generated by CoffeeScript 1.6.2
(function() {
  var Apply, Array, Assign, AugmentAssign, Begin, BinaryOperation, BinaryOperationApply, CApply, Clamda, Code, Deref, Element, Env, Fun, IO, If, JSFun, Lamda, MAX_EXTEND_CODE_SIZE, NotImplement, Print, Return, UnaryOperation, UnaryOperationApply, Var, VirtualOperation, VirtualOperationApply, analyze, applySideEffect, augmentAssign, binary, boolize, codeSize, core, expsEffect, hasOwnProperty, il, insertReturn, isEmpty, isStatement, jsify, optimize, pure, sideEffect, solve, toString, unary, vop, _, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require("underscore");

  _ref = core = require("./core"), Env = _ref.Env, solve = _ref.solve;

  il = exports;

  exports.NotImplement = NotImplement = (function(_super) {
    __extends(NotImplement, _super);

    function NotImplement(exp, message, stack) {
      this.exp = exp;
      this.message = message != null ? message : '';
      this.stack = stack != null ? stack : this;
    }

    NotImplement.prototype.toString = function() {
      return "" + this.name + " >>> " + this.message;
    };

    return NotImplement;

  })(Error);

  toString = function(o) {
    return (o != null ? typeof o.toString === "function" ? o.toString() : void 0 : void 0) || o;
  };

  Element = (function() {
    function Element() {
      this.name = this.toString();
    }

    Element.prototype.call = function() {
      var args;

      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return new Apply(this, args);
    };

    Element.prototype.apply = function(args) {
      return new Apply(this, args);
    };

    Element.prototype.toCode = function(compiler) {
      throw new NotImplement(this);
    };

    Object.defineProperty(Element.prototype, '$', {
      get: function() {
        return this.constructor;
      }
    });

    return Element;

  })();

  Var = (function(_super) {
    __extends(Var, _super);

    function Var(name) {
      this.name = name;
    }

    Var.prototype.toString = function() {
      return this.name;
    };

    return Var;

  })(Element);

  Assign = (function(_super) {
    __extends(Assign, _super);

    function Assign(left, exp) {
      this.left = left;
      this.exp = exp;
      Assign.__super__.constructor.apply(this, arguments);
    }

    Assign.prototype.toString = function() {
      return "" + (toString(this.left)) + " = " + (toString(this.exp));
    };

    return Assign;

  })(Element);

  AugmentAssign = (function(_super) {
    __extends(AugmentAssign, _super);

    function AugmentAssign() {
      _ref1 = AugmentAssign.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    AugmentAssign.prototype.toString = function() {
      return "" + (toString(this.left)) + " " + this.constructor.operator + "= " + (toString(this.exp));
    };

    return AugmentAssign;

  })(Assign);

  Return = (function(_super) {
    __extends(Return, _super);

    function Return(value) {
      this.value = value;
      Return.__super__.constructor.apply(this, arguments);
    }

    Return.prototype.toString = function() {
      return "return(" + (toString(this.value)) + ")";
    };

    return Return;

  })(Element);

  Begin = (function(_super) {
    __extends(Begin, _super);

    function Begin(exps) {
      this.exps = exps;
      Begin.__super__.constructor.apply(this, arguments);
    }

    Begin.prototype.toString = function() {
      var e;

      return "begin(" + (((function() {
        var _i, _len, _ref2, _results;

        _ref2 = this.exps;
        _results = [];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          e = _ref2[_i];
          _results.push(toString(e));
        }
        return _results;
      }).call(this)).join(',')) + ")";
    };

    return Begin;

  })(Element);

  Array = (function(_super) {
    __extends(Array, _super);

    function Array() {
      _ref2 = Array.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    Array.prototype.toString = function() {
      var e;

      return "[" + (((function() {
        var _i, _len, _ref3, _results;

        _ref3 = this.exps;
        _results = [];
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          e = _ref3[_i];
          _results.push(toString(e));
        }
        return _results;
      }).call(this)).join(',')) + "]";
    };

    return Array;

  })(Begin);

  Print = (function(_super) {
    __extends(Print, _super);

    function Print() {
      _ref3 = Print.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    Print.prototype.toString = function() {
      var e;

      return "print(" + (((function() {
        var _i, _len, _ref4, _results;

        _ref4 = this.exps;
        _results = [];
        for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
          e = _ref4[_i];
          _results.push(toString(e));
        }
        return _results;
      }).call(this)).join(',')) + ")";
    };

    return Print;

  })(Begin);

  Lamda = (function(_super) {
    __extends(Lamda, _super);

    function Lamda(params, body) {
      this.params = params;
      this.body = body;
      Lamda.__super__.constructor.apply(this, arguments);
    }

    Lamda.prototype.toString = function() {
      var e;

      return "(" + (((function() {
        var _i, _len, _ref4, _results;

        _ref4 = this.params;
        _results = [];
        for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
          e = _ref4[_i];
          _results.push(toString(e));
        }
        return _results;
      }).call(this)).join(', ')) + " -> " + (toString(this.body)) + ")";
    };

    Lamda.prototype.call = function() {
      var args;

      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return new Apply(this, args);
    };

    Lamda.prototype.apply = function(args) {
      return new Apply(this, args);
    };

    return Lamda;

  })(Element);

  Clamda = (function(_super) {
    __extends(Clamda, _super);

    function Clamda(v, body) {
      this.v = v;
      this.body = body;
      this.name = this.toString();
    }

    Clamda.prototype.toString = function() {
      return "(" + (toString(this.v)) + " -> " + (toString(this.body)) + ")";
    };

    Clamda.prototype.call = function(value) {
      return new CApply(this, value);
    };

    return Clamda;

  })(Lamda);

  JSFun = (function(_super) {
    __extends(JSFun, _super);

    function JSFun(fun) {
      this.fun = fun;
      JSFun.__super__.constructor.apply(this, arguments);
    }

    JSFun.prototype.toString = function() {
      return "jsfun(" + this.fun + ")";
    };

    JSFun.prototype.apply = function(args) {
      return new Apply(this, args);
    };

    return JSFun;

  })(Element);

  exports.VirtualOperation = VirtualOperation = (function(_super) {
    __extends(VirtualOperation, _super);

    function VirtualOperation(name) {
      this.name = name;
      VirtualOperation.__super__.constructor.apply(this, arguments);
    }

    VirtualOperation.prototype.toString = function() {
      return "" + this.name;
    };

    VirtualOperation.prototype.call = function() {
      var args;

      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return new VirtualOperationApply(this, args);
    };

    VirtualOperation.prototype.apply = function(args) {
      return new VirtualOperationApply(this, args);
    };

    return VirtualOperation;

  })(Element);

  BinaryOperation = (function(_super) {
    __extends(BinaryOperation, _super);

    function BinaryOperation(symbol, func) {
      this.symbol = symbol;
      this.func = func;
      BinaryOperation.__super__.constructor.apply(this, arguments);
    }

    BinaryOperation.prototype.toString = function() {
      return "binary(" + this.symbol + ")";
    };

    BinaryOperation.prototype.call = function() {
      var args;

      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return new BinaryOperationApply(this, args);
    };

    BinaryOperation.prototype.apply = function(args) {
      return new BinaryOperationApply(this, args);
    };

    BinaryOperation.prototype._effect = false;

    return BinaryOperation;

  })(VirtualOperation);

  UnaryOperation = (function(_super) {
    __extends(UnaryOperation, _super);

    function UnaryOperation() {
      _ref4 = UnaryOperation.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    UnaryOperation.prototype.toString = function() {
      return "unary(" + this.symbol + ")";
    };

    UnaryOperation.prototype.call = function() {
      var args;

      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return new UnaryOperationApply(this, args);
    };

    UnaryOperation.prototype.apply = function(args) {
      return new UnaryOperationApply(this, args);
    };

    UnaryOperation.prototype._effect = false;

    return UnaryOperation;

  })(BinaryOperation);

  Fun = (function(_super) {
    __extends(Fun, _super);

    function Fun(func) {
      this.func = func;
      Fun.__super__.constructor.apply(this, arguments);
    }

    Fun.prototype.toString = function() {
      return "fun(" + this.func + ")";
    };

    Fun.prototype.apply = function(args) {
      return new Apply(this, args);
    };

    return Fun;

  })(Element);

  Apply = (function(_super) {
    __extends(Apply, _super);

    function Apply(caller, args) {
      this.caller = caller;
      this.args = args;
      Apply.__super__.constructor.apply(this, arguments);
    }

    Apply.prototype.toString = function() {
      var arg;

      return "(" + (toString(this.caller)) + ")(" + (((function() {
        var _i, _len, _ref5, _results;

        _ref5 = this.args;
        _results = [];
        for (_i = 0, _len = _ref5.length; _i < _len; _i++) {
          arg = _ref5[_i];
          _results.push(toString(arg));
        }
        return _results;
      }).call(this)).join(', ')) + ")";
    };

    return Apply;

  })(Element);

  VirtualOperationApply = (function(_super) {
    __extends(VirtualOperationApply, _super);

    function VirtualOperationApply() {
      _ref5 = VirtualOperationApply.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    VirtualOperationApply.prototype.toString = function() {
      var arg;

      return "vop(" + (toString(this.caller)) + ")(" + (((function() {
        var _i, _len, _ref6, _results;

        _ref6 = this.args;
        _results = [];
        for (_i = 0, _len = _ref6.length; _i < _len; _i++) {
          arg = _ref6[_i];
          _results.push(toString(arg));
        }
        return _results;
      }).call(this)).join(', ')) + ")";
    };

    return VirtualOperationApply;

  })(Apply);

  BinaryOperationApply = (function(_super) {
    __extends(BinaryOperationApply, _super);

    function BinaryOperationApply() {
      _ref6 = BinaryOperationApply.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    BinaryOperationApply.prototype.toString = function() {
      return "" + (toString(this.args[0])) + (toString(this.caller.symbol)) + (toString(this.args[1]));
    };

    return BinaryOperationApply;

  })(VirtualOperationApply);

  UnaryOperationApply = (function(_super) {
    __extends(UnaryOperationApply, _super);

    function UnaryOperationApply() {
      _ref7 = UnaryOperationApply.__super__.constructor.apply(this, arguments);
      return _ref7;
    }

    UnaryOperationApply.prototype.toString = function() {
      return "" + (toString(this.caller.symbol)) + (toString(this.args[0]));
    };

    return UnaryOperationApply;

  })(VirtualOperationApply);

  CApply = (function(_super) {
    __extends(CApply, _super);

    function CApply(cont, value) {
      this.caller = cont;
      this.args = [value];
      this.name = this.toString();
    }

    return CApply;

  })(Apply);

  Deref = (function(_super) {
    __extends(Deref, _super);

    function Deref(exp) {
      this.exp = exp;
      Deref.__super__.constructor.apply(this, arguments);
    }

    Deref.prototype.toString = function() {
      return "deref(" + (toString(this.exp)) + ")";
    };

    return Deref;

  })(Element);

  Code = (function(_super) {
    __extends(Code, _super);

    function Code(string) {
      this.string = string;
      Code.__super__.constructor.apply(this, arguments);
    }

    Code.prototype.toString = function() {
      return "code(" + this.string + ")";
    };

    return Code;

  })(Element);

  If = (function(_super) {
    __extends(If, _super);

    function If(test, then_, else_) {
      this.test = test;
      this.then_ = then_;
      this.else_ = else_;
      If.__super__.constructor.apply(this, arguments);
    }

    If.prototype.toString = function() {
      return "if_(" + (toString(this.test)) + ", " + (toString(this.then_)) + ", " + (toString(this.else_)) + ")";
    };

    return If;

  })(Element);

  optimize = function(exp, env, compiler) {
    var exp_optimize;

    exp_optimize = exp != null ? exp.optimize : void 0;
    if (exp_optimize) {
      return exp_optimize.call(exp, env, compiler);
    } else {
      return exp;
    }
  };

  Var.prototype.optimize = function(env, compiler) {
    return env.lookup(this);
  };

  Assign.prototype.optimize = function(env, compiler) {
    var a, args, caller, left;

    left = this.left;
    if (left instanceof VirtualOperationApply) {
      caller = left.caller;
      args = (function() {
        var _i, _len, _ref8, _results;

        _ref8 = left.args;
        _results = [];
        for (_i = 0, _len = _ref8.length; _i < _len; _i++) {
          a = _ref8[_i];
          _results.push(compiler.optimize(a, env));
        }
        return _results;
      })();
      left = left.constructor(caller, args);
    }
    return new this.constructor(left, compiler.optimize(this.exp, env));
  };

  If.prototype.optimize = function(env, compiler) {
    var else_, test, test_bool, then_;

    test = optimize(this.test, env, compiler);
    test_bool = boolize(test);
    if (test_bool === true) {
      then_ = optimize(this.then_, env, compiler);
      if (then_ instanceof If && then_.test === test) {
        then_ = then_.then_;
      }
      return then_;
    } else if (test_bool === false) {
      else_ = optimize(this.else_, env, compiler);
      if (else_ instanceof If && else_.test === test) {
        else_ = else_.else_;
      }
      return else_;
    } else {
      then_ = optimize(this.then_, env, compiler);
      else_ = optimize(this.else_, env, compiler);
      if (then_ instanceof If && then_.test === test) {
        then_ = then_.then_;
      }
      if (else_ instanceof If && else_.test === test) {
        else_ = else_.else_;
      }
      return new If(test, then_, else_);
    }
  };

  Return.prototype.optimize = function(env, compiler) {
    return new Return(compiler.optimize(this.value, env));
  };

  Lamda.prototype.optimize = function(env, compiler) {
    var result;

    result = new Lamda(this.params, compiler.optimize(this.body, env));
    result.refMap = {};
    result.analyze(compiler, result.refMap);
    return result;
  };

  Clamda.prototype.optimize = function(env, compiler) {
    var result;

    result = new Clamda(this.v, compiler.optimize(this.body, env.extend(this.v, this.v)));
    result.refMap = {};
    result.analyze(compiler, result.refMap);
    return result;
  };

  Apply.prototype.optimize = function(env, compiler) {
    var a, args, caller;

    caller = compiler.optimize(this.caller, env);
    args = (function() {
      var _i, _len, _ref8, _results;

      _ref8 = this.args;
      _results = [];
      for (_i = 0, _len = _ref8.length; _i < _len; _i++) {
        a = _ref8[_i];
        _results.push(compiler.optimize(a, env));
      }
      return _results;
    }).call(this);
    return (typeof caller.optimizeApply === "function" ? caller.optimizeApply(args, env, compiler) : void 0) || new Apply(caller, args);
  };

  Begin.prototype.optimize = function(env, compiler) {
    var exp;

    return new this.constructor((function() {
      var _i, _len, _ref8, _results;

      _ref8 = this.exps;
      _results = [];
      for (_i = 0, _len = _ref8.length; _i < _len; _i++) {
        exp = _ref8[_i];
        _results.push(compiler.optimize(exp, env));
      }
      return _results;
    }).call(this));
  };

  Deref.prototype.optimize = function(env, compiler) {
    if (_.isString(this.exp)) {
      return exp;
    } else if (_.isNumber(this.exp)) {
      return exp;
    } else {
      return this;
    }
  };

  Code.prototype.optimize = function(env, compiler) {
    return this;
  };

  JSFun.prototype.optimize = function(env, compiler) {
    return new JSFun(compiler.optimize(this.fun, env));
  };

  Var.prototype.optimizeApply = function(args, env, compiler) {
    return new Apply(this, args);
  };

  Apply.prototype.optimizeApply = function(args, env, compiler) {
    return new Apply(this, args);
  };

  Lamda.prototype.optimizeApply = function(args, env, compiler) {
    var arg, bindings, body, i, newArgs, newParams, p, params, paramsLength, refCount, refMap, _i, _len;

    params = this.params;
    body = this.body;
    paramsLength = params.length;
    if (paramsLength === 0) {
      return compiler.optimize(body, env);
    }
    newParams = [];
    newArgs = [];
    bindings = {};
    refMap = this.refMap;
    for (i = _i = 0, _len = params.length; _i < _len; i = ++_i) {
      p = params[i];
      arg = args[i];
      if (sideEffect(arg)) {
        newParams.push[p];
        newArgs.push(arg);
        continue;
      } else {
        refCount = refMap[p];
        switch (refCount) {
          case 1:
            bindings[p] = arg;
            break;
          default:
            if (codeSize(arg) * refCount > MAX_EXTEND_CODE_SIZE) {
              newParams.push(p);
              newArgs.push(arg);
            } else {
              bindings[p] = arg;
            }
        }
      }
    }
    if (newParams.length !== 0) {
      if (!isEmpty(bindings)) {
        env = env.extendBindings(bindings);
      }
      return new Apply(new Lamda(newParams, compiler.optimize(body, env)), newArgs);
    } else {
      if (bindings) {
        return compiler.optimize(body, env.extendBindings(bindings));
      } else {
        return compiler.optimize(body, env);
      }
    }
  };

  Clamda.prototype.optimizeApply = function(args, env, compiler) {
    var body, cont, count, v, value;

    cont = this;
    body = cont.body;
    v = cont.v;
    value = compiler.optimize(args[0], env);
    count = cont.refMap[v];
    if (sideEffect(value)) {
      switch (count) {
        case 0:
          return il.begin(value, compiler.optimize(body, env.extend(v, value)));
        case void 0:
          return il.begin(value, compiler.optimize(body, env.extend(v, value)));
        case 1:
          return compiler.optimize(body, env.extend(v, value));
        default:
          return il.begin(il.assign(v, value), compiler.optimize(body, env));
      }
    } else {
      return compiler.optimize(body, env.extend(v, value));
    }
  };

  JSFun.prototype.optimizeApply = function(args, env, compiler) {
    var cont, f, t;

    cont = args[0];
    f = this.fun;
    t = typeof f;
    if (t === 'function') {
      return cont.call(new Apply(f, args.slice(1)));
    } else if (t === 'string') {
      return cont.call(new Apply(il.fun(f), args.slice(1)));
    } else {
      return cont.call(f.apply(args.slice(1))).optimize(env, compiler);
    }
  };

  VirtualOperation.prototype.optimizeApply = function(args, env, compiler) {
    var bool, myBoolize;

    myBoolize = function(memo, x) {
      if (memo === void 0) {
        return void 0;
      } else if (boolize(x) === void 0) {
        return void 0;
      } else {
        return true;
      }
    };
    bool = _.reduce(args, myBoolize, true);
    if (bool && this.func) {
      return this.func.apply(null, args);
    } else {
      return this.apply(args);
    }
  };

  MAX_EXTEND_CODE_SIZE = 10;

  hasOwnProperty = Object.prototype.hasOwnProperty;

  isEmpty = function(obj) {
    var key;

    for (key in obj) {
      if (hasOwnProperty.call(obj, key)) {
        return false;
      }
    }
    return true;
  };

  analyze = function(exp, compiler, refMap) {
    var exp_analyze;

    exp_analyze = exp != null ? exp.analyze : void 0;
    if (exp_analyze) {
      return exp_analyze.call(exp, compiler, refMap);
    }
  };

  Var.prototype.analyze = function(compiler, refMap) {
    if (hasOwnProperty.call(refMap, this)) {
      return refMap[this]++;
    } else {
      return refMap[this] = 1;
    }
  };

  Assign.prototype.analyze = function(compiler, refMap) {
    return analyze(this.exp, compiler, refMap);
  };

  If.prototype.analyze = function(compiler, refMap) {
    return analyze(this.test, compiler, refMap) + analyze(this.then_, compiler, refMap) + analyze(this.else_, compiler, refMap);
  };

  Begin.prototype.analyze = function(compiler, refMap) {
    var e, _i, _len, _ref8, _results;

    _ref8 = this.exps;
    _results = [];
    for (_i = 0, _len = _ref8.length; _i < _len; _i++) {
      e = _ref8[_i];
      _results.push(analyze(e, compiler, refMap));
    }
    return _results;
  };

  Apply.prototype.analyze = function(compiler, refMap) {
    var e, _i, _len, _ref8, _results;

    analyze(this.caller, compiler, refMap);
    _ref8 = this.args;
    _results = [];
    for (_i = 0, _len = _ref8.length; _i < _len; _i++) {
      e = _ref8[_i];
      _results.push(analyze(e, compiler, refMap));
    }
    return _results;
  };

  CApply.prototype.analyze = function(compiler, refMap) {
    analyze(this.cont, compiler, refMap);
    return analyze(this.value, compiler, refMap);
  };

  Lamda.prototype.analyze = function(compiler, refMap) {
    var childMap, i, x, _results;

    childMap = this.refMap = {};
    analyze(this.body, compiler, childMap);
    _results = [];
    for (x in childMap) {
      i = childMap[x];
      if (__indexOf.call(this.params, x) < 0) {
        if (hasOwnProperty.call(refMap, x)) {
          _results.push(refMap[x] += i);
        } else {
          _results.push(refMap[x] = i);
        }
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  Clamda.prototype.analyze = function(compiler, refMap) {
    var childMap, i, x, _results;

    childMap = this.refMap = {};
    analyze(this.body, compiler, childMap);
    _results = [];
    for (x in childMap) {
      i = childMap[x];
      if (x !== this.v.name) {
        if (hasOwnProperty.call(refMap, x)) {
          _results.push(refMap[x] += i);
        } else {
          _results.push(refMap[x] = i);
        }
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  codeSize = function(exp) {
    var exp_codeSize;

    exp_codeSize = exp != null ? exp.codeSize : void 0;
    if (exp_codeSize) {
      return exp_codeSize.call(exp);
    } else {
      return 1;
    }
  };

  Var.prototype.codeSize = function() {
    return 1;
  };

  Return.prototype.codeSize = function() {
    return codeSize(this.value) + 1;
  };

  If.prototype.codeSize = function() {
    return sideEffeft(this.test) + codeSize(this.then_) + codeSize(this.else_) + 1;
  };

  Begin.prototype.codeSize = function() {
    return _.reduce(this.exps, (function(memo, e) {
      return memo + codeSize(e);
    }), 0);
  };

  VirtualOperation.prototype.codeSize = function() {
    return 1;
  };

  Lamda.prototype.codeSize = function() {
    return codeSize(this.body) + 2;
  };

  Clamda.prototype.codeSize = function() {
    return codeSize(this.body) + 1;
  };

  Apply.prototype.codeSize = function() {
    return _.reduce(this.args, (function(memo, e) {
      return memo + codeSize(e);
    }), codeSize(this.caller));
  };

  CApply.prototype.codeSize = function() {
    return codeSize(this.caller.body) + codeSize(this.args[0]) + 2;
  };

  boolize = function(exp) {
    var exp_boolize;

    exp_boolize = exp != null ? exp.boolize : void 0;
    if (exp_boolize) {
      return exp_boolize.call(exp);
    } else {
      return !!exp;
    }
  };

  Var.prototype.boolize = function() {
    return void 0;
  };

  Return.prototype.boolize = function() {
    return boolize(this.value);
  };

  If.prototype.boolize = function() {
    var b;

    b = boolize(this.test);
    if (b === void 0) {
      void 0;
    }
    if (b === true) {
      return boolize(this.then_);
    } else {
      return boolize(this.else_);
    }
  };

  Begin.prototype.boolize = function() {
    var exps;

    exps = this.exps;
    return boolize(exps[exps.length - 1]);
  };

  VirtualOperation.prototype.boolize = function() {
    return void 0;
  };

  BinaryOperation.prototype.boolize = function() {
    return void 0;
  };

  UnaryOperation.prototype.boolize = function() {
    return void 0;
  };

  Lamda.prototype.boolize = function() {
    return true;
  };

  Clamda.prototype.boolize = function() {
    return true;
  };

  Apply.prototype.boolize = function() {
    var a, caller, _i, _len, _ref8;

    caller = this.caller;
    if (caller instanceof Lamda || caller instanceof Clamda) {
      return boolize(caller.body);
    }
    if (caller instanceof Var) {
      return void 0;
    }
    _ref8 = this.args;
    for (_i = 0, _len = _ref8.length; _i < _len; _i++) {
      a = _ref8[_i];
      if (boolize(a) === void 0) {
        return void 0;
      }
    }
    return !!(caller.func.apply(null, args));
  };

  CApply.prototype.boolize = function() {
    return boolize(this.caller.body);
  };

  il.PURE = 0;

  il.EFFECT = 1;

  il.IO = 2;

  il.pure = pure = function(exp) {
    exp._effect = il.PURE;
    return exp;
  };

  il.effect = function(exp) {
    exp._effect = il.EFFECT;
    return exp;
  };

  il.io = function(exp) {
    exp._effect = il.IO;
    return exp;
  };

  sideEffect = function(exp) {
    var exp_effect;

    exp_effect = exp != null ? exp.sideEffect : void 0;
    if (exp_effect) {
      return exp_effect.call(exp);
    } else {
      return il.PURE;
    }
  };

  expsEffect = function(exps) {
    var e, eff, effect, _i, _len;

    effect = il.PURE;
    for (_i = 0, _len = exps.length; _i < _len; _i++) {
      e = exps[_i];
      eff = sideEffect(e);
      if (eff = il.IO) {
        return il.IO;
      }
      if (eff = il.EFFECT) {
        effect = eff;
      }
    }
    return effect;
  };

  Var.prototype.sideEffect = function() {
    return il.PURE;
  };

  Return.prototype.sideEffect = function() {
    return sideEffect(this.value);
  };

  If.prototype.sideEffect = function() {
    return expsEffect([this.test, this.then_, this.else_]);
  };

  Begin.prototype.sideEffect = function() {
    return expsEffect(this.exps);
  };

  Apply.prototype.sideEffect = function() {
    return Math.max(applySideEffect(this.caller), expsEffect(this.args));
  };

  CApply.prototype.sideEffect = function() {
    return Math.max(applySideEffect(this.caller), sideEffect(this.args[0]));
  };

  applySideEffect = function(exp) {
    var exp_applySideEffect;

    exp_applySideEffect = exp != null ? exp.applySideEffect : void 0;
    if (exp_applySideEffect) {
      return exp_applySideEffect.call(exp);
    } else {
      throw new Error(exp);
    }
  };

  Element.prototype.applySideEffect = function() {
    throw new NotImplement(this);
  };

  Var.prototype.applySideEffect = function() {
    return il.IO;
  };

  VirtualOperation.prototype.applySideEffect = function() {
    if (this._effect != null) {
      return this._effect;
    } else {
      return il.IO;
    }
  };

  BinaryOperation.prototype.applySideEffect = function() {
    if (this._effect != null) {
      return this._effect;
    } else {
      return il.PURE;
    }
  };

  UnaryOperation.prototype.applySideEffect = function() {
    if (this._effect != null) {
      return this._effect;
    } else {
      return il.PURE;
    }
  };

  Fun.prototype.applySideEffect = function() {
    if (this._effect != null) {
      return this._effect;
    } else {
      return il.IO;
    }
  };

  JSFun.prototype.applySideEffect = function() {
    if (this._effect != null) {
      return this._effect;
    } else {
      return il.IO;
    }
  };

  Lamda.prototype.applySideEffect = function() {
    if (this._effect != null) {
      return this._effect;
    } else {
      return sideEffect(this.body);
    }
  };

  Clamda.prototype.applySideEffect = function() {
    if (this._effect != null) {
      return this._effect;
    } else {
      return sideEffect(this.body);
    }
  };

  IO = function(exp) {
    var exp_IO;

    exp_IO = exp != null ? exp.IO : void 0;
    if (exp_IO) {
      return exp_IO.call(exp);
    } else {
      return false;
    }
  };

  jsify = function(exp) {
    var exp_jsify;

    exp_jsify = exp != null ? exp.jsify : void 0;
    if (exp_jsify) {
      return exp_jsify.call(exp);
    } else {
      return exp;
    }
  };

  Assign.prototype.jsify = function() {
    return new this.constructor(this.left, jsify(this.exp));
  };

  If.prototype.jsify = function() {
    return new If(this.test, jsify(this.then_), jsify(this.else_));
  };

  Begin.prototype.jsify = function() {
    var e, exps, length, result, _i, _len;

    exps = this.exps;
    length = exps.length;
    if (length === 0 || length === 1) {
      throw new Error("begin should have at least one exp");
    }
    result = [];
    for (_i = 0, _len = exps.length; _i < _len; _i++) {
      e = exps[_i];
      result.push(jsify(e));
    }
    return new Begin(result);
  };

  Lamda.prototype.jsify = function() {
    var body;

    body = jsify(this.body);
    body = insertReturn(body);
    return new Lamda(this.params, body);
  };

  Clamda.prototype.jsify = function() {
    var body;

    body = jsify(this.body);
    body = insertReturn(body);
    return new Clamda(this.v, body);
  };

  Apply.prototype.jsify = function() {
    var a, args;

    args = (function() {
      var _i, _len, _ref8, _results;

      _ref8 = this.args;
      _results = [];
      for (_i = 0, _len = _ref8.length; _i < _len; _i++) {
        a = _ref8[_i];
        _results.push(jsify(a));
      }
      return _results;
    }).call(this);
    return new this.constructor(jsify(this.caller), args);
  };

  CApply.prototype.jsify = function() {
    return new CApply(this.caller.jsify(), jsify(this.args[0]));
  };

  insertReturn = function(exp) {
    var exp_insertReturn;

    exp_insertReturn = exp != null ? exp.insertReturn : void 0;
    if (exp_insertReturn) {
      return exp_insertReturn.call(exp);
    } else {
      return new Return(exp);
    }
  };

  Assign.prototype.insertReturn = function() {
    return il.begin(this, il["return"](this.left));
  };

  Return.prototype.insertReturn = function() {
    return this;
  };

  If.prototype.insertReturn = function() {
    if (this.isStatement()) {
      return new If(this.test, insertReturn(this.then_), insertReturn(this.else_));
    } else {
      return new Return(this);
    }
  };

  Begin.prototype.insertReturn = function() {
    var exps, length;

    exps = this.exps;
    length = exps.length;
    exps[length - 1] = insertReturn(exps[length - 1]);
    return il.begin.apply(il, exps);
  };

  Lamda.prototype.toCode = function(compiler) {
    var a;

    compiler.parent = this;
    return "function(" + (((function() {
      var _i, _len, _ref8, _results;

      _ref8 = this.params;
      _results = [];
      for (_i = 0, _len = _ref8.length; _i < _len; _i++) {
        a = _ref8[_i];
        _results.push(a.name);
      }
      return _results;
    }).call(this)).join(', ')) + "){" + (compiler.toCode(this.body)) + "}";
  };

  Clamda.prototype.toCode = function(compiler) {
    compiler.parent = this;
    return "function(" + this.v.name + "){" + (compiler.toCode(this.body)) + "}";
  };

  Fun.prototype.toCode = function(compiler) {
    return this.func.toString();
  };

  Return.prototype.toCode = function(compiler) {
    return "return " + (compiler.toCode(this.value)) + ";";
  };

  Var.prototype.toCode = function(compiler) {
    return this.name;
  };

  Assign.prototype.toCode = function(compiler) {
    return "" + (compiler.toCode(this.left)) + " = " + (compiler.toCode(this.exp));
  };

  AugmentAssign.prototype.toCode = function(compiler) {
    return "" + (compiler.toCode(this.left)) + " " + this.operator + " " + (compiler.toCode(this.exp));
  };

  If.prototype.toCode = function(compiler) {
    var else_;

    compiler.parent = this;
    else_ = this.else_;
    if (this.isStatement()) {
      if (else_ === void 0) {
        return "if (" + (compiler.toCode(this.test)) + ") " + (compiler.toCode(this.then_)) + ";";
      } else {
        return "if (" + (compiler.toCode(this.test)) + ") " + (compiler.toCode(this.then_)) + " else " + (compiler.toCode(this.else_)) + ";";
      }
    } else {
      return "(" + (compiler.toCode(this.test)) + ") ? (" + (compiler.toCode(this.then_)) + ") : (" + (compiler.toCode(this.else_)) + ")";
    }
  };

  Apply.prototype.toCode = function(compiler) {
    var arg;

    return "(" + (compiler.toCode(this.caller)) + ")(" + (((function() {
      var _i, _len, _ref8, _results;

      _ref8 = this.args;
      _results = [];
      for (_i = 0, _len = _ref8.length; _i < _len; _i++) {
        arg = _ref8[_i];
        _results.push(compiler.toCode(arg));
      }
      return _results;
    }).call(this)).join(', ')) + ")";
  };

  BinaryOperationApply.prototype.toCode = function(compiler) {
    return "" + (compiler.toCode(this.args[0])) + (compiler.toCode(this.caller.symbol)) + (compiler.toCode(this.args[1]));
  };

  UnaryOperationApply.prototype.toCode = function(compiler) {
    return "" + (compiler.toCode(this.caller.symbol)) + (compiler.toCode(this.args[0]));
  };

  VirtualOperationApply.prototype.toCode = function(compiler) {
    return this.caller.applyToCode(compiler, this.args);
  };

  CApply.prototype.toCode = function(compiler) {
    return "(" + (compiler.toCode(this.caller)) + ")(" + (compiler.toCode(this.args[0])) + ")";
  };

  Begin.prototype.toCode = function(compiler) {
    var exp;

    if (compiler.parent instanceof Lamda) {
      compiler.parent = this;
      return "" + (((function() {
        var _i, _len, _ref8, _results;

        _ref8 = this.exps;
        _results = [];
        for (_i = 0, _len = _ref8.length; _i < _len; _i++) {
          exp = _ref8[_i];
          _results.push(compiler.toCode(exp));
        }
        return _results;
      }).call(this)).join('; '));
    } else {
      compiler.parent = this;
      return "{" + (((function() {
        var _i, _len, _ref8, _results;

        _ref8 = this.exps;
        _results = [];
        for (_i = 0, _len = _ref8.length; _i < _len; _i++) {
          exp = _ref8[_i];
          _results.push(compiler.toCode(exp));
        }
        return _results;
      }).call(this)).join('; ')) + "}";
    }
  };

  Array.prototype.toCode = function(compiler) {
    var exp;

    return "[" + (((function() {
      var _i, _len, _ref8, _results;

      _ref8 = this.exps;
      _results = [];
      for (_i = 0, _len = _ref8.length; _i < _len; _i++) {
        exp = _ref8[_i];
        _results.push(compiler.toCode(exp));
      }
      return _results;
    }).call(this)).join(', ')) + "]";
  };

  Print.prototype.toCode = function(compiler) {
    var exp;

    return "console.log(" + (((function() {
      var _i, _len, _ref8, _results;

      _ref8 = this.exps;
      _results = [];
      for (_i = 0, _len = _ref8.length; _i < _len; _i++) {
        exp = _ref8[_i];
        _results.push(compiler.toCode(exp));
      }
      return _results;
    }).call(this)).join(', ')) + ")";
  };

  Deref.prototype.toCode = function(compiler) {
    return "solver.trail.deref(" + (compiler.toCode(this.exp)) + ")";
  };

  Code.prototype.toCode = function(compiler) {
    return this.string;
  };

  JSFun.prototype.toCode = function(compiler) {
    return "function() {\n" + " var args, cont;\n " + "  cont = arguments[0], args = 2 <= arguments.length ? [].slice.call(arguments, 1) : [];\n" + ("   return cont(" + this.fun + ".apply(this, args));") + "   }";
  };

  BinaryOperationApply.prototype.toCode = function(compiler) {
    return "(" + (compiler.toCode(this.args[0])) + ")" + this.caller.symbol + "(" + (compiler.toCode(this.args[1])) + ")";
  };

  UnaryOperationApply.prototype.toCode = function(compiler) {
    return "" + this.caller.symbol + "(" + (compiler.toCode(this.args[0])) + ")";
  };

  isStatement = function(exp) {
    var exp_isStatement;

    exp_isStatement = exp != null ? exp.isStatement : void 0;
    if (exp_isStatement) {
      return exp_isStatement.call(exp);
    } else {
      return false;
    }
  };

  If.prototype.isStatement = function() {
    return isStatement(this.then_) || isStatement(this.else_);
  };

  Begin.prototype.isStatement = function() {
    return true;
  };

  Return.prototype.isStatement = function() {
    return true;
  };

  Assign.prototype.isStatement = function() {
    return true;
  };

  il.vari = function(name) {
    return new Var(name);
  };

  il.assign = function(left, exp) {
    return new Assign(left, exp);
  };

  il.if_ = function(test, then_, else_) {
    return new If(test, then_, else_);
  };

  il.deref = function(exp) {
    return new Deref(exp);
  };

  il.begin = function() {
    var e, exps, length, result, _i, _len;

    exps = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    length = exps.length;
    if (length === 0) {
      throw new Error("begin should have at least one exp");
    }
    if (length === 1) {
      return exps[0];
    }
    result = [];
    for (_i = 0, _len = exps.length; _i < _len; _i++) {
      e = exps[_i];
      if (e instanceof Begin) {
        result = result.concat(e.exps);
      } else {
        result.push(e);
      }
    }
    return new Begin(result);
  };

  il.array = function() {
    var exps;

    exps = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return new Array(exps);
  };

  il.print = function() {
    var exps;

    exps = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return new Print(exps);
  };

  il["return"] = function(value) {
    return new Return(value);
  };

  il.lamda = function() {
    var body, params;

    params = arguments[0], body = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return new Lamda(params, il.begin.apply(il, body));
  };

  il.clamda = function() {
    var body, v;

    v = arguments[0], body = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return new Clamda(v, il.begin.apply(il, body));
  };

  il.code = function(string) {
    return new Code(string);
  };

  il.jsfun = function(fun) {
    return new JSFun(fun);
  };

  binary = function(symbol, func) {
    return new BinaryOperation(symbol, func);
  };

  unary = function(symbol, func) {
    return new UnaryOperation(symbol, func);
  };

  il.eq = binary("===", function(x, y) {
    return x === y;
  });

  il.ne = binary("!==", function(x, y) {
    return x !== y;
  });

  il.lt = binary("<", function(x, y) {
    return x < y;
  });

  il.le = binary("<=", function(x, y) {
    return x <= y;
  });

  il.gt = binary(">", function(x, y) {
    return x > y;
  });

  il.ge = binary(">=", function(x, y) {
    return x >= y;
  });

  il.add = binary("+", function(x, y) {
    return x + y;
  });

  il.sub = binary("-", function(x, y) {
    return x - y;
  });

  il.mul = binary("*", function(x, y) {
    return x * y;
  });

  il.div = binary("/", function(x, y) {
    return x / y;
  });

  il.mod = binary("%", function(x, y) {
    return x % y;
  });

  il.and_ = binary("&&", function(x, y) {
    return x && y;
  });

  il.or_ = binary("||", function(x, y) {
    return x || y;
  });

  il.bitand = binary("&", function(x, y) {
    return x & y;
  });

  il.bitor = binary("|", function(x, y) {
    return x | y;
  });

  il.bitxor = binary("^", function(x, y) {
    return x ^ y;
  });

  il.lshift = binary("<<", function(x, y) {
    return x << y;
  });

  il.rshift = binary(">>", function(x, y) {
    return x >> y;
  });

  augmentAssign = function(operator, func) {
    var AugAssign, _ref8;

    return AugAssign = (function(_super) {
      __extends(AugAssign, _super);

      function AugAssign() {
        _ref8 = AugAssign.__super__.constructor.apply(this, arguments);
        return _ref8;
      }

      AugAssign.prototype._effect = true;

      AugAssign.prototype.operator = operator;

      AugAssign.prototype.func = func;

      return AugAssign;

    })(AugmentAssign);
  };

  il.augadd = augmentAssign("+=", function(x, y) {
    return x + y;
  });

  il.augsub = augmentAssign("-=", function(x, y) {
    return x - y;
  });

  il.augmul = augmentAssign("*=", function(x, y) {
    return x * y;
  });

  il.augdiv = augmentAssign("/=", function(x, y) {
    return x / y;
  });

  il.augmod = augmentAssign("%=", function(x, y) {
    return x % y;
  });

  il.augand = augmentAssign("&&=", function(x, y) {
    return x && y;
  });

  il.augor = augmentAssign("||=", function(x, y) {
    return x || y;
  });

  il.augbitand = augmentAssign("&=", function(x, y) {
    return x & y;
  });

  il.augbitor = augmentAssign("|=", function(x, y) {
    return x | y;
  });

  il.augbitxor = augmentAssign("^=", function(x, y) {
    return x ^ y;
  });

  il.auglshift = augmentAssign("<<=", function(x, y) {
    return x << y;
  });

  il.augrshift = augmentAssign(">>=", function(x, y) {
    return x >> y;
  });

  il.not_ = unary("!", function(x) {
    return !x;
  });

  il.neg = unary("-", function(x) {
    return -x;
  });

  il.bitnot = unary("~", function(x) {
    return ~x;
  });

  il.inc = il.effect(unary("++"));

  il.dec = il.effect(unary("--"));

  vop = function(name, toCode) {
    var Vop, _ref8;

    Vop = (function(_super) {
      __extends(Vop, _super);

      function Vop() {
        _ref8 = Vop.__super__.constructor.apply(this, arguments);
        return _ref8;
      }

      Vop.prototype.applyToCode = toCode;

      Vop.prototype._effect = true;

      return Vop;

    })(VirtualOperation);
    return new Vop(name);
  };

  il.suffixinc = vop('suffixdec', function(compiler, args) {
    return "" + (compiler.toCode(args[0])) + "++";
  });

  il.suffixdec = vop('suffixdec', function(compiler, args) {
    return "" + (compiler.toCode(args[0])) + "--";
  });

  il.pushCatch = vop('pushCatch', function(compiler, args) {
    return "solver.pushCatch(" + (compiler.toCode(args[0])) + ", " + (compiler.toCode(args[1])) + ")";
  });

  il.popCatch = vop('popCatch', function(compiler, args) {
    return "solver.popCatch(" + (compiler.toCode(args[0])) + ")";
  });

  il.findCatch = il.pure(vop('findCatch', function(compiler, args) {
    return "solver.findCatch(" + (compiler.toCode(args[0])) + ")";
  }));

  il.fake = vop('fake', function(compiler, args) {
    return "solver.fake(" + (compiler.toCode(args[0])) + ")";
  }).apply([]);

  il.restore = vop('restore', function(compiler, args) {
    return "solver.restore(" + (compiler.toCode(args[0])) + ")";
  });

  il.getvalue = il.pure(vop('getvalue', function(compiler, args) {
    return "solver.trail.getvalue(" + (compiler.toCode(args[0])) + ")";
  }));

  il.list = il.pure(vop('list', function(compiler, args) {
    var a;

    return "[" + (((function() {
      var _i, _len, _results;

      _results = [];
      for (_i = 0, _len = args.length; _i < _len; _i++) {
        a = args[_i];
        _results.push(compiler.toCode(a));
      }
      return _results;
    })()).join(', ')) + "]";
  }));

  il.index = il.pure(vop('index', function(compiler, args) {
    return "(" + (compiler.toCode(args[0])) + ")[" + (compiler.toCode(args[1])) + "]";
  }));

  il.push = vop('push', function(compiler, args) {
    return "(" + (compiler.toCode(args[0])) + ").push(" + (compiler.toCode(args[1])) + ")";
  });

  il.concat = vop('concat', function(compiler, args) {
    return "(" + (compiler.toCode(args[0])) + ").concat(" + (compiler.toCode(args[1])) + ")";
  });

  il.run = vop('run', function(compiler, args) {
    return "solver.run(" + (compiler.toCode(args[0])) + ", " + (compiler.toCode(args[1])) + ")";
  });

  il.failcont = vop('failcont', function(compiler, args) {
    return "solver.failcont(" + (compiler.toCode(args[0])) + ")";
  });

  il.evalexpr = vop('evalexpr', function(compiler, args) {
    return "solve(" + (compiler.toCode(args[0])) + ", " + (compiler.toCode(args[1])) + ")";
  });

  il.fun = function(f) {
    return new Fun(f);
  };

}).call(this);

/*
//@ sourceMappingURL=interlang.map
*/
