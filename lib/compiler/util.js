// Generated by CoffeeScript 1.6.2
(function() {
  var il, jsfun, lambda, macro, name, vari, vop, _,
    __slice = [].slice;

  exports.vari = vari = function(name) {
    return ["var", name];
  };

  exports.vars = function(names) {
    var name, _i, _len, _ref, _results;

    _ref = split(names, reElements);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      _results.push(vari(name));
    }
    return _results;
  };

  exports.quote = function(exp) {
    return ["quote", exp];
  };

  exports.begin = function() {
    var exps;

    exps = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return ["begin"].concat(exps);
  };

  exports.assign = function(vari, exp) {
    return ["assign", vari, exp];
  };

  exports.if_ = function(test, then_, else_) {
    return ["if", test, then_, else_];
  };

  exports.funcall = function() {
    var args, caller;

    caller = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return ["funcall", caller].concat(args);
  };

  exports.macall = function() {
    var args, caller;

    caller = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return ["macall", caller].concat(args);
  };

  exports.jsobject = function(exp) {
    return ["jsobject", exp];
  };

  exports.jsfun = jsfun = function(exp) {
    return ["jsfun", exp];
  };

  exports.lamda = lambda = function() {
    var body, params;

    params = arguments[0], body = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return ["lambda", params].concat(body);
  };

  exports.macro = macro = function() {
    var body, params;

    params = arguments[0], body = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return ["macro", params].concat(body);
  };

  exports.print_ = function() {
    var exps;

    exps = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return ['funcall', jsfun(vari('console.log'))].concat(exps);
  };

  exports.vop = vop = function() {
    var args, name;

    name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return ["vop_" + name].concat(args);
  };

  il = require("./interlang");

  for (name in il) {
    _ = il[name];
    if (_ instanceof il.VirtualOperation) {
      (function(name) {
        return exports[name] = function() {
          var args;

          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return vop.apply(null, [name].concat(__slice.call(args)));
        };
      })(name);
    }
  }

}).call(this);

/*
//@ sourceMappingURL=util.map
*/
