// Generated by CoffeeScript 1.6.2
(function() {
  var Compiler, OptimizationEnv, beautify, compile, compileToCode, compiler, env, fs, il, internalvar, solve, uservar, vari, xexports, _, _ref;

  _ = require("underscore");

  fs = require("fs");

  beautify = require('js-beautify').js_beautify;

  il = require("../interlang");

  _ref = require('../core'), Compiler = _ref.Compiler, OptimizationEnv = _ref.OptimizationEnv;

  solve = function(exp, path) {
    var compiled;

    path = compile(exp, path);
    delete require.cache[require.resolve(path)];
    compiled = require(path);
    return compiled.main();
  };

  compile = function(exp, path) {
    var code, fd;

    code = "_ = require('underscore');\n" + '__slice = [].slice\n' + "solve = require('f:/daonode/lib/compiler/core.js').solve;\n" + "parser = require('f:/daonode/lib/compiler/parser.js');\n" + "solvecore = require('f:/daonode/lib/compiler/solve.js');\n" + "SolverFinish = solvecore.SolverFinish;\n" + "Solver = solvecore.Solver;\n" + "Trail = solvecore.Trail;\n" + "Var = solvecore.Var;\n" + "DummyVar = solvecore.DummyVar;\n\n" + compileToCode(exp) + "\n//exports.main();";
    code = beautify(code, {
      indent_size: 2
    });
    path = path || "f:/daonode/lib/compiler/test/compiled.js";
    fd = fs.openSync(path, 'w');
    fs.writeSync(fd, code);
    fs.closeSync(fd);
    return path;
  };

  compiler = new Compiler();

  uservar = function(name) {
    return compiler.newvar(il.uservar(name));
  };

  internalvar = function(name) {
    return compiler.newvar(il.internalvar(name));
  };

  compiler.env = env = new OptimizationEnv(env, {});

  compileToCode = function(exp) {
    var f, lamda;

    lamda = il.userlamda([], exp);
    lamda = compiler.optimize(lamda, env);
    lamda = lamda.jsify(compiler, env);
    f = il.assign(il.uservarattr('exports.main'), lamda);
    return f.toCode(compiler);
  };

  vari = function(name) {
    return internalvar(name);
  };

  xexports = {};

  exports.Test = {
    "test1": function(test) {
      var x, x2;

      x = internalvar('x');
      x2 = internalvar('x2');
      test.equal(solve(1), 1);
      test.equal(solve(il.let_([], 1)), 1);
      test.equal(solve(il.assign(x, il.let_([], 1))), 1);
      test.equal(solve(il.begin(il.assign(x, il.let_([], 1)), 2)), 2);
      test.equal(solve(il.let_([], il.assign(x, 1), 1)), 1);
      test.equal(solve(il.let_([x, 1], il.assign(x, il.add(x, 1)), x)), 2);
      test.equal(solve(il.let_([x, 1], il.let_([x2, 2], x2), x)), 1);
      return test.done();
    },
    "test lamda call": function(test) {
      var f, x;

      x = internalvar('x');
      f = internalvar('f');
      test.equal(solve(il.if_(1, 2, 3)), 2);
      test.equal(solve(il.let_([x, 1], il.if_(1, 2, 3))), 2);
      test.equal(solve(il.begin(il.assign(f, il.lamda([], 0)), f.call())), 0);
      test.equal(solve(il.begin(il.assign(f, il.lamda([x], il.if_(il.eq(x, 0), 0, f.call(il.sub(x, 1))))), f.call(5))), 0);
      test.equal(solve(il.begin(il.assign(f, il.lamda([x], il.if_(il.eq(x, 0), 0, il.begin(il.assign(x, il.sub(x, 1)), f.call(x))))), f.call(1000))), 0);
      test.equal(solve(il.begin(il.assign(x, 1000), il.assign(f, il.lamda([], il.nonlocal(x), il.if_(il.eq(x, 0), 0, il.begin(il.assign(x, il.sub(x, 1)), f.call())))), f.call())), 0);
      x = uservar('x');
      test.equal(solve(il.begin(il.assign(x, 1000), il.assign(f, il.lamda([], il.if_(il.eq(x, 0), 0, il.begin(il.assign(x, il.sub(x, 1)), f.call())))), f.call())), 0);
      return test.done();
    },
    "test uservar": function(test) {
      var f, v, x;

      x = uservar('x');
      f = internalvar('f');
      v = internalvar('v');
      test.equal(solve(il.begin(il.assign(f, il.userlamda([], il.clamda(v, il.assign(x, il.add(x, 1)), x))), 1)), 1);
      return test.done();
    },
    "test optrec idfunc": function(test) {
      var f, x;

      x = uservar('x');
      f = internalvar('f');
      test.equal(solve(il.begin(il.assign(f, il.optrec([x], il.if_(il.eq(x, 0), 0, f.call(il.sub(x, 1))))), f.call(3))), 0);
      return test.done();
    },
    "test tailrec fibonacci": function(test) {
      var a, b, f, n;

      n = uservar('n');
      a = uservar('a');
      b = uservar('b');
      f = internalvar('f');
      test.equal(solve(il.begin(il.assign(f, il.tailrec([n, a, b], il.if_(il.eq(n, 0), a, f.call(il.sub(n, 1), b, il.add(a, b))))), f.call(3, 0, 1))), 2);
      return test.done();
    }
  };

  exports.Test = {
    "test switch": function(test) {
      var a, b, c;

      a = 0;
      b = 1;
      c = 2;
      switch (2){ case b: case b+b: console.log(c); break};
      return test.done();
    }
  };

}).call(this);

/*
//@ sourceMappingURL=test_optimize.map
*/
